// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	gateway "github.com/pylonbot/pylon-gateway-protobuf-go/discord/v1/gateway"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	UpdateVoiceState(ctx context.Context, in *gateway.UpdateVoiceStateRequest, opts ...grpc.CallOption) (*gateway.UpdateVoiceStateResponse, error)
	UpdateStatus(ctx context.Context, in *gateway.UpdateStatusRequest, opts ...grpc.CallOption) (*gateway.UpdateStatusResponse, error)
	FindUserMutualGuilds(ctx context.Context, in *gateway.GetUserMutualGuildsRequest, opts ...grpc.CallOption) (*gateway.GetUserMutualGuildsResponse, error)
	FindEmoji(ctx context.Context, in *gateway.FindEmojiRequest, opts ...grpc.CallOption) (*gateway.FindEmojiResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) UpdateVoiceState(ctx context.Context, in *gateway.UpdateVoiceStateRequest, opts ...grpc.CallOption) (*gateway.UpdateVoiceStateResponse, error) {
	out := new(gateway.UpdateVoiceStateResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.Gateway/UpdateVoiceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateStatus(ctx context.Context, in *gateway.UpdateStatusRequest, opts ...grpc.CallOption) (*gateway.UpdateStatusResponse, error) {
	out := new(gateway.UpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.Gateway/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) FindUserMutualGuilds(ctx context.Context, in *gateway.GetUserMutualGuildsRequest, opts ...grpc.CallOption) (*gateway.GetUserMutualGuildsResponse, error) {
	out := new(gateway.GetUserMutualGuildsResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.Gateway/FindUserMutualGuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) FindEmoji(ctx context.Context, in *gateway.FindEmojiRequest, opts ...grpc.CallOption) (*gateway.FindEmojiResponse, error) {
	out := new(gateway.FindEmojiResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.Gateway/FindEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	UpdateVoiceState(context.Context, *gateway.UpdateVoiceStateRequest) (*gateway.UpdateVoiceStateResponse, error)
	UpdateStatus(context.Context, *gateway.UpdateStatusRequest) (*gateway.UpdateStatusResponse, error)
	FindUserMutualGuilds(context.Context, *gateway.GetUserMutualGuildsRequest) (*gateway.GetUserMutualGuildsResponse, error)
	FindEmoji(context.Context, *gateway.FindEmojiRequest) (*gateway.FindEmojiResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) UpdateVoiceState(context.Context, *gateway.UpdateVoiceStateRequest) (*gateway.UpdateVoiceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoiceState not implemented")
}
func (UnimplementedGatewayServer) UpdateStatus(context.Context, *gateway.UpdateStatusRequest) (*gateway.UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedGatewayServer) FindUserMutualGuilds(context.Context, *gateway.GetUserMutualGuildsRequest) (*gateway.GetUserMutualGuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserMutualGuilds not implemented")
}
func (UnimplementedGatewayServer) FindEmoji(context.Context, *gateway.FindEmojiRequest) (*gateway.FindEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEmoji not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_UpdateVoiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gateway.UpdateVoiceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateVoiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.Gateway/UpdateVoiceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateVoiceState(ctx, req.(*gateway.UpdateVoiceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gateway.UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.Gateway/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateStatus(ctx, req.(*gateway.UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_FindUserMutualGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gateway.GetUserMutualGuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).FindUserMutualGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.Gateway/FindUserMutualGuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).FindUserMutualGuilds(ctx, req.(*gateway.GetUserMutualGuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_FindEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gateway.FindEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).FindEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.Gateway/FindEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).FindEmoji(ctx, req.(*gateway.FindEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pylon.gateway.v1.service.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateVoiceState",
			Handler:    _Gateway_UpdateVoiceState_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Gateway_UpdateStatus_Handler,
		},
		{
			MethodName: "FindUserMutualGuilds",
			Handler:    _Gateway_FindUserMutualGuilds_Handler,
		},
		{
			MethodName: "FindEmoji",
			Handler:    _Gateway_FindEmoji_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/gateway_service.proto",
}
