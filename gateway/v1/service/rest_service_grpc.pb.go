// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	rest "github.com/pylonbot/pylon-gateway-protobuf-go/discord/v1/rest"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GatewayRestClient is the client API for GatewayRest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayRestClient interface {
	ModifyGuild(ctx context.Context, in *rest.ModifyGuildRequest, opts ...grpc.CallOption) (*rest.ModifyGuildResponse, error)
	CreateGuildChannel(ctx context.Context, in *rest.CreateGuildChannelRequest, opts ...grpc.CallOption) (*rest.CreateGuildChannelResponse, error)
	ModifyGuildChannelPositions(ctx context.Context, in *rest.ModifyGuildChannelPositionsRequest, opts ...grpc.CallOption) (*rest.ModifyGuildChannelPositionsResponse, error)
	AddGuildMember(ctx context.Context, in *rest.AddGuildMemberRequest, opts ...grpc.CallOption) (*rest.AddGuildMemberResponse, error)
	ModifyGuildMember(ctx context.Context, in *rest.ModifyGuildMemberRequest, opts ...grpc.CallOption) (*rest.ModifyGuildMemberResponse, error)
	ModifyCurrentUserNick(ctx context.Context, in *rest.ModifyCurrentUserNickRequest, opts ...grpc.CallOption) (*rest.ModifyCurrentUserNickResponse, error)
	AddGuildMemberRole(ctx context.Context, in *rest.AddGuildMemberRoleRequest, opts ...grpc.CallOption) (*rest.AddGuildMemberRoleResponse, error)
	RemoveGuildMemberRole(ctx context.Context, in *rest.RemoveGuildMemberRoleRequest, opts ...grpc.CallOption) (*rest.RemoveGuildMemberRoleResponse, error)
	RemoveGuildMember(ctx context.Context, in *rest.RemoveGuildMemberRequest, opts ...grpc.CallOption) (*rest.RemoveGuildMemberResponse, error)
	GetGuildBans(ctx context.Context, in *rest.GetGuildBansRequest, opts ...grpc.CallOption) (*rest.GetGuildBansResponse, error)
	GetGuildBan(ctx context.Context, in *rest.GetGuildBanRequest, opts ...grpc.CallOption) (*rest.GetGuildBanResponse, error)
	CreateGuildBan(ctx context.Context, in *rest.CreateGuildBanRequest, opts ...grpc.CallOption) (*rest.CreateGuildBanResponse, error)
	RemoveGuildBan(ctx context.Context, in *rest.RemoveGuildBanRequest, opts ...grpc.CallOption) (*rest.RemoveGuildBanResponse, error)
	CreateGuildRole(ctx context.Context, in *rest.CreateGuildRoleRequest, opts ...grpc.CallOption) (*rest.CreateGuildRoleResponse, error)
	ModifyGuildRolePositions(ctx context.Context, in *rest.ModifyGuildRolePositionsRequest, opts ...grpc.CallOption) (*rest.ModifyGuildRolePositionsResponse, error)
	ModifyGuildRole(ctx context.Context, in *rest.ModifyGuildRoleRequest, opts ...grpc.CallOption) (*rest.ModifyGuildRoleResponse, error)
	DeleteGuildRole(ctx context.Context, in *rest.DeleteGuildRoleRequest, opts ...grpc.CallOption) (*rest.DeleteGuildRoleResponse, error)
	GetGuildPruneCount(ctx context.Context, in *rest.GetGuildPruneCountRequest, opts ...grpc.CallOption) (*rest.GetGuildPruneCountResponse, error)
	BeginGuildPrune(ctx context.Context, in *rest.BeginGuildPruneRequest, opts ...grpc.CallOption) (*rest.BeginGuildPruneResponse, error)
	GetGuildVoiceRegions(ctx context.Context, in *rest.GetGuildVoiceRegionsRequest, opts ...grpc.CallOption) (*rest.GetGuildVoiceRegionsResponse, error)
	GetGuildInvites(ctx context.Context, in *rest.GetGuildInvitesRequest, opts ...grpc.CallOption) (*rest.GetGuildInvitesResponse, error)
	ModifyChannel(ctx context.Context, in *rest.ModifyChannelRequest, opts ...grpc.CallOption) (*rest.ModifyChannelResponse, error)
	DeleteChannel(ctx context.Context, in *rest.DeleteChannelRequest, opts ...grpc.CallOption) (*rest.DeleteChannelResponse, error)
	CreateMessage(ctx context.Context, in *rest.CreateMessageRequest, opts ...grpc.CallOption) (*rest.CreateMessageResponse, error)
	CrosspostMessage(ctx context.Context, in *rest.CrosspostMessageRequest, opts ...grpc.CallOption) (*rest.CrosspostMessageResponse, error)
	CreateReaction(ctx context.Context, in *rest.CreateReactionRequest, opts ...grpc.CallOption) (*rest.CreateReactionResponse, error)
	DeleteOwnReaction(ctx context.Context, in *rest.DeleteOwnReactionRequest, opts ...grpc.CallOption) (*rest.DeleteOwnReactionResponse, error)
	DeleteUserReaction(ctx context.Context, in *rest.DeleteUserReactionRequest, opts ...grpc.CallOption) (*rest.DeleteUserReactionResponse, error)
	DeleteAllReactions(ctx context.Context, in *rest.DeleteAllReactionsRequest, opts ...grpc.CallOption) (*rest.DeleteAllReactionsResponse, error)
	DeleteAllReactionsForEmoji(ctx context.Context, in *rest.DeleteAllReactionsForEmojiRequest, opts ...grpc.CallOption) (*rest.DeleteAllReactionsForEmojiResponse, error)
	EditMessage(ctx context.Context, in *rest.EditMessageRequest, opts ...grpc.CallOption) (*rest.EditMessageResponse, error)
	DeleteMessage(ctx context.Context, in *rest.DeleteMessageRequest, opts ...grpc.CallOption) (*rest.DeleteMessageResponse, error)
	BulkDeleteMessages(ctx context.Context, in *rest.BulkDeleteMessagesRequest, opts ...grpc.CallOption) (*rest.BulkDeleteMessagesResponse, error)
	EditChannelPermissions(ctx context.Context, in *rest.EditChannelPermissionsRequest, opts ...grpc.CallOption) (*rest.EditChannelPermissionsResponse, error)
	GetChannelInvites(ctx context.Context, in *rest.GetChannelInvitesRequest, opts ...grpc.CallOption) (*rest.GetChannelInvitesResponse, error)
	CreateChannelInvite(ctx context.Context, in *rest.CreateChannelInviteRequest, opts ...grpc.CallOption) (*rest.CreateChannelInviteResponse, error)
	DeleteChannelPermission(ctx context.Context, in *rest.DeleteChannelPermissionRequest, opts ...grpc.CallOption) (*rest.DeleteChannelPermissionResponse, error)
	FollowNewsChannel(ctx context.Context, in *rest.FollowNewsChannelRequest, opts ...grpc.CallOption) (*rest.FollowNewsChannelResponse, error)
	TriggerTypingIndicator(ctx context.Context, in *rest.TriggerTypingIndicatorRequest, opts ...grpc.CallOption) (*rest.TriggerTypingIndicatorResponse, error)
	GetPinnedMessages(ctx context.Context, in *rest.GetPinnedMessagesRequest, opts ...grpc.CallOption) (*rest.GetPinnedMessagesResponse, error)
	AddPinnedChannelMessage(ctx context.Context, in *rest.AddPinnedChannelMessageRequest, opts ...grpc.CallOption) (*rest.AddPinnedChannelMessageResponse, error)
	DeletePinnedChannelMessage(ctx context.Context, in *rest.DeletePinnedChannelMessageRequest, opts ...grpc.CallOption) (*rest.DeletePinnedChannelMessageResponse, error)
	ListGuildEmojis(ctx context.Context, in *rest.ListGuildEmojisRequest, opts ...grpc.CallOption) (*rest.ListGuildEmojisResponse, error)
	GetGuildEmoji(ctx context.Context, in *rest.GetGuildEmojiRequest, opts ...grpc.CallOption) (*rest.GetGuildEmojiResponse, error)
	CreateGuildEmoji(ctx context.Context, in *rest.CreateGuildEmojiRequest, opts ...grpc.CallOption) (*rest.CreateGuildEmojiResponse, error)
	ModifyGuildEmoji(ctx context.Context, in *rest.ModifyGuildEmojiRequest, opts ...grpc.CallOption) (*rest.ModifyGuildEmojiResponse, error)
	DeleteGuildEmoji(ctx context.Context, in *rest.DeleteGuildEmojiRequest, opts ...grpc.CallOption) (*rest.DeleteGuildEmojiResponse, error)
	GetCurrentUser(ctx context.Context, in *rest.GetCurrentUserRequest, opts ...grpc.CallOption) (*rest.GetCurrentUserResponse, error)
	GetUser(ctx context.Context, in *rest.GetUserRequest, opts ...grpc.CallOption) (*rest.GetUserResponse, error)
	ModifyCurrentUser(ctx context.Context, in *rest.ModifyCurrentUserRequest, opts ...grpc.CallOption) (*rest.ModifyCurrentUserResponse, error)
	LeaveGuild(ctx context.Context, in *rest.LeaveGuildRequest, opts ...grpc.CallOption) (*rest.LeaveGuildResponse, error)
	CreateDm(ctx context.Context, in *rest.CreateDmRequest, opts ...grpc.CallOption) (*rest.CreateDmResponse, error)
}

type gatewayRestClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayRestClient(cc grpc.ClientConnInterface) GatewayRestClient {
	return &gatewayRestClient{cc}
}

func (c *gatewayRestClient) ModifyGuild(ctx context.Context, in *rest.ModifyGuildRequest, opts ...grpc.CallOption) (*rest.ModifyGuildResponse, error) {
	out := new(rest.ModifyGuildResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CreateGuildChannel(ctx context.Context, in *rest.CreateGuildChannelRequest, opts ...grpc.CallOption) (*rest.CreateGuildChannelResponse, error) {
	out := new(rest.CreateGuildChannelResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CreateGuildChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ModifyGuildChannelPositions(ctx context.Context, in *rest.ModifyGuildChannelPositionsRequest, opts ...grpc.CallOption) (*rest.ModifyGuildChannelPositionsResponse, error) {
	out := new(rest.ModifyGuildChannelPositionsResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyGuildChannelPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) AddGuildMember(ctx context.Context, in *rest.AddGuildMemberRequest, opts ...grpc.CallOption) (*rest.AddGuildMemberResponse, error) {
	out := new(rest.AddGuildMemberResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/AddGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ModifyGuildMember(ctx context.Context, in *rest.ModifyGuildMemberRequest, opts ...grpc.CallOption) (*rest.ModifyGuildMemberResponse, error) {
	out := new(rest.ModifyGuildMemberResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ModifyCurrentUserNick(ctx context.Context, in *rest.ModifyCurrentUserNickRequest, opts ...grpc.CallOption) (*rest.ModifyCurrentUserNickResponse, error) {
	out := new(rest.ModifyCurrentUserNickResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyCurrentUserNick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) AddGuildMemberRole(ctx context.Context, in *rest.AddGuildMemberRoleRequest, opts ...grpc.CallOption) (*rest.AddGuildMemberRoleResponse, error) {
	out := new(rest.AddGuildMemberRoleResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/AddGuildMemberRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) RemoveGuildMemberRole(ctx context.Context, in *rest.RemoveGuildMemberRoleRequest, opts ...grpc.CallOption) (*rest.RemoveGuildMemberRoleResponse, error) {
	out := new(rest.RemoveGuildMemberRoleResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/RemoveGuildMemberRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) RemoveGuildMember(ctx context.Context, in *rest.RemoveGuildMemberRequest, opts ...grpc.CallOption) (*rest.RemoveGuildMemberResponse, error) {
	out := new(rest.RemoveGuildMemberResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/RemoveGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetGuildBans(ctx context.Context, in *rest.GetGuildBansRequest, opts ...grpc.CallOption) (*rest.GetGuildBansResponse, error) {
	out := new(rest.GetGuildBansResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetGuildBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetGuildBan(ctx context.Context, in *rest.GetGuildBanRequest, opts ...grpc.CallOption) (*rest.GetGuildBanResponse, error) {
	out := new(rest.GetGuildBanResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetGuildBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CreateGuildBan(ctx context.Context, in *rest.CreateGuildBanRequest, opts ...grpc.CallOption) (*rest.CreateGuildBanResponse, error) {
	out := new(rest.CreateGuildBanResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CreateGuildBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) RemoveGuildBan(ctx context.Context, in *rest.RemoveGuildBanRequest, opts ...grpc.CallOption) (*rest.RemoveGuildBanResponse, error) {
	out := new(rest.RemoveGuildBanResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/RemoveGuildBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CreateGuildRole(ctx context.Context, in *rest.CreateGuildRoleRequest, opts ...grpc.CallOption) (*rest.CreateGuildRoleResponse, error) {
	out := new(rest.CreateGuildRoleResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CreateGuildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ModifyGuildRolePositions(ctx context.Context, in *rest.ModifyGuildRolePositionsRequest, opts ...grpc.CallOption) (*rest.ModifyGuildRolePositionsResponse, error) {
	out := new(rest.ModifyGuildRolePositionsResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyGuildRolePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ModifyGuildRole(ctx context.Context, in *rest.ModifyGuildRoleRequest, opts ...grpc.CallOption) (*rest.ModifyGuildRoleResponse, error) {
	out := new(rest.ModifyGuildRoleResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyGuildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteGuildRole(ctx context.Context, in *rest.DeleteGuildRoleRequest, opts ...grpc.CallOption) (*rest.DeleteGuildRoleResponse, error) {
	out := new(rest.DeleteGuildRoleResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteGuildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetGuildPruneCount(ctx context.Context, in *rest.GetGuildPruneCountRequest, opts ...grpc.CallOption) (*rest.GetGuildPruneCountResponse, error) {
	out := new(rest.GetGuildPruneCountResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetGuildPruneCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) BeginGuildPrune(ctx context.Context, in *rest.BeginGuildPruneRequest, opts ...grpc.CallOption) (*rest.BeginGuildPruneResponse, error) {
	out := new(rest.BeginGuildPruneResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/BeginGuildPrune", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetGuildVoiceRegions(ctx context.Context, in *rest.GetGuildVoiceRegionsRequest, opts ...grpc.CallOption) (*rest.GetGuildVoiceRegionsResponse, error) {
	out := new(rest.GetGuildVoiceRegionsResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetGuildVoiceRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetGuildInvites(ctx context.Context, in *rest.GetGuildInvitesRequest, opts ...grpc.CallOption) (*rest.GetGuildInvitesResponse, error) {
	out := new(rest.GetGuildInvitesResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetGuildInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ModifyChannel(ctx context.Context, in *rest.ModifyChannelRequest, opts ...grpc.CallOption) (*rest.ModifyChannelResponse, error) {
	out := new(rest.ModifyChannelResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteChannel(ctx context.Context, in *rest.DeleteChannelRequest, opts ...grpc.CallOption) (*rest.DeleteChannelResponse, error) {
	out := new(rest.DeleteChannelResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CreateMessage(ctx context.Context, in *rest.CreateMessageRequest, opts ...grpc.CallOption) (*rest.CreateMessageResponse, error) {
	out := new(rest.CreateMessageResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CrosspostMessage(ctx context.Context, in *rest.CrosspostMessageRequest, opts ...grpc.CallOption) (*rest.CrosspostMessageResponse, error) {
	out := new(rest.CrosspostMessageResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CrosspostMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CreateReaction(ctx context.Context, in *rest.CreateReactionRequest, opts ...grpc.CallOption) (*rest.CreateReactionResponse, error) {
	out := new(rest.CreateReactionResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CreateReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteOwnReaction(ctx context.Context, in *rest.DeleteOwnReactionRequest, opts ...grpc.CallOption) (*rest.DeleteOwnReactionResponse, error) {
	out := new(rest.DeleteOwnReactionResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteOwnReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteUserReaction(ctx context.Context, in *rest.DeleteUserReactionRequest, opts ...grpc.CallOption) (*rest.DeleteUserReactionResponse, error) {
	out := new(rest.DeleteUserReactionResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteUserReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteAllReactions(ctx context.Context, in *rest.DeleteAllReactionsRequest, opts ...grpc.CallOption) (*rest.DeleteAllReactionsResponse, error) {
	out := new(rest.DeleteAllReactionsResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteAllReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteAllReactionsForEmoji(ctx context.Context, in *rest.DeleteAllReactionsForEmojiRequest, opts ...grpc.CallOption) (*rest.DeleteAllReactionsForEmojiResponse, error) {
	out := new(rest.DeleteAllReactionsForEmojiResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteAllReactionsForEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) EditMessage(ctx context.Context, in *rest.EditMessageRequest, opts ...grpc.CallOption) (*rest.EditMessageResponse, error) {
	out := new(rest.EditMessageResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/EditMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteMessage(ctx context.Context, in *rest.DeleteMessageRequest, opts ...grpc.CallOption) (*rest.DeleteMessageResponse, error) {
	out := new(rest.DeleteMessageResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) BulkDeleteMessages(ctx context.Context, in *rest.BulkDeleteMessagesRequest, opts ...grpc.CallOption) (*rest.BulkDeleteMessagesResponse, error) {
	out := new(rest.BulkDeleteMessagesResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/BulkDeleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) EditChannelPermissions(ctx context.Context, in *rest.EditChannelPermissionsRequest, opts ...grpc.CallOption) (*rest.EditChannelPermissionsResponse, error) {
	out := new(rest.EditChannelPermissionsResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/EditChannelPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetChannelInvites(ctx context.Context, in *rest.GetChannelInvitesRequest, opts ...grpc.CallOption) (*rest.GetChannelInvitesResponse, error) {
	out := new(rest.GetChannelInvitesResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetChannelInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CreateChannelInvite(ctx context.Context, in *rest.CreateChannelInviteRequest, opts ...grpc.CallOption) (*rest.CreateChannelInviteResponse, error) {
	out := new(rest.CreateChannelInviteResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CreateChannelInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteChannelPermission(ctx context.Context, in *rest.DeleteChannelPermissionRequest, opts ...grpc.CallOption) (*rest.DeleteChannelPermissionResponse, error) {
	out := new(rest.DeleteChannelPermissionResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteChannelPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) FollowNewsChannel(ctx context.Context, in *rest.FollowNewsChannelRequest, opts ...grpc.CallOption) (*rest.FollowNewsChannelResponse, error) {
	out := new(rest.FollowNewsChannelResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/FollowNewsChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) TriggerTypingIndicator(ctx context.Context, in *rest.TriggerTypingIndicatorRequest, opts ...grpc.CallOption) (*rest.TriggerTypingIndicatorResponse, error) {
	out := new(rest.TriggerTypingIndicatorResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/TriggerTypingIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetPinnedMessages(ctx context.Context, in *rest.GetPinnedMessagesRequest, opts ...grpc.CallOption) (*rest.GetPinnedMessagesResponse, error) {
	out := new(rest.GetPinnedMessagesResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetPinnedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) AddPinnedChannelMessage(ctx context.Context, in *rest.AddPinnedChannelMessageRequest, opts ...grpc.CallOption) (*rest.AddPinnedChannelMessageResponse, error) {
	out := new(rest.AddPinnedChannelMessageResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/AddPinnedChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeletePinnedChannelMessage(ctx context.Context, in *rest.DeletePinnedChannelMessageRequest, opts ...grpc.CallOption) (*rest.DeletePinnedChannelMessageResponse, error) {
	out := new(rest.DeletePinnedChannelMessageResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeletePinnedChannelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ListGuildEmojis(ctx context.Context, in *rest.ListGuildEmojisRequest, opts ...grpc.CallOption) (*rest.ListGuildEmojisResponse, error) {
	out := new(rest.ListGuildEmojisResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ListGuildEmojis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetGuildEmoji(ctx context.Context, in *rest.GetGuildEmojiRequest, opts ...grpc.CallOption) (*rest.GetGuildEmojiResponse, error) {
	out := new(rest.GetGuildEmojiResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetGuildEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CreateGuildEmoji(ctx context.Context, in *rest.CreateGuildEmojiRequest, opts ...grpc.CallOption) (*rest.CreateGuildEmojiResponse, error) {
	out := new(rest.CreateGuildEmojiResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CreateGuildEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ModifyGuildEmoji(ctx context.Context, in *rest.ModifyGuildEmojiRequest, opts ...grpc.CallOption) (*rest.ModifyGuildEmojiResponse, error) {
	out := new(rest.ModifyGuildEmojiResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyGuildEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) DeleteGuildEmoji(ctx context.Context, in *rest.DeleteGuildEmojiRequest, opts ...grpc.CallOption) (*rest.DeleteGuildEmojiResponse, error) {
	out := new(rest.DeleteGuildEmojiResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/DeleteGuildEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetCurrentUser(ctx context.Context, in *rest.GetCurrentUserRequest, opts ...grpc.CallOption) (*rest.GetCurrentUserResponse, error) {
	out := new(rest.GetCurrentUserResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) GetUser(ctx context.Context, in *rest.GetUserRequest, opts ...grpc.CallOption) (*rest.GetUserResponse, error) {
	out := new(rest.GetUserResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) ModifyCurrentUser(ctx context.Context, in *rest.ModifyCurrentUserRequest, opts ...grpc.CallOption) (*rest.ModifyCurrentUserResponse, error) {
	out := new(rest.ModifyCurrentUserResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/ModifyCurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) LeaveGuild(ctx context.Context, in *rest.LeaveGuildRequest, opts ...grpc.CallOption) (*rest.LeaveGuildResponse, error) {
	out := new(rest.LeaveGuildResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/LeaveGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRestClient) CreateDm(ctx context.Context, in *rest.CreateDmRequest, opts ...grpc.CallOption) (*rest.CreateDmResponse, error) {
	out := new(rest.CreateDmResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.service.GatewayRest/CreateDm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayRestServer is the server API for GatewayRest service.
// All implementations must embed UnimplementedGatewayRestServer
// for forward compatibility
type GatewayRestServer interface {
	ModifyGuild(context.Context, *rest.ModifyGuildRequest) (*rest.ModifyGuildResponse, error)
	CreateGuildChannel(context.Context, *rest.CreateGuildChannelRequest) (*rest.CreateGuildChannelResponse, error)
	ModifyGuildChannelPositions(context.Context, *rest.ModifyGuildChannelPositionsRequest) (*rest.ModifyGuildChannelPositionsResponse, error)
	AddGuildMember(context.Context, *rest.AddGuildMemberRequest) (*rest.AddGuildMemberResponse, error)
	ModifyGuildMember(context.Context, *rest.ModifyGuildMemberRequest) (*rest.ModifyGuildMemberResponse, error)
	ModifyCurrentUserNick(context.Context, *rest.ModifyCurrentUserNickRequest) (*rest.ModifyCurrentUserNickResponse, error)
	AddGuildMemberRole(context.Context, *rest.AddGuildMemberRoleRequest) (*rest.AddGuildMemberRoleResponse, error)
	RemoveGuildMemberRole(context.Context, *rest.RemoveGuildMemberRoleRequest) (*rest.RemoveGuildMemberRoleResponse, error)
	RemoveGuildMember(context.Context, *rest.RemoveGuildMemberRequest) (*rest.RemoveGuildMemberResponse, error)
	GetGuildBans(context.Context, *rest.GetGuildBansRequest) (*rest.GetGuildBansResponse, error)
	GetGuildBan(context.Context, *rest.GetGuildBanRequest) (*rest.GetGuildBanResponse, error)
	CreateGuildBan(context.Context, *rest.CreateGuildBanRequest) (*rest.CreateGuildBanResponse, error)
	RemoveGuildBan(context.Context, *rest.RemoveGuildBanRequest) (*rest.RemoveGuildBanResponse, error)
	CreateGuildRole(context.Context, *rest.CreateGuildRoleRequest) (*rest.CreateGuildRoleResponse, error)
	ModifyGuildRolePositions(context.Context, *rest.ModifyGuildRolePositionsRequest) (*rest.ModifyGuildRolePositionsResponse, error)
	ModifyGuildRole(context.Context, *rest.ModifyGuildRoleRequest) (*rest.ModifyGuildRoleResponse, error)
	DeleteGuildRole(context.Context, *rest.DeleteGuildRoleRequest) (*rest.DeleteGuildRoleResponse, error)
	GetGuildPruneCount(context.Context, *rest.GetGuildPruneCountRequest) (*rest.GetGuildPruneCountResponse, error)
	BeginGuildPrune(context.Context, *rest.BeginGuildPruneRequest) (*rest.BeginGuildPruneResponse, error)
	GetGuildVoiceRegions(context.Context, *rest.GetGuildVoiceRegionsRequest) (*rest.GetGuildVoiceRegionsResponse, error)
	GetGuildInvites(context.Context, *rest.GetGuildInvitesRequest) (*rest.GetGuildInvitesResponse, error)
	ModifyChannel(context.Context, *rest.ModifyChannelRequest) (*rest.ModifyChannelResponse, error)
	DeleteChannel(context.Context, *rest.DeleteChannelRequest) (*rest.DeleteChannelResponse, error)
	CreateMessage(context.Context, *rest.CreateMessageRequest) (*rest.CreateMessageResponse, error)
	CrosspostMessage(context.Context, *rest.CrosspostMessageRequest) (*rest.CrosspostMessageResponse, error)
	CreateReaction(context.Context, *rest.CreateReactionRequest) (*rest.CreateReactionResponse, error)
	DeleteOwnReaction(context.Context, *rest.DeleteOwnReactionRequest) (*rest.DeleteOwnReactionResponse, error)
	DeleteUserReaction(context.Context, *rest.DeleteUserReactionRequest) (*rest.DeleteUserReactionResponse, error)
	DeleteAllReactions(context.Context, *rest.DeleteAllReactionsRequest) (*rest.DeleteAllReactionsResponse, error)
	DeleteAllReactionsForEmoji(context.Context, *rest.DeleteAllReactionsForEmojiRequest) (*rest.DeleteAllReactionsForEmojiResponse, error)
	EditMessage(context.Context, *rest.EditMessageRequest) (*rest.EditMessageResponse, error)
	DeleteMessage(context.Context, *rest.DeleteMessageRequest) (*rest.DeleteMessageResponse, error)
	BulkDeleteMessages(context.Context, *rest.BulkDeleteMessagesRequest) (*rest.BulkDeleteMessagesResponse, error)
	EditChannelPermissions(context.Context, *rest.EditChannelPermissionsRequest) (*rest.EditChannelPermissionsResponse, error)
	GetChannelInvites(context.Context, *rest.GetChannelInvitesRequest) (*rest.GetChannelInvitesResponse, error)
	CreateChannelInvite(context.Context, *rest.CreateChannelInviteRequest) (*rest.CreateChannelInviteResponse, error)
	DeleteChannelPermission(context.Context, *rest.DeleteChannelPermissionRequest) (*rest.DeleteChannelPermissionResponse, error)
	FollowNewsChannel(context.Context, *rest.FollowNewsChannelRequest) (*rest.FollowNewsChannelResponse, error)
	TriggerTypingIndicator(context.Context, *rest.TriggerTypingIndicatorRequest) (*rest.TriggerTypingIndicatorResponse, error)
	GetPinnedMessages(context.Context, *rest.GetPinnedMessagesRequest) (*rest.GetPinnedMessagesResponse, error)
	AddPinnedChannelMessage(context.Context, *rest.AddPinnedChannelMessageRequest) (*rest.AddPinnedChannelMessageResponse, error)
	DeletePinnedChannelMessage(context.Context, *rest.DeletePinnedChannelMessageRequest) (*rest.DeletePinnedChannelMessageResponse, error)
	ListGuildEmojis(context.Context, *rest.ListGuildEmojisRequest) (*rest.ListGuildEmojisResponse, error)
	GetGuildEmoji(context.Context, *rest.GetGuildEmojiRequest) (*rest.GetGuildEmojiResponse, error)
	CreateGuildEmoji(context.Context, *rest.CreateGuildEmojiRequest) (*rest.CreateGuildEmojiResponse, error)
	ModifyGuildEmoji(context.Context, *rest.ModifyGuildEmojiRequest) (*rest.ModifyGuildEmojiResponse, error)
	DeleteGuildEmoji(context.Context, *rest.DeleteGuildEmojiRequest) (*rest.DeleteGuildEmojiResponse, error)
	GetCurrentUser(context.Context, *rest.GetCurrentUserRequest) (*rest.GetCurrentUserResponse, error)
	GetUser(context.Context, *rest.GetUserRequest) (*rest.GetUserResponse, error)
	ModifyCurrentUser(context.Context, *rest.ModifyCurrentUserRequest) (*rest.ModifyCurrentUserResponse, error)
	LeaveGuild(context.Context, *rest.LeaveGuildRequest) (*rest.LeaveGuildResponse, error)
	CreateDm(context.Context, *rest.CreateDmRequest) (*rest.CreateDmResponse, error)
	mustEmbedUnimplementedGatewayRestServer()
}

// UnimplementedGatewayRestServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayRestServer struct {
}

func (UnimplementedGatewayRestServer) ModifyGuild(context.Context, *rest.ModifyGuildRequest) (*rest.ModifyGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGuild not implemented")
}
func (UnimplementedGatewayRestServer) CreateGuildChannel(context.Context, *rest.CreateGuildChannelRequest) (*rest.CreateGuildChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuildChannel not implemented")
}
func (UnimplementedGatewayRestServer) ModifyGuildChannelPositions(context.Context, *rest.ModifyGuildChannelPositionsRequest) (*rest.ModifyGuildChannelPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGuildChannelPositions not implemented")
}
func (UnimplementedGatewayRestServer) AddGuildMember(context.Context, *rest.AddGuildMemberRequest) (*rest.AddGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuildMember not implemented")
}
func (UnimplementedGatewayRestServer) ModifyGuildMember(context.Context, *rest.ModifyGuildMemberRequest) (*rest.ModifyGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGuildMember not implemented")
}
func (UnimplementedGatewayRestServer) ModifyCurrentUserNick(context.Context, *rest.ModifyCurrentUserNickRequest) (*rest.ModifyCurrentUserNickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCurrentUserNick not implemented")
}
func (UnimplementedGatewayRestServer) AddGuildMemberRole(context.Context, *rest.AddGuildMemberRoleRequest) (*rest.AddGuildMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuildMemberRole not implemented")
}
func (UnimplementedGatewayRestServer) RemoveGuildMemberRole(context.Context, *rest.RemoveGuildMemberRoleRequest) (*rest.RemoveGuildMemberRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGuildMemberRole not implemented")
}
func (UnimplementedGatewayRestServer) RemoveGuildMember(context.Context, *rest.RemoveGuildMemberRequest) (*rest.RemoveGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGuildMember not implemented")
}
func (UnimplementedGatewayRestServer) GetGuildBans(context.Context, *rest.GetGuildBansRequest) (*rest.GetGuildBansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildBans not implemented")
}
func (UnimplementedGatewayRestServer) GetGuildBan(context.Context, *rest.GetGuildBanRequest) (*rest.GetGuildBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildBan not implemented")
}
func (UnimplementedGatewayRestServer) CreateGuildBan(context.Context, *rest.CreateGuildBanRequest) (*rest.CreateGuildBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuildBan not implemented")
}
func (UnimplementedGatewayRestServer) RemoveGuildBan(context.Context, *rest.RemoveGuildBanRequest) (*rest.RemoveGuildBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGuildBan not implemented")
}
func (UnimplementedGatewayRestServer) CreateGuildRole(context.Context, *rest.CreateGuildRoleRequest) (*rest.CreateGuildRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuildRole not implemented")
}
func (UnimplementedGatewayRestServer) ModifyGuildRolePositions(context.Context, *rest.ModifyGuildRolePositionsRequest) (*rest.ModifyGuildRolePositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGuildRolePositions not implemented")
}
func (UnimplementedGatewayRestServer) ModifyGuildRole(context.Context, *rest.ModifyGuildRoleRequest) (*rest.ModifyGuildRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGuildRole not implemented")
}
func (UnimplementedGatewayRestServer) DeleteGuildRole(context.Context, *rest.DeleteGuildRoleRequest) (*rest.DeleteGuildRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuildRole not implemented")
}
func (UnimplementedGatewayRestServer) GetGuildPruneCount(context.Context, *rest.GetGuildPruneCountRequest) (*rest.GetGuildPruneCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildPruneCount not implemented")
}
func (UnimplementedGatewayRestServer) BeginGuildPrune(context.Context, *rest.BeginGuildPruneRequest) (*rest.BeginGuildPruneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginGuildPrune not implemented")
}
func (UnimplementedGatewayRestServer) GetGuildVoiceRegions(context.Context, *rest.GetGuildVoiceRegionsRequest) (*rest.GetGuildVoiceRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildVoiceRegions not implemented")
}
func (UnimplementedGatewayRestServer) GetGuildInvites(context.Context, *rest.GetGuildInvitesRequest) (*rest.GetGuildInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildInvites not implemented")
}
func (UnimplementedGatewayRestServer) ModifyChannel(context.Context, *rest.ModifyChannelRequest) (*rest.ModifyChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyChannel not implemented")
}
func (UnimplementedGatewayRestServer) DeleteChannel(context.Context, *rest.DeleteChannelRequest) (*rest.DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedGatewayRestServer) CreateMessage(context.Context, *rest.CreateMessageRequest) (*rest.CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedGatewayRestServer) CrosspostMessage(context.Context, *rest.CrosspostMessageRequest) (*rest.CrosspostMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrosspostMessage not implemented")
}
func (UnimplementedGatewayRestServer) CreateReaction(context.Context, *rest.CreateReactionRequest) (*rest.CreateReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReaction not implemented")
}
func (UnimplementedGatewayRestServer) DeleteOwnReaction(context.Context, *rest.DeleteOwnReactionRequest) (*rest.DeleteOwnReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOwnReaction not implemented")
}
func (UnimplementedGatewayRestServer) DeleteUserReaction(context.Context, *rest.DeleteUserReactionRequest) (*rest.DeleteUserReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserReaction not implemented")
}
func (UnimplementedGatewayRestServer) DeleteAllReactions(context.Context, *rest.DeleteAllReactionsRequest) (*rest.DeleteAllReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllReactions not implemented")
}
func (UnimplementedGatewayRestServer) DeleteAllReactionsForEmoji(context.Context, *rest.DeleteAllReactionsForEmojiRequest) (*rest.DeleteAllReactionsForEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllReactionsForEmoji not implemented")
}
func (UnimplementedGatewayRestServer) EditMessage(context.Context, *rest.EditMessageRequest) (*rest.EditMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedGatewayRestServer) DeleteMessage(context.Context, *rest.DeleteMessageRequest) (*rest.DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedGatewayRestServer) BulkDeleteMessages(context.Context, *rest.BulkDeleteMessagesRequest) (*rest.BulkDeleteMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkDeleteMessages not implemented")
}
func (UnimplementedGatewayRestServer) EditChannelPermissions(context.Context, *rest.EditChannelPermissionsRequest) (*rest.EditChannelPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannelPermissions not implemented")
}
func (UnimplementedGatewayRestServer) GetChannelInvites(context.Context, *rest.GetChannelInvitesRequest) (*rest.GetChannelInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInvites not implemented")
}
func (UnimplementedGatewayRestServer) CreateChannelInvite(context.Context, *rest.CreateChannelInviteRequest) (*rest.CreateChannelInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannelInvite not implemented")
}
func (UnimplementedGatewayRestServer) DeleteChannelPermission(context.Context, *rest.DeleteChannelPermissionRequest) (*rest.DeleteChannelPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannelPermission not implemented")
}
func (UnimplementedGatewayRestServer) FollowNewsChannel(context.Context, *rest.FollowNewsChannelRequest) (*rest.FollowNewsChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowNewsChannel not implemented")
}
func (UnimplementedGatewayRestServer) TriggerTypingIndicator(context.Context, *rest.TriggerTypingIndicatorRequest) (*rest.TriggerTypingIndicatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerTypingIndicator not implemented")
}
func (UnimplementedGatewayRestServer) GetPinnedMessages(context.Context, *rest.GetPinnedMessagesRequest) (*rest.GetPinnedMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPinnedMessages not implemented")
}
func (UnimplementedGatewayRestServer) AddPinnedChannelMessage(context.Context, *rest.AddPinnedChannelMessageRequest) (*rest.AddPinnedChannelMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPinnedChannelMessage not implemented")
}
func (UnimplementedGatewayRestServer) DeletePinnedChannelMessage(context.Context, *rest.DeletePinnedChannelMessageRequest) (*rest.DeletePinnedChannelMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePinnedChannelMessage not implemented")
}
func (UnimplementedGatewayRestServer) ListGuildEmojis(context.Context, *rest.ListGuildEmojisRequest) (*rest.ListGuildEmojisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuildEmojis not implemented")
}
func (UnimplementedGatewayRestServer) GetGuildEmoji(context.Context, *rest.GetGuildEmojiRequest) (*rest.GetGuildEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildEmoji not implemented")
}
func (UnimplementedGatewayRestServer) CreateGuildEmoji(context.Context, *rest.CreateGuildEmojiRequest) (*rest.CreateGuildEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuildEmoji not implemented")
}
func (UnimplementedGatewayRestServer) ModifyGuildEmoji(context.Context, *rest.ModifyGuildEmojiRequest) (*rest.ModifyGuildEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyGuildEmoji not implemented")
}
func (UnimplementedGatewayRestServer) DeleteGuildEmoji(context.Context, *rest.DeleteGuildEmojiRequest) (*rest.DeleteGuildEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuildEmoji not implemented")
}
func (UnimplementedGatewayRestServer) GetCurrentUser(context.Context, *rest.GetCurrentUserRequest) (*rest.GetCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedGatewayRestServer) GetUser(context.Context, *rest.GetUserRequest) (*rest.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGatewayRestServer) ModifyCurrentUser(context.Context, *rest.ModifyCurrentUserRequest) (*rest.ModifyCurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyCurrentUser not implemented")
}
func (UnimplementedGatewayRestServer) LeaveGuild(context.Context, *rest.LeaveGuildRequest) (*rest.LeaveGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGuild not implemented")
}
func (UnimplementedGatewayRestServer) CreateDm(context.Context, *rest.CreateDmRequest) (*rest.CreateDmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDm not implemented")
}
func (UnimplementedGatewayRestServer) mustEmbedUnimplementedGatewayRestServer() {}

// UnsafeGatewayRestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayRestServer will
// result in compilation errors.
type UnsafeGatewayRestServer interface {
	mustEmbedUnimplementedGatewayRestServer()
}

func RegisterGatewayRestServer(s grpc.ServiceRegistrar, srv GatewayRestServer) {
	s.RegisterService(&_GatewayRest_serviceDesc, srv)
}

func _GatewayRest_ModifyGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyGuild(ctx, req.(*rest.ModifyGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CreateGuildChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CreateGuildChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CreateGuildChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CreateGuildChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CreateGuildChannel(ctx, req.(*rest.CreateGuildChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ModifyGuildChannelPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyGuildChannelPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyGuildChannelPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyGuildChannelPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyGuildChannelPositions(ctx, req.(*rest.ModifyGuildChannelPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_AddGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.AddGuildMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).AddGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/AddGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).AddGuildMember(ctx, req.(*rest.AddGuildMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ModifyGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyGuildMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyGuildMember(ctx, req.(*rest.ModifyGuildMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ModifyCurrentUserNick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyCurrentUserNickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyCurrentUserNick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyCurrentUserNick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyCurrentUserNick(ctx, req.(*rest.ModifyCurrentUserNickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_AddGuildMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.AddGuildMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).AddGuildMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/AddGuildMemberRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).AddGuildMemberRole(ctx, req.(*rest.AddGuildMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_RemoveGuildMemberRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.RemoveGuildMemberRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).RemoveGuildMemberRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/RemoveGuildMemberRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).RemoveGuildMemberRole(ctx, req.(*rest.RemoveGuildMemberRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_RemoveGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.RemoveGuildMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).RemoveGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/RemoveGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).RemoveGuildMember(ctx, req.(*rest.RemoveGuildMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetGuildBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetGuildBansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetGuildBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetGuildBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetGuildBans(ctx, req.(*rest.GetGuildBansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetGuildBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetGuildBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetGuildBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetGuildBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetGuildBan(ctx, req.(*rest.GetGuildBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CreateGuildBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CreateGuildBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CreateGuildBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CreateGuildBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CreateGuildBan(ctx, req.(*rest.CreateGuildBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_RemoveGuildBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.RemoveGuildBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).RemoveGuildBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/RemoveGuildBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).RemoveGuildBan(ctx, req.(*rest.RemoveGuildBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CreateGuildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CreateGuildRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CreateGuildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CreateGuildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CreateGuildRole(ctx, req.(*rest.CreateGuildRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ModifyGuildRolePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyGuildRolePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyGuildRolePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyGuildRolePositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyGuildRolePositions(ctx, req.(*rest.ModifyGuildRolePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ModifyGuildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyGuildRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyGuildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyGuildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyGuildRole(ctx, req.(*rest.ModifyGuildRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteGuildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteGuildRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteGuildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteGuildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteGuildRole(ctx, req.(*rest.DeleteGuildRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetGuildPruneCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetGuildPruneCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetGuildPruneCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetGuildPruneCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetGuildPruneCount(ctx, req.(*rest.GetGuildPruneCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_BeginGuildPrune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.BeginGuildPruneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).BeginGuildPrune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/BeginGuildPrune",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).BeginGuildPrune(ctx, req.(*rest.BeginGuildPruneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetGuildVoiceRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetGuildVoiceRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetGuildVoiceRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetGuildVoiceRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetGuildVoiceRegions(ctx, req.(*rest.GetGuildVoiceRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetGuildInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetGuildInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetGuildInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetGuildInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetGuildInvites(ctx, req.(*rest.GetGuildInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ModifyChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyChannel(ctx, req.(*rest.ModifyChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteChannel(ctx, req.(*rest.DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CreateMessage(ctx, req.(*rest.CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CrosspostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CrosspostMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CrosspostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CrosspostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CrosspostMessage(ctx, req.(*rest.CrosspostMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CreateReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CreateReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CreateReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CreateReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CreateReaction(ctx, req.(*rest.CreateReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteOwnReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteOwnReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteOwnReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteOwnReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteOwnReaction(ctx, req.(*rest.DeleteOwnReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteUserReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteUserReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteUserReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteUserReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteUserReaction(ctx, req.(*rest.DeleteUserReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteAllReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteAllReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteAllReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteAllReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteAllReactions(ctx, req.(*rest.DeleteAllReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteAllReactionsForEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteAllReactionsForEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteAllReactionsForEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteAllReactionsForEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteAllReactionsForEmoji(ctx, req.(*rest.DeleteAllReactionsForEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/EditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).EditMessage(ctx, req.(*rest.EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteMessage(ctx, req.(*rest.DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_BulkDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.BulkDeleteMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).BulkDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/BulkDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).BulkDeleteMessages(ctx, req.(*rest.BulkDeleteMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_EditChannelPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.EditChannelPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).EditChannelPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/EditChannelPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).EditChannelPermissions(ctx, req.(*rest.EditChannelPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetChannelInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetChannelInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetChannelInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetChannelInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetChannelInvites(ctx, req.(*rest.GetChannelInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CreateChannelInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CreateChannelInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CreateChannelInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CreateChannelInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CreateChannelInvite(ctx, req.(*rest.CreateChannelInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteChannelPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteChannelPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteChannelPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteChannelPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteChannelPermission(ctx, req.(*rest.DeleteChannelPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_FollowNewsChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.FollowNewsChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).FollowNewsChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/FollowNewsChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).FollowNewsChannel(ctx, req.(*rest.FollowNewsChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_TriggerTypingIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.TriggerTypingIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).TriggerTypingIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/TriggerTypingIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).TriggerTypingIndicator(ctx, req.(*rest.TriggerTypingIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetPinnedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetPinnedMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetPinnedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetPinnedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetPinnedMessages(ctx, req.(*rest.GetPinnedMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_AddPinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.AddPinnedChannelMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).AddPinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/AddPinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).AddPinnedChannelMessage(ctx, req.(*rest.AddPinnedChannelMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeletePinnedChannelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeletePinnedChannelMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeletePinnedChannelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeletePinnedChannelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeletePinnedChannelMessage(ctx, req.(*rest.DeletePinnedChannelMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ListGuildEmojis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ListGuildEmojisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ListGuildEmojis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ListGuildEmojis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ListGuildEmojis(ctx, req.(*rest.ListGuildEmojisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetGuildEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetGuildEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetGuildEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetGuildEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetGuildEmoji(ctx, req.(*rest.GetGuildEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CreateGuildEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CreateGuildEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CreateGuildEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CreateGuildEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CreateGuildEmoji(ctx, req.(*rest.CreateGuildEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ModifyGuildEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyGuildEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyGuildEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyGuildEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyGuildEmoji(ctx, req.(*rest.ModifyGuildEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_DeleteGuildEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.DeleteGuildEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).DeleteGuildEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/DeleteGuildEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).DeleteGuildEmoji(ctx, req.(*rest.DeleteGuildEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetCurrentUser(ctx, req.(*rest.GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).GetUser(ctx, req.(*rest.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_ModifyCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.ModifyCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).ModifyCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/ModifyCurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).ModifyCurrentUser(ctx, req.(*rest.ModifyCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_LeaveGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.LeaveGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).LeaveGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/LeaveGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).LeaveGuild(ctx, req.(*rest.LeaveGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRest_CreateDm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rest.CreateDmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRestServer).CreateDm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.service.GatewayRest/CreateDm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRestServer).CreateDm(ctx, req.(*rest.CreateDmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayRest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pylon.gateway.v1.service.GatewayRest",
	HandlerType: (*GatewayRestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModifyGuild",
			Handler:    _GatewayRest_ModifyGuild_Handler,
		},
		{
			MethodName: "CreateGuildChannel",
			Handler:    _GatewayRest_CreateGuildChannel_Handler,
		},
		{
			MethodName: "ModifyGuildChannelPositions",
			Handler:    _GatewayRest_ModifyGuildChannelPositions_Handler,
		},
		{
			MethodName: "AddGuildMember",
			Handler:    _GatewayRest_AddGuildMember_Handler,
		},
		{
			MethodName: "ModifyGuildMember",
			Handler:    _GatewayRest_ModifyGuildMember_Handler,
		},
		{
			MethodName: "ModifyCurrentUserNick",
			Handler:    _GatewayRest_ModifyCurrentUserNick_Handler,
		},
		{
			MethodName: "AddGuildMemberRole",
			Handler:    _GatewayRest_AddGuildMemberRole_Handler,
		},
		{
			MethodName: "RemoveGuildMemberRole",
			Handler:    _GatewayRest_RemoveGuildMemberRole_Handler,
		},
		{
			MethodName: "RemoveGuildMember",
			Handler:    _GatewayRest_RemoveGuildMember_Handler,
		},
		{
			MethodName: "GetGuildBans",
			Handler:    _GatewayRest_GetGuildBans_Handler,
		},
		{
			MethodName: "GetGuildBan",
			Handler:    _GatewayRest_GetGuildBan_Handler,
		},
		{
			MethodName: "CreateGuildBan",
			Handler:    _GatewayRest_CreateGuildBan_Handler,
		},
		{
			MethodName: "RemoveGuildBan",
			Handler:    _GatewayRest_RemoveGuildBan_Handler,
		},
		{
			MethodName: "CreateGuildRole",
			Handler:    _GatewayRest_CreateGuildRole_Handler,
		},
		{
			MethodName: "ModifyGuildRolePositions",
			Handler:    _GatewayRest_ModifyGuildRolePositions_Handler,
		},
		{
			MethodName: "ModifyGuildRole",
			Handler:    _GatewayRest_ModifyGuildRole_Handler,
		},
		{
			MethodName: "DeleteGuildRole",
			Handler:    _GatewayRest_DeleteGuildRole_Handler,
		},
		{
			MethodName: "GetGuildPruneCount",
			Handler:    _GatewayRest_GetGuildPruneCount_Handler,
		},
		{
			MethodName: "BeginGuildPrune",
			Handler:    _GatewayRest_BeginGuildPrune_Handler,
		},
		{
			MethodName: "GetGuildVoiceRegions",
			Handler:    _GatewayRest_GetGuildVoiceRegions_Handler,
		},
		{
			MethodName: "GetGuildInvites",
			Handler:    _GatewayRest_GetGuildInvites_Handler,
		},
		{
			MethodName: "ModifyChannel",
			Handler:    _GatewayRest_ModifyChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _GatewayRest_DeleteChannel_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _GatewayRest_CreateMessage_Handler,
		},
		{
			MethodName: "CrosspostMessage",
			Handler:    _GatewayRest_CrosspostMessage_Handler,
		},
		{
			MethodName: "CreateReaction",
			Handler:    _GatewayRest_CreateReaction_Handler,
		},
		{
			MethodName: "DeleteOwnReaction",
			Handler:    _GatewayRest_DeleteOwnReaction_Handler,
		},
		{
			MethodName: "DeleteUserReaction",
			Handler:    _GatewayRest_DeleteUserReaction_Handler,
		},
		{
			MethodName: "DeleteAllReactions",
			Handler:    _GatewayRest_DeleteAllReactions_Handler,
		},
		{
			MethodName: "DeleteAllReactionsForEmoji",
			Handler:    _GatewayRest_DeleteAllReactionsForEmoji_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _GatewayRest_EditMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _GatewayRest_DeleteMessage_Handler,
		},
		{
			MethodName: "BulkDeleteMessages",
			Handler:    _GatewayRest_BulkDeleteMessages_Handler,
		},
		{
			MethodName: "EditChannelPermissions",
			Handler:    _GatewayRest_EditChannelPermissions_Handler,
		},
		{
			MethodName: "GetChannelInvites",
			Handler:    _GatewayRest_GetChannelInvites_Handler,
		},
		{
			MethodName: "CreateChannelInvite",
			Handler:    _GatewayRest_CreateChannelInvite_Handler,
		},
		{
			MethodName: "DeleteChannelPermission",
			Handler:    _GatewayRest_DeleteChannelPermission_Handler,
		},
		{
			MethodName: "FollowNewsChannel",
			Handler:    _GatewayRest_FollowNewsChannel_Handler,
		},
		{
			MethodName: "TriggerTypingIndicator",
			Handler:    _GatewayRest_TriggerTypingIndicator_Handler,
		},
		{
			MethodName: "GetPinnedMessages",
			Handler:    _GatewayRest_GetPinnedMessages_Handler,
		},
		{
			MethodName: "AddPinnedChannelMessage",
			Handler:    _GatewayRest_AddPinnedChannelMessage_Handler,
		},
		{
			MethodName: "DeletePinnedChannelMessage",
			Handler:    _GatewayRest_DeletePinnedChannelMessage_Handler,
		},
		{
			MethodName: "ListGuildEmojis",
			Handler:    _GatewayRest_ListGuildEmojis_Handler,
		},
		{
			MethodName: "GetGuildEmoji",
			Handler:    _GatewayRest_GetGuildEmoji_Handler,
		},
		{
			MethodName: "CreateGuildEmoji",
			Handler:    _GatewayRest_CreateGuildEmoji_Handler,
		},
		{
			MethodName: "ModifyGuildEmoji",
			Handler:    _GatewayRest_ModifyGuildEmoji_Handler,
		},
		{
			MethodName: "DeleteGuildEmoji",
			Handler:    _GatewayRest_DeleteGuildEmoji_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _GatewayRest_GetCurrentUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GatewayRest_GetUser_Handler,
		},
		{
			MethodName: "ModifyCurrentUser",
			Handler:    _GatewayRest_ModifyCurrentUser_Handler,
		},
		{
			MethodName: "LeaveGuild",
			Handler:    _GatewayRest_LeaveGuild_Handler,
		},
		{
			MethodName: "CreateDm",
			Handler:    _GatewayRest_CreateDm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/rest_service.proto",
}
