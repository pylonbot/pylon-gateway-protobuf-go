// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dispatchservice

import (
	context "context"
	event "github.com/pylonbot/pylon-gateway-protobuf-go/discord/v1/event"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GatewayDispatchClient is the client API for GatewayDispatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayDispatchClient interface {
	GuildCreate(ctx context.Context, in *event.GuildCreateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildUpdate(ctx context.Context, in *event.GuildUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildDelete(ctx context.Context, in *event.GuildDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error)
	PresenceUpdate(ctx context.Context, in *event.PresenceUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildMemberAdd(ctx context.Context, in *event.GuildMemberAddEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildMemberUpdate(ctx context.Context, in *event.GuildMemberUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildMemberRemove(ctx context.Context, in *event.GuildMemberRemoveEvent, opts ...grpc.CallOption) (*EventResponse, error)
	ChannelCreate(ctx context.Context, in *event.ChannelCreateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	ChannelUpdate(ctx context.Context, in *event.ChannelUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	ChannelDelete(ctx context.Context, in *event.ChannelDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error)
	ChannelPinsUpdate(ctx context.Context, in *event.ChannelPinsUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildRoleCreate(ctx context.Context, in *event.GuildRoleCreateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildRoleUpdate(ctx context.Context, in *event.GuildRoleUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildRoleDelete(ctx context.Context, in *event.GuildRoleDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error)
	MessageCreate(ctx context.Context, in *event.MessageCreateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	MessageUpdate(ctx context.Context, in *event.MessageUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	MessageDelete(ctx context.Context, in *event.MessageDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error)
	MessageDeleteBulk(ctx context.Context, in *event.MessageDeleteBulkEvent, opts ...grpc.CallOption) (*EventResponse, error)
	MessageReactionAdd(ctx context.Context, in *event.MessageReactionAddEvent, opts ...grpc.CallOption) (*EventResponse, error)
	MessageReactionRemove(ctx context.Context, in *event.MessageReactionRemoveEvent, opts ...grpc.CallOption) (*EventResponse, error)
	MessageReactionRemoveAll(ctx context.Context, in *event.MessageReactionRemoveAllEvent, opts ...grpc.CallOption) (*EventResponse, error)
	MessageReactionRemoveEmoji(ctx context.Context, in *event.MessageReactionRemoveEmojiEvent, opts ...grpc.CallOption) (*EventResponse, error)
	TypingStart(ctx context.Context, in *event.TypingStartEvent, opts ...grpc.CallOption) (*EventResponse, error)
	VoiceStateUpdate(ctx context.Context, in *event.VoiceStateUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	VoiceServerUpdate(ctx context.Context, in *event.VoiceServerUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	InviteCreate(ctx context.Context, in *event.InviteCreateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	InviteDelete(ctx context.Context, in *event.InviteDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildBanAdd(ctx context.Context, in *event.GuildBanAddEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildBanRemove(ctx context.Context, in *event.GuildBanRemoveEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildEmojisUpdate(ctx context.Context, in *event.GuildEmojisUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	GuildIntegrationsUpdate(ctx context.Context, in *event.GuildIntegrationsUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	WebhooksUpdate(ctx context.Context, in *event.WebhooksUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	IntegrationCreate(ctx context.Context, in *event.IntegrationCreateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	IntegrationUpdate(ctx context.Context, in *event.IntegrationUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error)
	IntegrationDelete(ctx context.Context, in *event.IntegrationDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error)
	InteractionCreate(ctx context.Context, in *event.InteractionCreateEvent, opts ...grpc.CallOption) (*InteractionEventResponse, error)
}

type gatewayDispatchClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayDispatchClient(cc grpc.ClientConnInterface) GatewayDispatchClient {
	return &gatewayDispatchClient{cc}
}

func (c *gatewayDispatchClient) GuildCreate(ctx context.Context, in *event.GuildCreateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildUpdate(ctx context.Context, in *event.GuildUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildDelete(ctx context.Context, in *event.GuildDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) PresenceUpdate(ctx context.Context, in *event.PresenceUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/PresenceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildMemberAdd(ctx context.Context, in *event.GuildMemberAddEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildMemberAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildMemberUpdate(ctx context.Context, in *event.GuildMemberUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildMemberUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildMemberRemove(ctx context.Context, in *event.GuildMemberRemoveEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildMemberRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) ChannelCreate(ctx context.Context, in *event.ChannelCreateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/ChannelCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) ChannelUpdate(ctx context.Context, in *event.ChannelUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/ChannelUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) ChannelDelete(ctx context.Context, in *event.ChannelDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/ChannelDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) ChannelPinsUpdate(ctx context.Context, in *event.ChannelPinsUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/ChannelPinsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildRoleCreate(ctx context.Context, in *event.GuildRoleCreateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildRoleCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildRoleUpdate(ctx context.Context, in *event.GuildRoleUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildRoleUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildRoleDelete(ctx context.Context, in *event.GuildRoleDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildRoleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) MessageCreate(ctx context.Context, in *event.MessageCreateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) MessageUpdate(ctx context.Context, in *event.MessageUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) MessageDelete(ctx context.Context, in *event.MessageDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) MessageDeleteBulk(ctx context.Context, in *event.MessageDeleteBulkEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageDeleteBulk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) MessageReactionAdd(ctx context.Context, in *event.MessageReactionAddEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageReactionAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) MessageReactionRemove(ctx context.Context, in *event.MessageReactionRemoveEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageReactionRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) MessageReactionRemoveAll(ctx context.Context, in *event.MessageReactionRemoveAllEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageReactionRemoveAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) MessageReactionRemoveEmoji(ctx context.Context, in *event.MessageReactionRemoveEmojiEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageReactionRemoveEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) TypingStart(ctx context.Context, in *event.TypingStartEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/TypingStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) VoiceStateUpdate(ctx context.Context, in *event.VoiceStateUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/VoiceStateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) VoiceServerUpdate(ctx context.Context, in *event.VoiceServerUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/VoiceServerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) InviteCreate(ctx context.Context, in *event.InviteCreateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/InviteCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) InviteDelete(ctx context.Context, in *event.InviteDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/InviteDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildBanAdd(ctx context.Context, in *event.GuildBanAddEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildBanAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildBanRemove(ctx context.Context, in *event.GuildBanRemoveEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildBanRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildEmojisUpdate(ctx context.Context, in *event.GuildEmojisUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildEmojisUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) GuildIntegrationsUpdate(ctx context.Context, in *event.GuildIntegrationsUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildIntegrationsUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) WebhooksUpdate(ctx context.Context, in *event.WebhooksUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/WebhooksUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) IntegrationCreate(ctx context.Context, in *event.IntegrationCreateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/IntegrationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) IntegrationUpdate(ctx context.Context, in *event.IntegrationUpdateEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/IntegrationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) IntegrationDelete(ctx context.Context, in *event.IntegrationDeleteEvent, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/IntegrationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayDispatchClient) InteractionCreate(ctx context.Context, in *event.InteractionCreateEvent, opts ...grpc.CallOption) (*InteractionEventResponse, error) {
	out := new(InteractionEventResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.dispatchservice.GatewayDispatch/InteractionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayDispatchServer is the server API for GatewayDispatch service.
// All implementations must embed UnimplementedGatewayDispatchServer
// for forward compatibility
type GatewayDispatchServer interface {
	GuildCreate(context.Context, *event.GuildCreateEvent) (*EventResponse, error)
	GuildUpdate(context.Context, *event.GuildUpdateEvent) (*EventResponse, error)
	GuildDelete(context.Context, *event.GuildDeleteEvent) (*EventResponse, error)
	PresenceUpdate(context.Context, *event.PresenceUpdateEvent) (*EventResponse, error)
	GuildMemberAdd(context.Context, *event.GuildMemberAddEvent) (*EventResponse, error)
	GuildMemberUpdate(context.Context, *event.GuildMemberUpdateEvent) (*EventResponse, error)
	GuildMemberRemove(context.Context, *event.GuildMemberRemoveEvent) (*EventResponse, error)
	ChannelCreate(context.Context, *event.ChannelCreateEvent) (*EventResponse, error)
	ChannelUpdate(context.Context, *event.ChannelUpdateEvent) (*EventResponse, error)
	ChannelDelete(context.Context, *event.ChannelDeleteEvent) (*EventResponse, error)
	ChannelPinsUpdate(context.Context, *event.ChannelPinsUpdateEvent) (*EventResponse, error)
	GuildRoleCreate(context.Context, *event.GuildRoleCreateEvent) (*EventResponse, error)
	GuildRoleUpdate(context.Context, *event.GuildRoleUpdateEvent) (*EventResponse, error)
	GuildRoleDelete(context.Context, *event.GuildRoleDeleteEvent) (*EventResponse, error)
	MessageCreate(context.Context, *event.MessageCreateEvent) (*EventResponse, error)
	MessageUpdate(context.Context, *event.MessageUpdateEvent) (*EventResponse, error)
	MessageDelete(context.Context, *event.MessageDeleteEvent) (*EventResponse, error)
	MessageDeleteBulk(context.Context, *event.MessageDeleteBulkEvent) (*EventResponse, error)
	MessageReactionAdd(context.Context, *event.MessageReactionAddEvent) (*EventResponse, error)
	MessageReactionRemove(context.Context, *event.MessageReactionRemoveEvent) (*EventResponse, error)
	MessageReactionRemoveAll(context.Context, *event.MessageReactionRemoveAllEvent) (*EventResponse, error)
	MessageReactionRemoveEmoji(context.Context, *event.MessageReactionRemoveEmojiEvent) (*EventResponse, error)
	TypingStart(context.Context, *event.TypingStartEvent) (*EventResponse, error)
	VoiceStateUpdate(context.Context, *event.VoiceStateUpdateEvent) (*EventResponse, error)
	VoiceServerUpdate(context.Context, *event.VoiceServerUpdateEvent) (*EventResponse, error)
	InviteCreate(context.Context, *event.InviteCreateEvent) (*EventResponse, error)
	InviteDelete(context.Context, *event.InviteDeleteEvent) (*EventResponse, error)
	GuildBanAdd(context.Context, *event.GuildBanAddEvent) (*EventResponse, error)
	GuildBanRemove(context.Context, *event.GuildBanRemoveEvent) (*EventResponse, error)
	GuildEmojisUpdate(context.Context, *event.GuildEmojisUpdateEvent) (*EventResponse, error)
	GuildIntegrationsUpdate(context.Context, *event.GuildIntegrationsUpdateEvent) (*EventResponse, error)
	WebhooksUpdate(context.Context, *event.WebhooksUpdateEvent) (*EventResponse, error)
	IntegrationCreate(context.Context, *event.IntegrationCreateEvent) (*EventResponse, error)
	IntegrationUpdate(context.Context, *event.IntegrationUpdateEvent) (*EventResponse, error)
	IntegrationDelete(context.Context, *event.IntegrationDeleteEvent) (*EventResponse, error)
	InteractionCreate(context.Context, *event.InteractionCreateEvent) (*InteractionEventResponse, error)
	mustEmbedUnimplementedGatewayDispatchServer()
}

// UnimplementedGatewayDispatchServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayDispatchServer struct {
}

func (UnimplementedGatewayDispatchServer) GuildCreate(context.Context, *event.GuildCreateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildCreate not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildUpdate(context.Context, *event.GuildUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildDelete(context.Context, *event.GuildDeleteEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildDelete not implemented")
}
func (UnimplementedGatewayDispatchServer) PresenceUpdate(context.Context, *event.PresenceUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresenceUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildMemberAdd(context.Context, *event.GuildMemberAddEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberAdd not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildMemberUpdate(context.Context, *event.GuildMemberUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildMemberRemove(context.Context, *event.GuildMemberRemoveEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildMemberRemove not implemented")
}
func (UnimplementedGatewayDispatchServer) ChannelCreate(context.Context, *event.ChannelCreateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelCreate not implemented")
}
func (UnimplementedGatewayDispatchServer) ChannelUpdate(context.Context, *event.ChannelUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) ChannelDelete(context.Context, *event.ChannelDeleteEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelDelete not implemented")
}
func (UnimplementedGatewayDispatchServer) ChannelPinsUpdate(context.Context, *event.ChannelPinsUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelPinsUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildRoleCreate(context.Context, *event.GuildRoleCreateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildRoleCreate not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildRoleUpdate(context.Context, *event.GuildRoleUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildRoleUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildRoleDelete(context.Context, *event.GuildRoleDeleteEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildRoleDelete not implemented")
}
func (UnimplementedGatewayDispatchServer) MessageCreate(context.Context, *event.MessageCreateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageCreate not implemented")
}
func (UnimplementedGatewayDispatchServer) MessageUpdate(context.Context, *event.MessageUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) MessageDelete(context.Context, *event.MessageDeleteEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageDelete not implemented")
}
func (UnimplementedGatewayDispatchServer) MessageDeleteBulk(context.Context, *event.MessageDeleteBulkEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageDeleteBulk not implemented")
}
func (UnimplementedGatewayDispatchServer) MessageReactionAdd(context.Context, *event.MessageReactionAddEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactionAdd not implemented")
}
func (UnimplementedGatewayDispatchServer) MessageReactionRemove(context.Context, *event.MessageReactionRemoveEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactionRemove not implemented")
}
func (UnimplementedGatewayDispatchServer) MessageReactionRemoveAll(context.Context, *event.MessageReactionRemoveAllEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactionRemoveAll not implemented")
}
func (UnimplementedGatewayDispatchServer) MessageReactionRemoveEmoji(context.Context, *event.MessageReactionRemoveEmojiEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReactionRemoveEmoji not implemented")
}
func (UnimplementedGatewayDispatchServer) TypingStart(context.Context, *event.TypingStartEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypingStart not implemented")
}
func (UnimplementedGatewayDispatchServer) VoiceStateUpdate(context.Context, *event.VoiceStateUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceStateUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) VoiceServerUpdate(context.Context, *event.VoiceServerUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoiceServerUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) InviteCreate(context.Context, *event.InviteCreateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteCreate not implemented")
}
func (UnimplementedGatewayDispatchServer) InviteDelete(context.Context, *event.InviteDeleteEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteDelete not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildBanAdd(context.Context, *event.GuildBanAddEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildBanAdd not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildBanRemove(context.Context, *event.GuildBanRemoveEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildBanRemove not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildEmojisUpdate(context.Context, *event.GuildEmojisUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildEmojisUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) GuildIntegrationsUpdate(context.Context, *event.GuildIntegrationsUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuildIntegrationsUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) WebhooksUpdate(context.Context, *event.WebhooksUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhooksUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) IntegrationCreate(context.Context, *event.IntegrationCreateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrationCreate not implemented")
}
func (UnimplementedGatewayDispatchServer) IntegrationUpdate(context.Context, *event.IntegrationUpdateEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrationUpdate not implemented")
}
func (UnimplementedGatewayDispatchServer) IntegrationDelete(context.Context, *event.IntegrationDeleteEvent) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrationDelete not implemented")
}
func (UnimplementedGatewayDispatchServer) InteractionCreate(context.Context, *event.InteractionCreateEvent) (*InteractionEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InteractionCreate not implemented")
}
func (UnimplementedGatewayDispatchServer) mustEmbedUnimplementedGatewayDispatchServer() {}

// UnsafeGatewayDispatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayDispatchServer will
// result in compilation errors.
type UnsafeGatewayDispatchServer interface {
	mustEmbedUnimplementedGatewayDispatchServer()
}

func RegisterGatewayDispatchServer(s grpc.ServiceRegistrar, srv GatewayDispatchServer) {
	s.RegisterService(&_GatewayDispatch_serviceDesc, srv)
}

func _GatewayDispatch_GuildCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildCreate(ctx, req.(*event.GuildCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildUpdate(ctx, req.(*event.GuildUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildDeleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildDelete(ctx, req.(*event.GuildDeleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_PresenceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.PresenceUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).PresenceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/PresenceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).PresenceUpdate(ctx, req.(*event.PresenceUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildMemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildMemberAddEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildMemberAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildMemberAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildMemberAdd(ctx, req.(*event.GuildMemberAddEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildMemberUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildMemberUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildMemberUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildMemberUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildMemberUpdate(ctx, req.(*event.GuildMemberUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildMemberRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildMemberRemoveEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildMemberRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildMemberRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildMemberRemove(ctx, req.(*event.GuildMemberRemoveEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_ChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.ChannelCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).ChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/ChannelCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).ChannelCreate(ctx, req.(*event.ChannelCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_ChannelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.ChannelUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).ChannelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/ChannelUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).ChannelUpdate(ctx, req.(*event.ChannelUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_ChannelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.ChannelDeleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).ChannelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/ChannelDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).ChannelDelete(ctx, req.(*event.ChannelDeleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_ChannelPinsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.ChannelPinsUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).ChannelPinsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/ChannelPinsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).ChannelPinsUpdate(ctx, req.(*event.ChannelPinsUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildRoleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildRoleCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildRoleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildRoleCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildRoleCreate(ctx, req.(*event.GuildRoleCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildRoleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildRoleUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildRoleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildRoleUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildRoleUpdate(ctx, req.(*event.GuildRoleUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildRoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildRoleDeleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildRoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildRoleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildRoleDelete(ctx, req.(*event.GuildRoleDeleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_MessageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.MessageCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).MessageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).MessageCreate(ctx, req.(*event.MessageCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_MessageUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.MessageUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).MessageUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).MessageUpdate(ctx, req.(*event.MessageUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_MessageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.MessageDeleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).MessageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).MessageDelete(ctx, req.(*event.MessageDeleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_MessageDeleteBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.MessageDeleteBulkEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).MessageDeleteBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageDeleteBulk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).MessageDeleteBulk(ctx, req.(*event.MessageDeleteBulkEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_MessageReactionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.MessageReactionAddEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).MessageReactionAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageReactionAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).MessageReactionAdd(ctx, req.(*event.MessageReactionAddEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_MessageReactionRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.MessageReactionRemoveEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).MessageReactionRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageReactionRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).MessageReactionRemove(ctx, req.(*event.MessageReactionRemoveEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_MessageReactionRemoveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.MessageReactionRemoveAllEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).MessageReactionRemoveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageReactionRemoveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).MessageReactionRemoveAll(ctx, req.(*event.MessageReactionRemoveAllEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_MessageReactionRemoveEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.MessageReactionRemoveEmojiEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).MessageReactionRemoveEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/MessageReactionRemoveEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).MessageReactionRemoveEmoji(ctx, req.(*event.MessageReactionRemoveEmojiEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_TypingStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.TypingStartEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).TypingStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/TypingStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).TypingStart(ctx, req.(*event.TypingStartEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_VoiceStateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.VoiceStateUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).VoiceStateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/VoiceStateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).VoiceStateUpdate(ctx, req.(*event.VoiceStateUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_VoiceServerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.VoiceServerUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).VoiceServerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/VoiceServerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).VoiceServerUpdate(ctx, req.(*event.VoiceServerUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_InviteCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.InviteCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).InviteCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/InviteCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).InviteCreate(ctx, req.(*event.InviteCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_InviteDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.InviteDeleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).InviteDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/InviteDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).InviteDelete(ctx, req.(*event.InviteDeleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildBanAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildBanAddEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildBanAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildBanAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildBanAdd(ctx, req.(*event.GuildBanAddEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildBanRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildBanRemoveEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildBanRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildBanRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildBanRemove(ctx, req.(*event.GuildBanRemoveEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildEmojisUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildEmojisUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildEmojisUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildEmojisUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildEmojisUpdate(ctx, req.(*event.GuildEmojisUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_GuildIntegrationsUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.GuildIntegrationsUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).GuildIntegrationsUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/GuildIntegrationsUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).GuildIntegrationsUpdate(ctx, req.(*event.GuildIntegrationsUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_WebhooksUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.WebhooksUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).WebhooksUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/WebhooksUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).WebhooksUpdate(ctx, req.(*event.WebhooksUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_IntegrationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.IntegrationCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).IntegrationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/IntegrationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).IntegrationCreate(ctx, req.(*event.IntegrationCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_IntegrationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.IntegrationUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).IntegrationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/IntegrationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).IntegrationUpdate(ctx, req.(*event.IntegrationUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_IntegrationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.IntegrationDeleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).IntegrationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/IntegrationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).IntegrationDelete(ctx, req.(*event.IntegrationDeleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayDispatch_InteractionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(event.InteractionCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayDispatchServer).InteractionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.dispatchservice.GatewayDispatch/InteractionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayDispatchServer).InteractionCreate(ctx, req.(*event.InteractionCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayDispatch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pylon.gateway.v1.dispatchservice.GatewayDispatch",
	HandlerType: (*GatewayDispatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuildCreate",
			Handler:    _GatewayDispatch_GuildCreate_Handler,
		},
		{
			MethodName: "GuildUpdate",
			Handler:    _GatewayDispatch_GuildUpdate_Handler,
		},
		{
			MethodName: "GuildDelete",
			Handler:    _GatewayDispatch_GuildDelete_Handler,
		},
		{
			MethodName: "PresenceUpdate",
			Handler:    _GatewayDispatch_PresenceUpdate_Handler,
		},
		{
			MethodName: "GuildMemberAdd",
			Handler:    _GatewayDispatch_GuildMemberAdd_Handler,
		},
		{
			MethodName: "GuildMemberUpdate",
			Handler:    _GatewayDispatch_GuildMemberUpdate_Handler,
		},
		{
			MethodName: "GuildMemberRemove",
			Handler:    _GatewayDispatch_GuildMemberRemove_Handler,
		},
		{
			MethodName: "ChannelCreate",
			Handler:    _GatewayDispatch_ChannelCreate_Handler,
		},
		{
			MethodName: "ChannelUpdate",
			Handler:    _GatewayDispatch_ChannelUpdate_Handler,
		},
		{
			MethodName: "ChannelDelete",
			Handler:    _GatewayDispatch_ChannelDelete_Handler,
		},
		{
			MethodName: "ChannelPinsUpdate",
			Handler:    _GatewayDispatch_ChannelPinsUpdate_Handler,
		},
		{
			MethodName: "GuildRoleCreate",
			Handler:    _GatewayDispatch_GuildRoleCreate_Handler,
		},
		{
			MethodName: "GuildRoleUpdate",
			Handler:    _GatewayDispatch_GuildRoleUpdate_Handler,
		},
		{
			MethodName: "GuildRoleDelete",
			Handler:    _GatewayDispatch_GuildRoleDelete_Handler,
		},
		{
			MethodName: "MessageCreate",
			Handler:    _GatewayDispatch_MessageCreate_Handler,
		},
		{
			MethodName: "MessageUpdate",
			Handler:    _GatewayDispatch_MessageUpdate_Handler,
		},
		{
			MethodName: "MessageDelete",
			Handler:    _GatewayDispatch_MessageDelete_Handler,
		},
		{
			MethodName: "MessageDeleteBulk",
			Handler:    _GatewayDispatch_MessageDeleteBulk_Handler,
		},
		{
			MethodName: "MessageReactionAdd",
			Handler:    _GatewayDispatch_MessageReactionAdd_Handler,
		},
		{
			MethodName: "MessageReactionRemove",
			Handler:    _GatewayDispatch_MessageReactionRemove_Handler,
		},
		{
			MethodName: "MessageReactionRemoveAll",
			Handler:    _GatewayDispatch_MessageReactionRemoveAll_Handler,
		},
		{
			MethodName: "MessageReactionRemoveEmoji",
			Handler:    _GatewayDispatch_MessageReactionRemoveEmoji_Handler,
		},
		{
			MethodName: "TypingStart",
			Handler:    _GatewayDispatch_TypingStart_Handler,
		},
		{
			MethodName: "VoiceStateUpdate",
			Handler:    _GatewayDispatch_VoiceStateUpdate_Handler,
		},
		{
			MethodName: "VoiceServerUpdate",
			Handler:    _GatewayDispatch_VoiceServerUpdate_Handler,
		},
		{
			MethodName: "InviteCreate",
			Handler:    _GatewayDispatch_InviteCreate_Handler,
		},
		{
			MethodName: "InviteDelete",
			Handler:    _GatewayDispatch_InviteDelete_Handler,
		},
		{
			MethodName: "GuildBanAdd",
			Handler:    _GatewayDispatch_GuildBanAdd_Handler,
		},
		{
			MethodName: "GuildBanRemove",
			Handler:    _GatewayDispatch_GuildBanRemove_Handler,
		},
		{
			MethodName: "GuildEmojisUpdate",
			Handler:    _GatewayDispatch_GuildEmojisUpdate_Handler,
		},
		{
			MethodName: "GuildIntegrationsUpdate",
			Handler:    _GatewayDispatch_GuildIntegrationsUpdate_Handler,
		},
		{
			MethodName: "WebhooksUpdate",
			Handler:    _GatewayDispatch_WebhooksUpdate_Handler,
		},
		{
			MethodName: "IntegrationCreate",
			Handler:    _GatewayDispatch_IntegrationCreate_Handler,
		},
		{
			MethodName: "IntegrationUpdate",
			Handler:    _GatewayDispatch_IntegrationUpdate_Handler,
		},
		{
			MethodName: "IntegrationDelete",
			Handler:    _GatewayDispatch_IntegrationDelete_Handler,
		},
		{
			MethodName: "InteractionCreate",
			Handler:    _GatewayDispatch_InteractionCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/dispatch_service.proto",
}
