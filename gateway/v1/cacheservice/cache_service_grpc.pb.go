// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cacheservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GatewayCacheClient is the client API for GatewayCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayCacheClient interface {
	// Guilds
	GetGuild(ctx context.Context, in *GetGuildRequest, opts ...grpc.CallOption) (*GetGuildResponse, error)
	// Channels
	ListGuildChannels(ctx context.Context, in *ListGuildChannelsRequest, opts ...grpc.CallOption) (*ListGuildChannelsResponse, error)
	GetGuildChannel(ctx context.Context, in *GetGuildChannelRequest, opts ...grpc.CallOption) (*GetGuildChannelResponse, error)
	// Guild Members
	ListGuildMembers(ctx context.Context, in *ListGuildMembersRequest, opts ...grpc.CallOption) (*ListGuildMembersResponse, error)
	GetGuildMember(ctx context.Context, in *GetGuildMemberRequest, opts ...grpc.CallOption) (*GetGuildMemberResponse, error)
	// Guild Member Properties
	ListGuildRoles(ctx context.Context, in *ListGuildRolesRequest, opts ...grpc.CallOption) (*ListGuildRolesResponse, error)
	GetGuildRole(ctx context.Context, in *GetGuildRoleRequest, opts ...grpc.CallOption) (*GetGuildRoleResponse, error)
	// Emojis
	ListGuildEmojis(ctx context.Context, in *ListGuildEmojisRequest, opts ...grpc.CallOption) (*ListGuildEmojisResponse, error)
	GetGuildEmoji(ctx context.Context, in *GetGuildEmojiRequest, opts ...grpc.CallOption) (*GetGuildEmojiResponse, error)
	// Users
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// VoiceStates
	GetGuildMemberVoiceState(ctx context.Context, in *GetGuildMemberVoiceStateRequest, opts ...grpc.CallOption) (*GetGuildMemberVoiceStateResponse, error)
	ListGuildChannelVoiceStates(ctx context.Context, in *ListGuildChannelVoiceStatesRequest, opts ...grpc.CallOption) (*ListGuildChannelVoiceStatesResponse, error)
}

type gatewayCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayCacheClient(cc grpc.ClientConnInterface) GatewayCacheClient {
	return &gatewayCacheClient{cc}
}

func (c *gatewayCacheClient) GetGuild(ctx context.Context, in *GetGuildRequest, opts ...grpc.CallOption) (*GetGuildResponse, error) {
	out := new(GetGuildResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) ListGuildChannels(ctx context.Context, in *ListGuildChannelsRequest, opts ...grpc.CallOption) (*ListGuildChannelsResponse, error) {
	out := new(ListGuildChannelsResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) GetGuildChannel(ctx context.Context, in *GetGuildChannelRequest, opts ...grpc.CallOption) (*GetGuildChannelResponse, error) {
	out := new(GetGuildChannelResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) ListGuildMembers(ctx context.Context, in *ListGuildMembersRequest, opts ...grpc.CallOption) (*ListGuildMembersResponse, error) {
	out := new(ListGuildMembersResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) GetGuildMember(ctx context.Context, in *GetGuildMemberRequest, opts ...grpc.CallOption) (*GetGuildMemberResponse, error) {
	out := new(GetGuildMemberResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) ListGuildRoles(ctx context.Context, in *ListGuildRolesRequest, opts ...grpc.CallOption) (*ListGuildRolesResponse, error) {
	out := new(ListGuildRolesResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) GetGuildRole(ctx context.Context, in *GetGuildRoleRequest, opts ...grpc.CallOption) (*GetGuildRoleResponse, error) {
	out := new(GetGuildRoleResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) ListGuildEmojis(ctx context.Context, in *ListGuildEmojisRequest, opts ...grpc.CallOption) (*ListGuildEmojisResponse, error) {
	out := new(ListGuildEmojisResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildEmojis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) GetGuildEmoji(ctx context.Context, in *GetGuildEmojiRequest, opts ...grpc.CallOption) (*GetGuildEmojiResponse, error) {
	out := new(GetGuildEmojiResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildEmoji", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) GetGuildMemberVoiceState(ctx context.Context, in *GetGuildMemberVoiceStateRequest, opts ...grpc.CallOption) (*GetGuildMemberVoiceStateResponse, error) {
	out := new(GetGuildMemberVoiceStateResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildMemberVoiceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayCacheClient) ListGuildChannelVoiceStates(ctx context.Context, in *ListGuildChannelVoiceStatesRequest, opts ...grpc.CallOption) (*ListGuildChannelVoiceStatesResponse, error) {
	out := new(ListGuildChannelVoiceStatesResponse)
	err := c.cc.Invoke(ctx, "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildChannelVoiceStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayCacheServer is the server API for GatewayCache service.
// All implementations must embed UnimplementedGatewayCacheServer
// for forward compatibility
type GatewayCacheServer interface {
	// Guilds
	GetGuild(context.Context, *GetGuildRequest) (*GetGuildResponse, error)
	// Channels
	ListGuildChannels(context.Context, *ListGuildChannelsRequest) (*ListGuildChannelsResponse, error)
	GetGuildChannel(context.Context, *GetGuildChannelRequest) (*GetGuildChannelResponse, error)
	// Guild Members
	ListGuildMembers(context.Context, *ListGuildMembersRequest) (*ListGuildMembersResponse, error)
	GetGuildMember(context.Context, *GetGuildMemberRequest) (*GetGuildMemberResponse, error)
	// Guild Member Properties
	ListGuildRoles(context.Context, *ListGuildRolesRequest) (*ListGuildRolesResponse, error)
	GetGuildRole(context.Context, *GetGuildRoleRequest) (*GetGuildRoleResponse, error)
	// Emojis
	ListGuildEmojis(context.Context, *ListGuildEmojisRequest) (*ListGuildEmojisResponse, error)
	GetGuildEmoji(context.Context, *GetGuildEmojiRequest) (*GetGuildEmojiResponse, error)
	// Users
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// VoiceStates
	GetGuildMemberVoiceState(context.Context, *GetGuildMemberVoiceStateRequest) (*GetGuildMemberVoiceStateResponse, error)
	ListGuildChannelVoiceStates(context.Context, *ListGuildChannelVoiceStatesRequest) (*ListGuildChannelVoiceStatesResponse, error)
	mustEmbedUnimplementedGatewayCacheServer()
}

// UnimplementedGatewayCacheServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayCacheServer struct {
}

func (UnimplementedGatewayCacheServer) GetGuild(context.Context, *GetGuildRequest) (*GetGuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuild not implemented")
}
func (UnimplementedGatewayCacheServer) ListGuildChannels(context.Context, *ListGuildChannelsRequest) (*ListGuildChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuildChannels not implemented")
}
func (UnimplementedGatewayCacheServer) GetGuildChannel(context.Context, *GetGuildChannelRequest) (*GetGuildChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildChannel not implemented")
}
func (UnimplementedGatewayCacheServer) ListGuildMembers(context.Context, *ListGuildMembersRequest) (*ListGuildMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuildMembers not implemented")
}
func (UnimplementedGatewayCacheServer) GetGuildMember(context.Context, *GetGuildMemberRequest) (*GetGuildMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildMember not implemented")
}
func (UnimplementedGatewayCacheServer) ListGuildRoles(context.Context, *ListGuildRolesRequest) (*ListGuildRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuildRoles not implemented")
}
func (UnimplementedGatewayCacheServer) GetGuildRole(context.Context, *GetGuildRoleRequest) (*GetGuildRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildRole not implemented")
}
func (UnimplementedGatewayCacheServer) ListGuildEmojis(context.Context, *ListGuildEmojisRequest) (*ListGuildEmojisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuildEmojis not implemented")
}
func (UnimplementedGatewayCacheServer) GetGuildEmoji(context.Context, *GetGuildEmojiRequest) (*GetGuildEmojiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildEmoji not implemented")
}
func (UnimplementedGatewayCacheServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGatewayCacheServer) GetGuildMemberVoiceState(context.Context, *GetGuildMemberVoiceStateRequest) (*GetGuildMemberVoiceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuildMemberVoiceState not implemented")
}
func (UnimplementedGatewayCacheServer) ListGuildChannelVoiceStates(context.Context, *ListGuildChannelVoiceStatesRequest) (*ListGuildChannelVoiceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGuildChannelVoiceStates not implemented")
}
func (UnimplementedGatewayCacheServer) mustEmbedUnimplementedGatewayCacheServer() {}

// UnsafeGatewayCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayCacheServer will
// result in compilation errors.
type UnsafeGatewayCacheServer interface {
	mustEmbedUnimplementedGatewayCacheServer()
}

func RegisterGatewayCacheServer(s grpc.ServiceRegistrar, srv GatewayCacheServer) {
	s.RegisterService(&_GatewayCache_serviceDesc, srv)
}

func _GatewayCache_GetGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).GetGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).GetGuild(ctx, req.(*GetGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_ListGuildChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuildChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).ListGuildChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).ListGuildChannels(ctx, req.(*ListGuildChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_GetGuildChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).GetGuildChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).GetGuildChannel(ctx, req.(*GetGuildChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_ListGuildMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuildMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).ListGuildMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).ListGuildMembers(ctx, req.(*ListGuildMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_GetGuildMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).GetGuildMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).GetGuildMember(ctx, req.(*GetGuildMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_ListGuildRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuildRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).ListGuildRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).ListGuildRoles(ctx, req.(*ListGuildRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_GetGuildRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).GetGuildRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).GetGuildRole(ctx, req.(*GetGuildRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_ListGuildEmojis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuildEmojisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).ListGuildEmojis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildEmojis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).ListGuildEmojis(ctx, req.(*ListGuildEmojisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_GetGuildEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).GetGuildEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildEmoji",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).GetGuildEmoji(ctx, req.(*GetGuildEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_GetGuildMemberVoiceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuildMemberVoiceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).GetGuildMemberVoiceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/GetGuildMemberVoiceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).GetGuildMemberVoiceState(ctx, req.(*GetGuildMemberVoiceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayCache_ListGuildChannelVoiceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGuildChannelVoiceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayCacheServer).ListGuildChannelVoiceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pylon.gateway.v1.cacheservice.GatewayCache/ListGuildChannelVoiceStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayCacheServer).ListGuildChannelVoiceStates(ctx, req.(*ListGuildChannelVoiceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pylon.gateway.v1.cacheservice.GatewayCache",
	HandlerType: (*GatewayCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGuild",
			Handler:    _GatewayCache_GetGuild_Handler,
		},
		{
			MethodName: "ListGuildChannels",
			Handler:    _GatewayCache_ListGuildChannels_Handler,
		},
		{
			MethodName: "GetGuildChannel",
			Handler:    _GatewayCache_GetGuildChannel_Handler,
		},
		{
			MethodName: "ListGuildMembers",
			Handler:    _GatewayCache_ListGuildMembers_Handler,
		},
		{
			MethodName: "GetGuildMember",
			Handler:    _GatewayCache_GetGuildMember_Handler,
		},
		{
			MethodName: "ListGuildRoles",
			Handler:    _GatewayCache_ListGuildRoles_Handler,
		},
		{
			MethodName: "GetGuildRole",
			Handler:    _GatewayCache_GetGuildRole_Handler,
		},
		{
			MethodName: "ListGuildEmojis",
			Handler:    _GatewayCache_ListGuildEmojis_Handler,
		},
		{
			MethodName: "GetGuildEmoji",
			Handler:    _GatewayCache_GetGuildEmoji_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GatewayCache_GetUser_Handler,
		},
		{
			MethodName: "GetGuildMemberVoiceState",
			Handler:    _GatewayCache_GetGuildMemberVoiceState_Handler,
		},
		{
			MethodName: "ListGuildChannelVoiceStates",
			Handler:    _GatewayCache_ListGuildChannelVoiceStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/v1/cache_service.proto",
}
