// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: discord/v1/model.proto

package model

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ChannelData_ChannelType int32

const (
	ChannelData_UNKNOWN        ChannelData_ChannelType = 0
	ChannelData_GUILD_TEXT     ChannelData_ChannelType = 1
	ChannelData_DM             ChannelData_ChannelType = 2
	ChannelData_GUILD_VOICE    ChannelData_ChannelType = 3
	ChannelData_GROUP_DM       ChannelData_ChannelType = 4
	ChannelData_GUILD_CATEGORY ChannelData_ChannelType = 5
	ChannelData_GUILD_NEWS     ChannelData_ChannelType = 6
	ChannelData_GUILD_STORE    ChannelData_ChannelType = 7
)

// Enum value maps for ChannelData_ChannelType.
var (
	ChannelData_ChannelType_name = map[int32]string{
		0: "UNKNOWN",
		1: "GUILD_TEXT",
		2: "DM",
		3: "GUILD_VOICE",
		4: "GROUP_DM",
		5: "GUILD_CATEGORY",
		6: "GUILD_NEWS",
		7: "GUILD_STORE",
	}
	ChannelData_ChannelType_value = map[string]int32{
		"UNKNOWN":        0,
		"GUILD_TEXT":     1,
		"DM":             2,
		"GUILD_VOICE":    3,
		"GROUP_DM":       4,
		"GUILD_CATEGORY": 5,
		"GUILD_NEWS":     6,
		"GUILD_STORE":    7,
	}
)

func (x ChannelData_ChannelType) Enum() *ChannelData_ChannelType {
	p := new(ChannelData_ChannelType)
	*p = x
	return p
}

func (x ChannelData_ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelData_ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_model_proto_enumTypes[0].Descriptor()
}

func (ChannelData_ChannelType) Type() protoreflect.EnumType {
	return &file_discord_v1_model_proto_enumTypes[0]
}

func (x ChannelData_ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelData_ChannelType.Descriptor instead.
func (ChannelData_ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{4, 0}
}

type ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType int32

const (
	ChannelData_ChannelPermissionOverwriteData_UNKNOWN ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType = 0
	ChannelData_ChannelPermissionOverwriteData_ROLE    ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType = 1
	ChannelData_ChannelPermissionOverwriteData_MEMBER  ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType = 2
)

// Enum value maps for ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType.
var (
	ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ROLE",
		2: "MEMBER",
	}
	ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType_value = map[string]int32{
		"UNKNOWN": 0,
		"ROLE":    1,
		"MEMBER":  2,
	}
)

func (x ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType) Enum() *ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType {
	p := new(ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType)
	*p = x
	return p
}

func (x ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_model_proto_enumTypes[1].Descriptor()
}

func (ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType) Type() protoreflect.EnumType {
	return &file_discord_v1_model_proto_enumTypes[1]
}

func (x ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType.Descriptor instead.
func (ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{4, 0, 0}
}

type MessageData_MessageType int32

const (
	MessageData_UNKNOWN                                MessageData_MessageType = 0
	MessageData_DEFAULT                                MessageData_MessageType = 1
	MessageData_RECIPIENT_ADD                          MessageData_MessageType = 2
	MessageData_RECIPIENT_REMOVE                       MessageData_MessageType = 3
	MessageData_CALL                                   MessageData_MessageType = 4
	MessageData_CHANNEL_NAME_CHANGE                    MessageData_MessageType = 5
	MessageData_CHANNEL_ICON_CHANGE                    MessageData_MessageType = 6
	MessageData_CHANNEL_PINNED_MESSAGE                 MessageData_MessageType = 7
	MessageData_GUILD_MEMBER_JOIN                      MessageData_MessageType = 8
	MessageData_USER_PREMIUM_GUILD_SUBSCRIPTION        MessageData_MessageType = 9
	MessageData_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1 MessageData_MessageType = 10
	MessageData_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2 MessageData_MessageType = 11
	MessageData_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3 MessageData_MessageType = 12
	MessageData_CHANNEL_FOLLOW_ADD                     MessageData_MessageType = 13
	MessageData_GUILD_DISCOVERY_DISQUALIFIED           MessageData_MessageType = 15
	MessageData_GUILD_DISCOVERY_REQUALIFIED            MessageData_MessageType = 16
)

// Enum value maps for MessageData_MessageType.
var (
	MessageData_MessageType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "DEFAULT",
		2:  "RECIPIENT_ADD",
		3:  "RECIPIENT_REMOVE",
		4:  "CALL",
		5:  "CHANNEL_NAME_CHANGE",
		6:  "CHANNEL_ICON_CHANGE",
		7:  "CHANNEL_PINNED_MESSAGE",
		8:  "GUILD_MEMBER_JOIN",
		9:  "USER_PREMIUM_GUILD_SUBSCRIPTION",
		10: "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1",
		11: "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2",
		12: "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3",
		13: "CHANNEL_FOLLOW_ADD",
		15: "GUILD_DISCOVERY_DISQUALIFIED",
		16: "GUILD_DISCOVERY_REQUALIFIED",
	}
	MessageData_MessageType_value = map[string]int32{
		"UNKNOWN":                                0,
		"DEFAULT":                                1,
		"RECIPIENT_ADD":                          2,
		"RECIPIENT_REMOVE":                       3,
		"CALL":                                   4,
		"CHANNEL_NAME_CHANGE":                    5,
		"CHANNEL_ICON_CHANGE":                    6,
		"CHANNEL_PINNED_MESSAGE":                 7,
		"GUILD_MEMBER_JOIN":                      8,
		"USER_PREMIUM_GUILD_SUBSCRIPTION":        9,
		"USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1": 10,
		"USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2": 11,
		"USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3": 12,
		"CHANNEL_FOLLOW_ADD":                     13,
		"GUILD_DISCOVERY_DISQUALIFIED":           15,
		"GUILD_DISCOVERY_REQUALIFIED":            16,
	}
)

func (x MessageData_MessageType) Enum() *MessageData_MessageType {
	p := new(MessageData_MessageType)
	*p = x
	return p
}

func (x MessageData_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageData_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_model_proto_enumTypes[2].Descriptor()
}

func (MessageData_MessageType) Type() protoreflect.EnumType {
	return &file_discord_v1_model_proto_enumTypes[2]
}

func (x MessageData_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageData_MessageType.Descriptor instead.
func (MessageData_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 0}
}

type MessageData_MessageEmbedData_MessageEmbedType int32

const (
	MessageData_MessageEmbedData_UNKNOWN MessageData_MessageEmbedData_MessageEmbedType = 0
	MessageData_MessageEmbedData_RICH    MessageData_MessageEmbedData_MessageEmbedType = 1
	MessageData_MessageEmbedData_IMAGE   MessageData_MessageEmbedData_MessageEmbedType = 2
	MessageData_MessageEmbedData_VIDEO   MessageData_MessageEmbedData_MessageEmbedType = 3
	MessageData_MessageEmbedData_GIFV    MessageData_MessageEmbedData_MessageEmbedType = 4
	MessageData_MessageEmbedData_ARTICLE MessageData_MessageEmbedData_MessageEmbedType = 5
	MessageData_MessageEmbedData_LINK    MessageData_MessageEmbedData_MessageEmbedType = 6
)

// Enum value maps for MessageData_MessageEmbedData_MessageEmbedType.
var (
	MessageData_MessageEmbedData_MessageEmbedType_name = map[int32]string{
		0: "UNKNOWN",
		1: "RICH",
		2: "IMAGE",
		3: "VIDEO",
		4: "GIFV",
		5: "ARTICLE",
		6: "LINK",
	}
	MessageData_MessageEmbedData_MessageEmbedType_value = map[string]int32{
		"UNKNOWN": 0,
		"RICH":    1,
		"IMAGE":   2,
		"VIDEO":   3,
		"GIFV":    4,
		"ARTICLE": 5,
		"LINK":    6,
	}
)

func (x MessageData_MessageEmbedData_MessageEmbedType) Enum() *MessageData_MessageEmbedData_MessageEmbedType {
	p := new(MessageData_MessageEmbedData_MessageEmbedType)
	*p = x
	return p
}

func (x MessageData_MessageEmbedData_MessageEmbedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageData_MessageEmbedData_MessageEmbedType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_model_proto_enumTypes[3].Descriptor()
}

func (MessageData_MessageEmbedData_MessageEmbedType) Type() protoreflect.EnumType {
	return &file_discord_v1_model_proto_enumTypes[3]
}

func (x MessageData_MessageEmbedData_MessageEmbedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageData_MessageEmbedData_MessageEmbedType.Descriptor instead.
func (MessageData_MessageEmbedData_MessageEmbedType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8, 0}
}

type WebhookData_WebhookType int32

const (
	WebhookData_INCOMING         WebhookData_WebhookType = 0
	WebhookData_CHANNEL_FOLLOWER WebhookData_WebhookType = 1
)

// Enum value maps for WebhookData_WebhookType.
var (
	WebhookData_WebhookType_name = map[int32]string{
		0: "INCOMING",
		1: "CHANNEL_FOLLOWER",
	}
	WebhookData_WebhookType_value = map[string]int32{
		"INCOMING":         0,
		"CHANNEL_FOLLOWER": 1,
	}
)

func (x WebhookData_WebhookType) Enum() *WebhookData_WebhookType {
	p := new(WebhookData_WebhookType)
	*p = x
	return p
}

func (x WebhookData_WebhookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebhookData_WebhookType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_model_proto_enumTypes[4].Descriptor()
}

func (WebhookData_WebhookType) Type() protoreflect.EnumType {
	return &file_discord_v1_model_proto_enumTypes[4]
}

func (x WebhookData_WebhookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebhookData_WebhookType.Descriptor instead.
func (WebhookData_WebhookType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{12, 0}
}

type ImageData_ImageDataType int32

const (
	ImageData_UNKNOWN ImageData_ImageDataType = 0
	ImageData_JPEG    ImageData_ImageDataType = 1
	ImageData_PNG     ImageData_ImageDataType = 2
	ImageData_GIF     ImageData_ImageDataType = 3
)

// Enum value maps for ImageData_ImageDataType.
var (
	ImageData_ImageDataType_name = map[int32]string{
		0: "UNKNOWN",
		1: "JPEG",
		2: "PNG",
		3: "GIF",
	}
	ImageData_ImageDataType_value = map[string]int32{
		"UNKNOWN": 0,
		"JPEG":    1,
		"PNG":     2,
		"GIF":     3,
	}
)

func (x ImageData_ImageDataType) Enum() *ImageData_ImageDataType {
	p := new(ImageData_ImageDataType)
	*p = x
	return p
}

func (x ImageData_ImageDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageData_ImageDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_discord_v1_model_proto_enumTypes[5].Descriptor()
}

func (ImageData_ImageDataType) Type() protoreflect.EnumType {
	return &file_discord_v1_model_proto_enumTypes[5]
}

func (x ImageData_ImageDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageData_ImageDataType.Descriptor instead.
func (ImageData_ImageDataType) EnumDescriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{15, 0}
}

type SnowflakeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SnowflakeValue) Reset() {
	*x = SnowflakeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeValue) ProtoMessage() {}

func (x *SnowflakeValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeValue.ProtoReflect.Descriptor instead.
func (*SnowflakeValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{0}
}

func (x *SnowflakeValue) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SnowflakeListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *SnowflakeListValue) Reset() {
	*x = SnowflakeListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeListValue) ProtoMessage() {}

func (x *SnowflakeListValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeListValue.ProtoReflect.Descriptor instead.
func (*SnowflakeListValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{1}
}

func (x *SnowflakeListValue) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type PermissionsValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PermissionsValue) Reset() {
	*x = PermissionsValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionsValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionsValue) ProtoMessage() {}

func (x *PermissionsValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionsValue.ProtoReflect.Descriptor instead.
func (*PermissionsValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{2}
}

func (x *PermissionsValue) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GuildData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          uint64                `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                        string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                        *wrappers.StringValue `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Region                      string                `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AfkChannelId                *SnowflakeValue       `protobuf:"bytes,5,opt,name=afk_channel_id,json=afkChannelId,proto3" json:"afk_channel_id,omitempty"`
	OwnerId                     uint64                `protobuf:"fixed64,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	JoinedAt                    *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	Splash                      *wrappers.StringValue `protobuf:"bytes,8,opt,name=splash,proto3" json:"splash,omitempty"`
	DiscoverySplash             *wrappers.StringValue `protobuf:"bytes,9,opt,name=discovery_splash,json=discoverySplash,proto3" json:"discovery_splash,omitempty"`
	AfkTimeout                  uint32                `protobuf:"varint,10,opt,name=afk_timeout,json=afkTimeout,proto3" json:"afk_timeout,omitempty"`
	MemberCount                 uint32                `protobuf:"varint,11,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	VerificationLevel           uint32                `protobuf:"varint,12,opt,name=verification_level,json=verificationLevel,proto3" json:"verification_level,omitempty"`
	DefaultMessageNotifications uint32                `protobuf:"varint,13,opt,name=default_message_notifications,json=defaultMessageNotifications,proto3" json:"default_message_notifications,omitempty"`
	ExplicitContentFilter       uint32                `protobuf:"varint,14,opt,name=explicit_content_filter,json=explicitContentFilter,proto3" json:"explicit_content_filter,omitempty"`
	Features                    []string              `protobuf:"bytes,15,rep,name=features,proto3" json:"features,omitempty"`
	MfaLevel                    uint32                `protobuf:"varint,16,opt,name=mfa_level,json=mfaLevel,proto3" json:"mfa_level,omitempty"`
	WidgetEnabled               bool                  `protobuf:"varint,17,opt,name=widget_enabled,json=widgetEnabled,proto3" json:"widget_enabled,omitempty"`
	WidgetChannelId             *SnowflakeValue       `protobuf:"bytes,18,opt,name=widget_channel_id,json=widgetChannelId,proto3" json:"widget_channel_id,omitempty"`
	SystemChannelId             *SnowflakeValue       `protobuf:"bytes,19,opt,name=system_channel_id,json=systemChannelId,proto3" json:"system_channel_id,omitempty"`
	VanityUrlCode               *wrappers.StringValue `protobuf:"bytes,20,opt,name=vanity_url_code,json=vanityUrlCode,proto3" json:"vanity_url_code,omitempty"`
	Description                 *wrappers.StringValue `protobuf:"bytes,21,opt,name=description,proto3" json:"description,omitempty"`
	Banner                      *wrappers.StringValue `protobuf:"bytes,22,opt,name=banner,proto3" json:"banner,omitempty"`
	PremiumTier                 uint32                `protobuf:"varint,23,opt,name=premium_tier,json=premiumTier,proto3" json:"premium_tier,omitempty"`
	PremiumSubscriptionCount    uint32                `protobuf:"varint,24,opt,name=premium_subscription_count,json=premiumSubscriptionCount,proto3" json:"premium_subscription_count,omitempty"`
	Unavailable                 bool                  `protobuf:"varint,25,opt,name=unavailable,proto3" json:"unavailable,omitempty"`
}

func (x *GuildData) Reset() {
	*x = GuildData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildData) ProtoMessage() {}

func (x *GuildData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildData.ProtoReflect.Descriptor instead.
func (*GuildData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{3}
}

func (x *GuildData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GuildData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GuildData) GetIcon() *wrappers.StringValue {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *GuildData) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GuildData) GetAfkChannelId() *SnowflakeValue {
	if x != nil {
		return x.AfkChannelId
	}
	return nil
}

func (x *GuildData) GetOwnerId() uint64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *GuildData) GetJoinedAt() *timestamp.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *GuildData) GetSplash() *wrappers.StringValue {
	if x != nil {
		return x.Splash
	}
	return nil
}

func (x *GuildData) GetDiscoverySplash() *wrappers.StringValue {
	if x != nil {
		return x.DiscoverySplash
	}
	return nil
}

func (x *GuildData) GetAfkTimeout() uint32 {
	if x != nil {
		return x.AfkTimeout
	}
	return 0
}

func (x *GuildData) GetMemberCount() uint32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *GuildData) GetVerificationLevel() uint32 {
	if x != nil {
		return x.VerificationLevel
	}
	return 0
}

func (x *GuildData) GetDefaultMessageNotifications() uint32 {
	if x != nil {
		return x.DefaultMessageNotifications
	}
	return 0
}

func (x *GuildData) GetExplicitContentFilter() uint32 {
	if x != nil {
		return x.ExplicitContentFilter
	}
	return 0
}

func (x *GuildData) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *GuildData) GetMfaLevel() uint32 {
	if x != nil {
		return x.MfaLevel
	}
	return 0
}

func (x *GuildData) GetWidgetEnabled() bool {
	if x != nil {
		return x.WidgetEnabled
	}
	return false
}

func (x *GuildData) GetWidgetChannelId() *SnowflakeValue {
	if x != nil {
		return x.WidgetChannelId
	}
	return nil
}

func (x *GuildData) GetSystemChannelId() *SnowflakeValue {
	if x != nil {
		return x.SystemChannelId
	}
	return nil
}

func (x *GuildData) GetVanityUrlCode() *wrappers.StringValue {
	if x != nil {
		return x.VanityUrlCode
	}
	return nil
}

func (x *GuildData) GetDescription() *wrappers.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *GuildData) GetBanner() *wrappers.StringValue {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *GuildData) GetPremiumTier() uint32 {
	if x != nil {
		return x.PremiumTier
	}
	return 0
}

func (x *GuildData) GetPremiumSubscriptionCount() uint32 {
	if x != nil {
		return x.PremiumSubscriptionCount
	}
	return 0
}

func (x *GuildData) GetUnavailable() bool {
	if x != nil {
		return x.Unavailable
	}
	return false
}

type ChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64                                        `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId              *SnowflakeValue                               `protobuf:"bytes,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Name                 string                                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Topic                *wrappers.StringValue                         `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	Type                 ChannelData_ChannelType                       `protobuf:"varint,5,opt,name=type,proto3,enum=pylon.discord.v1.model.ChannelData_ChannelType" json:"type,omitempty"`
	Nsfw                 bool                                          `protobuf:"varint,6,opt,name=nsfw,proto3" json:"nsfw,omitempty"`
	Position             uint32                                        `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	Bitrate              uint32                                        `protobuf:"varint,8,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	UserLimit            uint32                                        `protobuf:"varint,9,opt,name=user_limit,json=userLimit,proto3" json:"user_limit,omitempty"`
	ParentId             *SnowflakeValue                               `protobuf:"bytes,10,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	RateLimitPerUser     uint32                                        `protobuf:"varint,11,opt,name=rate_limit_per_user,json=rateLimitPerUser,proto3" json:"rate_limit_per_user,omitempty"`
	PermissionOverwrites []*ChannelData_ChannelPermissionOverwriteData `protobuf:"bytes,12,rep,name=permission_overwrites,json=permissionOverwrites,proto3" json:"permission_overwrites,omitempty"`
}

func (x *ChannelData) Reset() {
	*x = ChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelData) ProtoMessage() {}

func (x *ChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelData.ProtoReflect.Descriptor instead.
func (*ChannelData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelData) GetGuildId() *SnowflakeValue {
	if x != nil {
		return x.GuildId
	}
	return nil
}

func (x *ChannelData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelData) GetTopic() *wrappers.StringValue {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ChannelData) GetType() ChannelData_ChannelType {
	if x != nil {
		return x.Type
	}
	return ChannelData_UNKNOWN
}

func (x *ChannelData) GetNsfw() bool {
	if x != nil {
		return x.Nsfw
	}
	return false
}

func (x *ChannelData) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ChannelData) GetBitrate() uint32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *ChannelData) GetUserLimit() uint32 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

func (x *ChannelData) GetParentId() *SnowflakeValue {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *ChannelData) GetRateLimitPerUser() uint32 {
	if x != nil {
		return x.RateLimitPerUser
	}
	return 0
}

func (x *ChannelData) GetPermissionOverwrites() []*ChannelData_ChannelPermissionOverwriteData {
	if x != nil {
		return x.PermissionOverwrites
	}
	return nil
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64                `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string                `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Avatar        *wrappers.StringValue `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Discriminator uint32                `protobuf:"varint,4,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	Bot           bool                  `protobuf:"varint,5,opt,name=bot,proto3" json:"bot,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{5}
}

func (x *UserData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserData) GetAvatar() *wrappers.StringValue {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *UserData) GetDiscriminator() uint32 {
	if x != nil {
		return x.Discriminator
	}
	return 0
}

func (x *UserData) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

type MemberData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId      uint64                `protobuf:"fixed64,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	User         *UserData             `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Nick         *wrappers.StringValue `protobuf:"bytes,4,opt,name=nick,proto3" json:"nick,omitempty"`
	Roles        []uint64              `protobuf:"fixed64,5,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	JoinedAt     *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	PremiumSince *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=premium_since,json=premiumSince,proto3" json:"premium_since,omitempty"`
	Permissions  uint64                `protobuf:"varint,8,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *MemberData) Reset() {
	*x = MemberData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberData) ProtoMessage() {}

func (x *MemberData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberData.ProtoReflect.Descriptor instead.
func (*MemberData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{6}
}

func (x *MemberData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *MemberData) GetUser() *UserData {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MemberData) GetNick() *wrappers.StringValue {
	if x != nil {
		return x.Nick
	}
	return nil
}

func (x *MemberData) GetRoles() []uint64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *MemberData) GetJoinedAt() *timestamp.Timestamp {
	if x != nil {
		return x.JoinedAt
	}
	return nil
}

func (x *MemberData) GetPremiumSince() *timestamp.Timestamp {
	if x != nil {
		return x.PremiumSince
	}
	return nil
}

func (x *MemberData) GetPermissions() uint64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

type RoleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId     uint64 `protobuf:"fixed64,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Managed     bool   `protobuf:"varint,4,opt,name=managed,proto3" json:"managed,omitempty"`
	Mentionable bool   `protobuf:"varint,5,opt,name=mentionable,proto3" json:"mentionable,omitempty"`
	Hoist       bool   `protobuf:"varint,6,opt,name=hoist,proto3" json:"hoist,omitempty"`
	Color       uint32 `protobuf:"varint,7,opt,name=color,proto3" json:"color,omitempty"`
	Position    uint32 `protobuf:"varint,8,opt,name=position,proto3" json:"position,omitempty"`
	Permissions uint64 `protobuf:"varint,9,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *RoleData) Reset() {
	*x = RoleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleData) ProtoMessage() {}

func (x *RoleData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleData.ProtoReflect.Descriptor instead.
func (*RoleData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{7}
}

func (x *RoleData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoleData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *RoleData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleData) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *RoleData) GetMentionable() bool {
	if x != nil {
		return x.Mentionable
	}
	return false
}

func (x *RoleData) GetHoist() bool {
	if x != nil {
		return x.Hoist
	}
	return false
}

func (x *RoleData) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *RoleData) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *RoleData) GetPermissions() uint64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

type EmojiData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64   `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId       uint64   `protobuf:"fixed64,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Name          string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Animated      bool     `protobuf:"varint,4,opt,name=animated,proto3" json:"animated,omitempty"`
	Roles         []uint64 `protobuf:"fixed64,5,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	Managed       bool     `protobuf:"varint,6,opt,name=managed,proto3" json:"managed,omitempty"`
	RequireColons bool     `protobuf:"varint,7,opt,name=require_colons,json=requireColons,proto3" json:"require_colons,omitempty"`
	Available     bool     `protobuf:"varint,8,opt,name=available,proto3" json:"available,omitempty"`
	UserId        uint64   `protobuf:"fixed64,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *EmojiData) Reset() {
	*x = EmojiData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmojiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmojiData) ProtoMessage() {}

func (x *EmojiData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmojiData.ProtoReflect.Descriptor instead.
func (*EmojiData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{8}
}

func (x *EmojiData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmojiData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *EmojiData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmojiData) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

func (x *EmojiData) GetRoles() []uint64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *EmojiData) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *EmojiData) GetRequireColons() bool {
	if x != nil {
		return x.RequireColons
	}
	return false
}

func (x *EmojiData) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *EmojiData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type VoiceStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member     *MemberData           `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	GuildId    uint64                `protobuf:"fixed64,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelId  *SnowflakeValue       `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	SessionId  *wrappers.StringValue `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SelfMute   bool                  `protobuf:"varint,5,opt,name=self_mute,json=selfMute,proto3" json:"self_mute,omitempty"`
	SelfDeaf   bool                  `protobuf:"varint,6,opt,name=self_deaf,json=selfDeaf,proto3" json:"self_deaf,omitempty"`
	SelfVideo  bool                  `protobuf:"varint,7,opt,name=self_video,json=selfVideo,proto3" json:"self_video,omitempty"`
	SelfStream bool                  `protobuf:"varint,8,opt,name=self_stream,json=selfStream,proto3" json:"self_stream,omitempty"`
	Mute       bool                  `protobuf:"varint,9,opt,name=mute,proto3" json:"mute,omitempty"`
	Deaf       bool                  `protobuf:"varint,10,opt,name=deaf,proto3" json:"deaf,omitempty"`
	Suppress   bool                  `protobuf:"varint,11,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *VoiceStateData) Reset() {
	*x = VoiceStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceStateData) ProtoMessage() {}

func (x *VoiceStateData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceStateData.ProtoReflect.Descriptor instead.
func (*VoiceStateData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{9}
}

func (x *VoiceStateData) GetMember() *MemberData {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *VoiceStateData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *VoiceStateData) GetChannelId() *SnowflakeValue {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *VoiceStateData) GetSessionId() *wrappers.StringValue {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *VoiceStateData) GetSelfMute() bool {
	if x != nil {
		return x.SelfMute
	}
	return false
}

func (x *VoiceStateData) GetSelfDeaf() bool {
	if x != nil {
		return x.SelfDeaf
	}
	return false
}

func (x *VoiceStateData) GetSelfVideo() bool {
	if x != nil {
		return x.SelfVideo
	}
	return false
}

func (x *VoiceStateData) GetSelfStream() bool {
	if x != nil {
		return x.SelfStream
	}
	return false
}

func (x *VoiceStateData) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *VoiceStateData) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *VoiceStateData) GetSuppress() bool {
	if x != nil {
		return x.Suppress
	}
	return false
}

type MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                                   `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId        uint64                                   `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId          *SnowflakeValue                          `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Content          string                                   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp        *timestamp.Timestamp                     `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EditedTimestamp  *timestamp.Timestamp                     `protobuf:"bytes,6,opt,name=edited_timestamp,json=editedTimestamp,proto3" json:"edited_timestamp,omitempty"`
	MentionRoles     *SnowflakeListValue                      `protobuf:"bytes,7,opt,name=mention_roles,json=mentionRoles,proto3" json:"mention_roles,omitempty"`
	Tts              bool                                     `protobuf:"varint,8,opt,name=tts,proto3" json:"tts,omitempty"`
	MentionEveryone  bool                                     `protobuf:"varint,9,opt,name=mention_everyone,json=mentionEveryone,proto3" json:"mention_everyone,omitempty"`
	Attachments      []*MessageData_MessageAttachmentData     `protobuf:"bytes,10,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Embeds           []*MessageData_MessageEmbedData          `protobuf:"bytes,11,rep,name=embeds,proto3" json:"embeds,omitempty"`
	Mentions         []*MessageData_MessageMentionData        `protobuf:"bytes,12,rep,name=mentions,proto3" json:"mentions,omitempty"`
	Reactions        []*MessageData_MessageReactionData       `protobuf:"bytes,13,rep,name=reactions,proto3" json:"reactions,omitempty"`
	Pinned           bool                                     `protobuf:"varint,14,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Type             MessageData_MessageType                  `protobuf:"varint,15,opt,name=type,proto3,enum=pylon.discord.v1.model.MessageData_MessageType" json:"type,omitempty"`
	MentionChannels  []*MessageData_MessageMentionChannelData `protobuf:"bytes,16,rep,name=mention_channels,json=mentionChannels,proto3" json:"mention_channels,omitempty"`
	Flags            uint32                                   `protobuf:"varint,17,opt,name=flags,proto3" json:"flags,omitempty"`
	Activity         *MessageData_MessageActivityData         `protobuf:"bytes,18,opt,name=activity,proto3" json:"activity,omitempty"`
	Application      *MessageData_MessageApplicationData      `protobuf:"bytes,19,opt,name=application,proto3" json:"application,omitempty"`
	MessageReference *MessageData_MessageReferenceData        `protobuf:"bytes,20,opt,name=message_reference,json=messageReference,proto3" json:"message_reference,omitempty"`
	Author           *UserData                                `protobuf:"bytes,21,opt,name=author,proto3" json:"author,omitempty"`
	Member           *MemberData                              `protobuf:"bytes,22,opt,name=member,proto3" json:"member,omitempty"`
	WebhookId        *SnowflakeValue                          `protobuf:"bytes,23,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
}

func (x *MessageData) Reset() {
	*x = MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData) ProtoMessage() {}

func (x *MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData.ProtoReflect.Descriptor instead.
func (*MessageData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10}
}

func (x *MessageData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageData) GetGuildId() *SnowflakeValue {
	if x != nil {
		return x.GuildId
	}
	return nil
}

func (x *MessageData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MessageData) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessageData) GetEditedTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EditedTimestamp
	}
	return nil
}

func (x *MessageData) GetMentionRoles() *SnowflakeListValue {
	if x != nil {
		return x.MentionRoles
	}
	return nil
}

func (x *MessageData) GetTts() bool {
	if x != nil {
		return x.Tts
	}
	return false
}

func (x *MessageData) GetMentionEveryone() bool {
	if x != nil {
		return x.MentionEveryone
	}
	return false
}

func (x *MessageData) GetAttachments() []*MessageData_MessageAttachmentData {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *MessageData) GetEmbeds() []*MessageData_MessageEmbedData {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *MessageData) GetMentions() []*MessageData_MessageMentionData {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *MessageData) GetReactions() []*MessageData_MessageReactionData {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *MessageData) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *MessageData) GetType() MessageData_MessageType {
	if x != nil {
		return x.Type
	}
	return MessageData_UNKNOWN
}

func (x *MessageData) GetMentionChannels() []*MessageData_MessageMentionChannelData {
	if x != nil {
		return x.MentionChannels
	}
	return nil
}

func (x *MessageData) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *MessageData) GetActivity() *MessageData_MessageActivityData {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *MessageData) GetApplication() *MessageData_MessageApplicationData {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *MessageData) GetMessageReference() *MessageData_MessageReferenceData {
	if x != nil {
		return x.MessageReference
	}
	return nil
}

func (x *MessageData) GetAuthor() *UserData {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MessageData) GetMember() *MemberData {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MessageData) GetWebhookId() *SnowflakeValue {
	if x != nil {
		return x.WebhookId
	}
	return nil
}

type PresenceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Types that are assignable to MaybePartialUser:
	//	*PresenceData_User
	//	*PresenceData_UserId
	MaybePartialUser isPresenceData_MaybePartialUser        `protobuf_oneof:"maybe_partial_user"`
	Status           string                                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	ClientStatus     *PresenceData_PresenceClientStatusData `protobuf:"bytes,5,opt,name=client_status,json=clientStatus,proto3" json:"client_status,omitempty"`
	Activities       []*PresenceData_PresenceActivityData   `protobuf:"bytes,6,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (x *PresenceData) Reset() {
	*x = PresenceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceData) ProtoMessage() {}

func (x *PresenceData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceData.ProtoReflect.Descriptor instead.
func (*PresenceData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{11}
}

func (x *PresenceData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (m *PresenceData) GetMaybePartialUser() isPresenceData_MaybePartialUser {
	if m != nil {
		return m.MaybePartialUser
	}
	return nil
}

func (x *PresenceData) GetUser() *UserData {
	if x, ok := x.GetMaybePartialUser().(*PresenceData_User); ok {
		return x.User
	}
	return nil
}

func (x *PresenceData) GetUserId() uint64 {
	if x, ok := x.GetMaybePartialUser().(*PresenceData_UserId); ok {
		return x.UserId
	}
	return 0
}

func (x *PresenceData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PresenceData) GetClientStatus() *PresenceData_PresenceClientStatusData {
	if x != nil {
		return x.ClientStatus
	}
	return nil
}

func (x *PresenceData) GetActivities() []*PresenceData_PresenceActivityData {
	if x != nil {
		return x.Activities
	}
	return nil
}

type isPresenceData_MaybePartialUser interface {
	isPresenceData_MaybePartialUser()
}

type PresenceData_User struct {
	User *UserData `protobuf:"bytes,2,opt,name=user,proto3,oneof"`
}

type PresenceData_UserId struct {
	UserId uint64 `protobuf:"fixed64,3,opt,name=user_id,json=userId,proto3,oneof"`
}

func (*PresenceData_User) isPresenceData_MaybePartialUser() {}

func (*PresenceData_UserId) isPresenceData_MaybePartialUser() {}

type WebhookData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                  `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId uint64                  `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId   uint64                  `protobuf:"fixed64,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Type      WebhookData_WebhookType `protobuf:"varint,4,opt,name=type,proto3,enum=pylon.discord.v1.model.WebhookData_WebhookType" json:"type,omitempty"`
	Name      string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Avatar    string                  `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Token     string                  `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *WebhookData) Reset() {
	*x = WebhookData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookData) ProtoMessage() {}

func (x *WebhookData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookData.ProtoReflect.Descriptor instead.
func (*WebhookData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{12}
}

func (x *WebhookData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WebhookData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *WebhookData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *WebhookData) GetType() WebhookData_WebhookType {
	if x != nil {
		return x.Type
	}
	return WebhookData_INCOMING
}

func (x *WebhookData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebhookData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *WebhookData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type InviteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   uint64               `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelId uint64               `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Code      string               `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Inviter   *UserData            `protobuf:"bytes,5,opt,name=inviter,proto3" json:"inviter,omitempty"`
	MaxAge    uint64               `protobuf:"varint,6,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	MaxUses   uint64               `protobuf:"varint,7,opt,name=max_uses,json=maxUses,proto3" json:"max_uses,omitempty"`
	Temporary bool                 `protobuf:"varint,8,opt,name=temporary,proto3" json:"temporary,omitempty"`
	Uses      uint64               `protobuf:"varint,9,opt,name=uses,proto3" json:"uses,omitempty"`
}

func (x *InviteData) Reset() {
	*x = InviteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteData) ProtoMessage() {}

func (x *InviteData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteData.ProtoReflect.Descriptor instead.
func (*InviteData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{13}
}

func (x *InviteData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *InviteData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InviteData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InviteData) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InviteData) GetInviter() *UserData {
	if x != nil {
		return x.Inviter
	}
	return nil
}

func (x *InviteData) GetMaxAge() uint64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *InviteData) GetMaxUses() uint64 {
	if x != nil {
		return x.MaxUses
	}
	return 0
}

func (x *InviteData) GetTemporary() bool {
	if x != nil {
		return x.Temporary
	}
	return false
}

func (x *InviteData) GetUses() uint64 {
	if x != nil {
		return x.Uses
	}
	return 0
}

type GuildBanData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string    `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	User   *UserData `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GuildBanData) Reset() {
	*x = GuildBanData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBanData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBanData) ProtoMessage() {}

func (x *GuildBanData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBanData.ProtoReflect.Descriptor instead.
func (*GuildBanData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{14}
}

func (x *GuildBanData) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GuildBanData) GetUser() *UserData {
	if x != nil {
		return x.User
	}
	return nil
}

type ImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ImageData_ImageDataType `protobuf:"varint,1,opt,name=type,proto3,enum=pylon.discord.v1.model.ImageData_ImageDataType" json:"type,omitempty"`
	// Types that are assignable to Data:
	//	*ImageData_Base64
	//	*ImageData_Bytes
	Data isImageData_Data `protobuf_oneof:"data"`
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{15}
}

func (x *ImageData) GetType() ImageData_ImageDataType {
	if x != nil {
		return x.Type
	}
	return ImageData_UNKNOWN
}

func (m *ImageData) GetData() isImageData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ImageData) GetBase64() string {
	if x, ok := x.GetData().(*ImageData_Base64); ok {
		return x.Base64
	}
	return ""
}

func (x *ImageData) GetBytes() []byte {
	if x, ok := x.GetData().(*ImageData_Bytes); ok {
		return x.Bytes
	}
	return nil
}

type isImageData_Data interface {
	isImageData_Data()
}

type ImageData_Base64 struct {
	Base64 string `protobuf:"bytes,2,opt,name=base64,proto3,oneof"`
}

type ImageData_Bytes struct {
	Bytes []byte `protobuf:"bytes,3,opt,name=bytes,proto3,oneof"`
}

func (*ImageData_Base64) isImageData_Data() {}

func (*ImageData_Bytes) isImageData_Data() {}

type ChannelData_ChannelPermissionOverwriteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64                                                                    `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType `protobuf:"varint,2,opt,name=type,proto3,enum=pylon.discord.v1.model.ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType" json:"type,omitempty"`
	Allow uint64                                                                    `protobuf:"varint,3,opt,name=allow,proto3" json:"allow,omitempty"`
	Deny  uint64                                                                    `protobuf:"varint,4,opt,name=deny,proto3" json:"deny,omitempty"`
}

func (x *ChannelData_ChannelPermissionOverwriteData) Reset() {
	*x = ChannelData_ChannelPermissionOverwriteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelData_ChannelPermissionOverwriteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelData_ChannelPermissionOverwriteData) ProtoMessage() {}

func (x *ChannelData_ChannelPermissionOverwriteData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelData_ChannelPermissionOverwriteData.ProtoReflect.Descriptor instead.
func (*ChannelData_ChannelPermissionOverwriteData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ChannelData_ChannelPermissionOverwriteData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelData_ChannelPermissionOverwriteData) GetType() ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType {
	if x != nil {
		return x.Type
	}
	return ChannelData_ChannelPermissionOverwriteData_UNKNOWN
}

func (x *ChannelData_ChannelPermissionOverwriteData) GetAllow() uint64 {
	if x != nil {
		return x.Allow
	}
	return 0
}

func (x *ChannelData_ChannelPermissionOverwriteData) GetDeny() uint64 {
	if x != nil {
		return x.Deny
	}
	return 0
}

type MessageData_MessageAttachmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Size     uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Url      string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	ProxyUrl string `protobuf:"bytes,5,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
	Width    uint64 `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint64 `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *MessageData_MessageAttachmentData) Reset() {
	*x = MessageData_MessageAttachmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageAttachmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageAttachmentData) ProtoMessage() {}

func (x *MessageData_MessageAttachmentData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageAttachmentData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageAttachmentData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 0}
}

func (x *MessageData_MessageAttachmentData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageData_MessageAttachmentData) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *MessageData_MessageAttachmentData) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MessageData_MessageAttachmentData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageData_MessageAttachmentData) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

func (x *MessageData_MessageAttachmentData) GetWidth() uint64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MessageData_MessageAttachmentData) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type MessageData_MessageMentionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Avatar        string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Discriminator uint32 `protobuf:"varint,4,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
}

func (x *MessageData_MessageMentionData) Reset() {
	*x = MessageData_MessageMentionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageMentionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageMentionData) ProtoMessage() {}

func (x *MessageData_MessageMentionData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageMentionData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageMentionData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 1}
}

func (x *MessageData_MessageMentionData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageData_MessageMentionData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MessageData_MessageMentionData) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *MessageData_MessageMentionData) GetDiscriminator() uint32 {
	if x != nil {
		return x.Discriminator
	}
	return 0
}

type MessageData_MessageReactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32                                `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Me    bool                                  `protobuf:"varint,2,opt,name=me,proto3" json:"me,omitempty"`
	Emoji *MessageData_MessageReactionEmojiData `protobuf:"bytes,3,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *MessageData_MessageReactionData) Reset() {
	*x = MessageData_MessageReactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageReactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageReactionData) ProtoMessage() {}

func (x *MessageData_MessageReactionData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageReactionData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageReactionData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 2}
}

func (x *MessageData_MessageReactionData) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MessageData_MessageReactionData) GetMe() bool {
	if x != nil {
		return x.Me
	}
	return false
}

func (x *MessageData_MessageReactionData) GetEmoji() *MessageData_MessageReactionEmojiData {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type MessageData_MessageReactionEmojiData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Animated bool   `protobuf:"varint,3,opt,name=animated,proto3" json:"animated,omitempty"`
}

func (x *MessageData_MessageReactionEmojiData) Reset() {
	*x = MessageData_MessageReactionEmojiData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageReactionEmojiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageReactionEmojiData) ProtoMessage() {}

func (x *MessageData_MessageReactionEmojiData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageReactionEmojiData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageReactionEmojiData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 3}
}

func (x *MessageData_MessageReactionEmojiData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageData_MessageReactionEmojiData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageData_MessageReactionEmojiData) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

type MessageData_MessageApplicationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	CoverImage  string `protobuf:"bytes,2,opt,name=cover_image,json=coverImage,proto3" json:"cover_image,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Icon        string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MessageData_MessageApplicationData) Reset() {
	*x = MessageData_MessageApplicationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageApplicationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageApplicationData) ProtoMessage() {}

func (x *MessageData_MessageApplicationData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageApplicationData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageApplicationData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 4}
}

func (x *MessageData_MessageApplicationData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageData_MessageApplicationData) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *MessageData_MessageApplicationData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MessageData_MessageApplicationData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *MessageData_MessageApplicationData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MessageData_MessageReferenceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId uint64 `protobuf:"fixed64,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ChannelId uint64 `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId   uint64 `protobuf:"fixed64,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *MessageData_MessageReferenceData) Reset() {
	*x = MessageData_MessageReferenceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageReferenceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageReferenceData) ProtoMessage() {}

func (x *MessageData_MessageReferenceData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageReferenceData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageReferenceData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 5}
}

func (x *MessageData_MessageReferenceData) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MessageData_MessageReferenceData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageData_MessageReferenceData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type MessageData_MessageActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *MessageData_MessageActivityData) Reset() {
	*x = MessageData_MessageActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageActivityData) ProtoMessage() {}

func (x *MessageData_MessageActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageActivityData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageActivityData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 6}
}

func (x *MessageData_MessageActivityData) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MessageData_MessageActivityData) GetPartyId() string {
	if x != nil {
		return x.PartyId
	}
	return ""
}

type MessageData_MessageMentionChannelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64                  `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildId uint64                  `protobuf:"fixed64,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Type    ChannelData_ChannelType `protobuf:"varint,3,opt,name=type,proto3,enum=pylon.discord.v1.model.ChannelData_ChannelType" json:"type,omitempty"`
	Name    string                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MessageData_MessageMentionChannelData) Reset() {
	*x = MessageData_MessageMentionChannelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageMentionChannelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageMentionChannelData) ProtoMessage() {}

func (x *MessageData_MessageMentionChannelData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageMentionChannelData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageMentionChannelData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 7}
}

func (x *MessageData_MessageMentionChannelData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageData_MessageMentionChannelData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *MessageData_MessageMentionChannelData) GetType() ChannelData_ChannelType {
	if x != nil {
		return x.Type
	}
	return ChannelData_UNKNOWN
}

func (x *MessageData_MessageMentionChannelData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MessageData_MessageEmbedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                                                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type        MessageData_MessageEmbedData_MessageEmbedType           `protobuf:"varint,2,opt,name=type,proto3,enum=pylon.discord.v1.model.MessageData_MessageEmbedData_MessageEmbedType" json:"type,omitempty"`
	Description string                                                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Url         string                                                  `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Timestamp   *timestamp.Timestamp                                    `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Color       uint32                                                  `protobuf:"varint,6,opt,name=color,proto3" json:"color,omitempty"`
	Footer      *MessageData_MessageEmbedData_MessageEmbedFooterData    `protobuf:"bytes,7,opt,name=footer,proto3" json:"footer,omitempty"`
	Image       *MessageData_MessageEmbedData_MessageEmbedImageData     `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	Thumbnail   *MessageData_MessageEmbedData_MessageEmbedThumbnailData `protobuf:"bytes,9,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Video       *MessageData_MessageEmbedData_MessageEmbedVideoData     `protobuf:"bytes,10,opt,name=video,proto3" json:"video,omitempty"`
	Provider    *MessageData_MessageEmbedData_MessageEmbedProviderData  `protobuf:"bytes,11,opt,name=provider,proto3" json:"provider,omitempty"`
	Author      *MessageData_MessageEmbedData_MessageEmbedAuthorData    `protobuf:"bytes,12,opt,name=author,proto3" json:"author,omitempty"`
	Fields      []*MessageData_MessageEmbedData_MessageEmbedFieldData   `protobuf:"bytes,13,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *MessageData_MessageEmbedData) Reset() {
	*x = MessageData_MessageEmbedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageEmbedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageEmbedData) ProtoMessage() {}

func (x *MessageData_MessageEmbedData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageEmbedData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageEmbedData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8}
}

func (x *MessageData_MessageEmbedData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MessageData_MessageEmbedData) GetType() MessageData_MessageEmbedData_MessageEmbedType {
	if x != nil {
		return x.Type
	}
	return MessageData_MessageEmbedData_UNKNOWN
}

func (x *MessageData_MessageEmbedData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MessageData_MessageEmbedData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageData_MessageEmbedData) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessageData_MessageEmbedData) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *MessageData_MessageEmbedData) GetFooter() *MessageData_MessageEmbedData_MessageEmbedFooterData {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *MessageData_MessageEmbedData) GetImage() *MessageData_MessageEmbedData_MessageEmbedImageData {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MessageData_MessageEmbedData) GetThumbnail() *MessageData_MessageEmbedData_MessageEmbedThumbnailData {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *MessageData_MessageEmbedData) GetVideo() *MessageData_MessageEmbedData_MessageEmbedVideoData {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *MessageData_MessageEmbedData) GetProvider() *MessageData_MessageEmbedData_MessageEmbedProviderData {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *MessageData_MessageEmbedData) GetAuthor() *MessageData_MessageEmbedData_MessageEmbedAuthorData {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MessageData_MessageEmbedData) GetFields() []*MessageData_MessageEmbedData_MessageEmbedFieldData {
	if x != nil {
		return x.Fields
	}
	return nil
}

type MessageData_MessageEmbedData_MessageEmbedFooterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	IconUrl      string `protobuf:"bytes,2,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	ProxyIconUrl string `protobuf:"bytes,3,opt,name=proxy_icon_url,json=proxyIconUrl,proto3" json:"proxy_icon_url,omitempty"`
}

func (x *MessageData_MessageEmbedData_MessageEmbedFooterData) Reset() {
	*x = MessageData_MessageEmbedData_MessageEmbedFooterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageEmbedData_MessageEmbedFooterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageEmbedData_MessageEmbedFooterData) ProtoMessage() {}

func (x *MessageData_MessageEmbedData_MessageEmbedFooterData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageEmbedData_MessageEmbedFooterData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageEmbedData_MessageEmbedFooterData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8, 0}
}

func (x *MessageData_MessageEmbedData_MessageEmbedFooterData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedFooterData) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedFooterData) GetProxyIconUrl() string {
	if x != nil {
		return x.ProxyIconUrl
	}
	return ""
}

type MessageData_MessageEmbedData_MessageEmbedImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width  uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *MessageData_MessageEmbedData_MessageEmbedImageData) Reset() {
	*x = MessageData_MessageEmbedData_MessageEmbedImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageEmbedData_MessageEmbedImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageEmbedData_MessageEmbedImageData) ProtoMessage() {}

func (x *MessageData_MessageEmbedData_MessageEmbedImageData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageEmbedData_MessageEmbedImageData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageEmbedData_MessageEmbedImageData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8, 1}
}

func (x *MessageData_MessageEmbedData_MessageEmbedImageData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedImageData) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MessageData_MessageEmbedData_MessageEmbedImageData) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type MessageData_MessageEmbedData_MessageEmbedThumbnailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ProxyUrl string `protobuf:"bytes,2,opt,name=proxy_url,json=proxyUrl,proto3" json:"proxy_url,omitempty"`
	Width    uint32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *MessageData_MessageEmbedData_MessageEmbedThumbnailData) Reset() {
	*x = MessageData_MessageEmbedData_MessageEmbedThumbnailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageEmbedData_MessageEmbedThumbnailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageEmbedData_MessageEmbedThumbnailData) ProtoMessage() {}

func (x *MessageData_MessageEmbedData_MessageEmbedThumbnailData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageEmbedData_MessageEmbedThumbnailData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageEmbedData_MessageEmbedThumbnailData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8, 2}
}

func (x *MessageData_MessageEmbedData_MessageEmbedThumbnailData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedThumbnailData) GetProxyUrl() string {
	if x != nil {
		return x.ProxyUrl
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedThumbnailData) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MessageData_MessageEmbedData_MessageEmbedThumbnailData) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type MessageData_MessageEmbedData_MessageEmbedVideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width  uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *MessageData_MessageEmbedData_MessageEmbedVideoData) Reset() {
	*x = MessageData_MessageEmbedData_MessageEmbedVideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageEmbedData_MessageEmbedVideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageEmbedData_MessageEmbedVideoData) ProtoMessage() {}

func (x *MessageData_MessageEmbedData_MessageEmbedVideoData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageEmbedData_MessageEmbedVideoData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageEmbedData_MessageEmbedVideoData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8, 3}
}

func (x *MessageData_MessageEmbedData_MessageEmbedVideoData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedVideoData) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MessageData_MessageEmbedData_MessageEmbedVideoData) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type MessageData_MessageEmbedData_MessageEmbedProviderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *MessageData_MessageEmbedData_MessageEmbedProviderData) Reset() {
	*x = MessageData_MessageEmbedData_MessageEmbedProviderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageEmbedData_MessageEmbedProviderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageEmbedData_MessageEmbedProviderData) ProtoMessage() {}

func (x *MessageData_MessageEmbedData_MessageEmbedProviderData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageEmbedData_MessageEmbedProviderData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageEmbedData_MessageEmbedProviderData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8, 4}
}

func (x *MessageData_MessageEmbedData_MessageEmbedProviderData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedProviderData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type MessageData_MessageEmbedData_MessageEmbedAuthorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url          string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl      string `protobuf:"bytes,3,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	ProxyIconUrl string `protobuf:"bytes,4,opt,name=proxy_icon_url,json=proxyIconUrl,proto3" json:"proxy_icon_url,omitempty"`
}

func (x *MessageData_MessageEmbedData_MessageEmbedAuthorData) Reset() {
	*x = MessageData_MessageEmbedData_MessageEmbedAuthorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageEmbedData_MessageEmbedAuthorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageEmbedData_MessageEmbedAuthorData) ProtoMessage() {}

func (x *MessageData_MessageEmbedData_MessageEmbedAuthorData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageEmbedData_MessageEmbedAuthorData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageEmbedData_MessageEmbedAuthorData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8, 5}
}

func (x *MessageData_MessageEmbedData_MessageEmbedAuthorData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedAuthorData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedAuthorData) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedAuthorData) GetProxyIconUrl() string {
	if x != nil {
		return x.ProxyIconUrl
	}
	return ""
}

type MessageData_MessageEmbedData_MessageEmbedFieldData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Inline bool   `protobuf:"varint,3,opt,name=inline,proto3" json:"inline,omitempty"`
}

func (x *MessageData_MessageEmbedData_MessageEmbedFieldData) Reset() {
	*x = MessageData_MessageEmbedData_MessageEmbedFieldData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData_MessageEmbedData_MessageEmbedFieldData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData_MessageEmbedData_MessageEmbedFieldData) ProtoMessage() {}

func (x *MessageData_MessageEmbedData_MessageEmbedFieldData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData_MessageEmbedData_MessageEmbedFieldData.ProtoReflect.Descriptor instead.
func (*MessageData_MessageEmbedData_MessageEmbedFieldData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{10, 8, 6}
}

func (x *MessageData_MessageEmbedData_MessageEmbedFieldData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedFieldData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MessageData_MessageEmbedData_MessageEmbedFieldData) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

type PresenceData_PresenceClientStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desktop string `protobuf:"bytes,1,opt,name=desktop,proto3" json:"desktop,omitempty"`
	Mobile  string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Web     string `protobuf:"bytes,3,opt,name=web,proto3" json:"web,omitempty"`
}

func (x *PresenceData_PresenceClientStatusData) Reset() {
	*x = PresenceData_PresenceClientStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceData_PresenceClientStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceData_PresenceClientStatusData) ProtoMessage() {}

func (x *PresenceData_PresenceClientStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceData_PresenceClientStatusData.ProtoReflect.Descriptor instead.
func (*PresenceData_PresenceClientStatusData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{11, 0}
}

func (x *PresenceData_PresenceClientStatusData) GetDesktop() string {
	if x != nil {
		return x.Desktop
	}
	return ""
}

func (x *PresenceData_PresenceClientStatusData) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *PresenceData_PresenceClientStatusData) GetWeb() string {
	if x != nil {
		return x.Web
	}
	return ""
}

type PresenceData_PresenceActivityData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          uint32                                                            `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Url           string                                                            `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt     *timestamp.Timestamp                                              `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Timestamps    *PresenceData_PresenceActivityData_PresenceActivityTimestampsData `protobuf:"bytes,5,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	ApplicationId uint64                                                            `protobuf:"fixed64,6,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Details       string                                                            `protobuf:"bytes,7,opt,name=details,proto3" json:"details,omitempty"`
	State         string                                                            `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	Emoji         *PresenceData_PresenceActivityData_PresenceActivityEmojiData      `protobuf:"bytes,9,opt,name=emoji,proto3" json:"emoji,omitempty"`
	Party         *PresenceData_PresenceActivityData_PresenceActivityPartyData      `protobuf:"bytes,10,opt,name=party,proto3" json:"party,omitempty"`
	Assets        *PresenceData_PresenceActivityData_PresenceActivityAssetsData     `protobuf:"bytes,11,opt,name=assets,proto3" json:"assets,omitempty"`
	Secrets       *PresenceData_PresenceActivityData_PresenceActivitySecretsData    `protobuf:"bytes,12,opt,name=secrets,proto3" json:"secrets,omitempty"`
	Instance      bool                                                              `protobuf:"varint,13,opt,name=instance,proto3" json:"instance,omitempty"`
	Flags         uint32                                                            `protobuf:"varint,14,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *PresenceData_PresenceActivityData) Reset() {
	*x = PresenceData_PresenceActivityData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceData_PresenceActivityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceData_PresenceActivityData) ProtoMessage() {}

func (x *PresenceData_PresenceActivityData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceData_PresenceActivityData.ProtoReflect.Descriptor instead.
func (*PresenceData_PresenceActivityData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{11, 1}
}

func (x *PresenceData_PresenceActivityData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PresenceData_PresenceActivityData) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PresenceData_PresenceActivityData) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PresenceData_PresenceActivityData) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PresenceData_PresenceActivityData) GetTimestamps() *PresenceData_PresenceActivityData_PresenceActivityTimestampsData {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *PresenceData_PresenceActivityData) GetApplicationId() uint64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *PresenceData_PresenceActivityData) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *PresenceData_PresenceActivityData) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PresenceData_PresenceActivityData) GetEmoji() *PresenceData_PresenceActivityData_PresenceActivityEmojiData {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *PresenceData_PresenceActivityData) GetParty() *PresenceData_PresenceActivityData_PresenceActivityPartyData {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *PresenceData_PresenceActivityData) GetAssets() *PresenceData_PresenceActivityData_PresenceActivityAssetsData {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *PresenceData_PresenceActivityData) GetSecrets() *PresenceData_PresenceActivityData_PresenceActivitySecretsData {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *PresenceData_PresenceActivityData) GetInstance() bool {
	if x != nil {
		return x.Instance
	}
	return false
}

func (x *PresenceData_PresenceActivityData) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type PresenceData_PresenceActivityData_PresenceActivityTimestampsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start uint64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   uint64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *PresenceData_PresenceActivityData_PresenceActivityTimestampsData) Reset() {
	*x = PresenceData_PresenceActivityData_PresenceActivityTimestampsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceData_PresenceActivityData_PresenceActivityTimestampsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceData_PresenceActivityData_PresenceActivityTimestampsData) ProtoMessage() {}

func (x *PresenceData_PresenceActivityData_PresenceActivityTimestampsData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceData_PresenceActivityData_PresenceActivityTimestampsData.ProtoReflect.Descriptor instead.
func (*PresenceData_PresenceActivityData_PresenceActivityTimestampsData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{11, 1, 0}
}

func (x *PresenceData_PresenceActivityData_PresenceActivityTimestampsData) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PresenceData_PresenceActivityData_PresenceActivityTimestampsData) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

type PresenceData_PresenceActivityData_PresenceActivityEmojiData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id       uint64 `protobuf:"fixed64,2,opt,name=id,proto3" json:"id,omitempty"`
	Animated bool   `protobuf:"varint,3,opt,name=animated,proto3" json:"animated,omitempty"`
}

func (x *PresenceData_PresenceActivityData_PresenceActivityEmojiData) Reset() {
	*x = PresenceData_PresenceActivityData_PresenceActivityEmojiData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceData_PresenceActivityData_PresenceActivityEmojiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceData_PresenceActivityData_PresenceActivityEmojiData) ProtoMessage() {}

func (x *PresenceData_PresenceActivityData_PresenceActivityEmojiData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceData_PresenceActivityData_PresenceActivityEmojiData.ProtoReflect.Descriptor instead.
func (*PresenceData_PresenceActivityData_PresenceActivityEmojiData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{11, 1, 1}
}

func (x *PresenceData_PresenceActivityData_PresenceActivityEmojiData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PresenceData_PresenceActivityData_PresenceActivityEmojiData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PresenceData_PresenceActivityData_PresenceActivityEmojiData) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

type PresenceData_PresenceActivityData_PresenceActivityPartyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrentSize uint64 `protobuf:"varint,2,opt,name=current_size,json=currentSize,proto3" json:"current_size,omitempty"`
	MaxSize     uint64 `protobuf:"varint,3,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *PresenceData_PresenceActivityData_PresenceActivityPartyData) Reset() {
	*x = PresenceData_PresenceActivityData_PresenceActivityPartyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceData_PresenceActivityData_PresenceActivityPartyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceData_PresenceActivityData_PresenceActivityPartyData) ProtoMessage() {}

func (x *PresenceData_PresenceActivityData_PresenceActivityPartyData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceData_PresenceActivityData_PresenceActivityPartyData.ProtoReflect.Descriptor instead.
func (*PresenceData_PresenceActivityData_PresenceActivityPartyData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{11, 1, 2}
}

func (x *PresenceData_PresenceActivityData_PresenceActivityPartyData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PresenceData_PresenceActivityData_PresenceActivityPartyData) GetCurrentSize() uint64 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

func (x *PresenceData_PresenceActivityData_PresenceActivityPartyData) GetMaxSize() uint64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type PresenceData_PresenceActivityData_PresenceActivityAssetsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeImage string `protobuf:"bytes,1,opt,name=large_image,json=largeImage,proto3" json:"large_image,omitempty"`
	LargeText  string `protobuf:"bytes,2,opt,name=large_text,json=largeText,proto3" json:"large_text,omitempty"`
	SmallImage string `protobuf:"bytes,3,opt,name=small_image,json=smallImage,proto3" json:"small_image,omitempty"`
	SmallText  string `protobuf:"bytes,4,opt,name=small_text,json=smallText,proto3" json:"small_text,omitempty"`
}

func (x *PresenceData_PresenceActivityData_PresenceActivityAssetsData) Reset() {
	*x = PresenceData_PresenceActivityData_PresenceActivityAssetsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceData_PresenceActivityData_PresenceActivityAssetsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceData_PresenceActivityData_PresenceActivityAssetsData) ProtoMessage() {}

func (x *PresenceData_PresenceActivityData_PresenceActivityAssetsData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceData_PresenceActivityData_PresenceActivityAssetsData.ProtoReflect.Descriptor instead.
func (*PresenceData_PresenceActivityData_PresenceActivityAssetsData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{11, 1, 3}
}

func (x *PresenceData_PresenceActivityData_PresenceActivityAssetsData) GetLargeImage() string {
	if x != nil {
		return x.LargeImage
	}
	return ""
}

func (x *PresenceData_PresenceActivityData_PresenceActivityAssetsData) GetLargeText() string {
	if x != nil {
		return x.LargeText
	}
	return ""
}

func (x *PresenceData_PresenceActivityData_PresenceActivityAssetsData) GetSmallImage() string {
	if x != nil {
		return x.SmallImage
	}
	return ""
}

func (x *PresenceData_PresenceActivityData_PresenceActivityAssetsData) GetSmallText() string {
	if x != nil {
		return x.SmallText
	}
	return ""
}

type PresenceData_PresenceActivityData_PresenceActivitySecretsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Join     string `protobuf:"bytes,1,opt,name=join,proto3" json:"join,omitempty"`
	Spectate string `protobuf:"bytes,2,opt,name=spectate,proto3" json:"spectate,omitempty"`
	Match    string `protobuf:"bytes,3,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *PresenceData_PresenceActivityData_PresenceActivitySecretsData) Reset() {
	*x = PresenceData_PresenceActivityData_PresenceActivitySecretsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_model_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceData_PresenceActivityData_PresenceActivitySecretsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceData_PresenceActivityData_PresenceActivitySecretsData) ProtoMessage() {}

func (x *PresenceData_PresenceActivityData_PresenceActivitySecretsData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_model_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceData_PresenceActivityData_PresenceActivitySecretsData.ProtoReflect.Descriptor instead.
func (*PresenceData_PresenceActivityData_PresenceActivitySecretsData) Descriptor() ([]byte, []int) {
	return file_discord_v1_model_proto_rawDescGZIP(), []int{11, 1, 4}
}

func (x *PresenceData_PresenceActivityData_PresenceActivitySecretsData) GetJoin() string {
	if x != nil {
		return x.Join
	}
	return ""
}

func (x *PresenceData_PresenceActivityData_PresenceActivitySecretsData) GetSpectate() string {
	if x != nil {
		return x.Spectate
	}
	return ""
}

func (x *PresenceData_PresenceActivityData_PresenceActivitySecretsData) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

var File_discord_v1_model_proto protoreflect.FileDescriptor

var file_discord_v1_model_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a,
	0x12, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x2c, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd8, 0x09,
	0x0a, 0x09, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x0e, 0x61, 0x66, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61,
	0x66, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6c, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x66, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x66, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x66, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x66, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x52, 0x0a, 0x11, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c,
	0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x61, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x76, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x72, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xf5, 0x07, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x08,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x73, 0x66, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x73, 0x66, 0x77,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x15, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x1a, 0xa2, 0x02, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x75, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x61, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x65,
	0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x04, 0x64, 0x65,
	0x6e, 0x79, 0x22, 0x43, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x4d, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x4d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x47,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x07,
	0x22, 0xa8, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x22, 0xe1, 0x02, 0x0a, 0x0a,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xfb, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x6f, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x68, 0x6f, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x02,
	0x0a, 0x09, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xad, 0x03, 0x0a, 0x0e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d,
	0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4d,
	0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x61, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x61, 0x66,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6d, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x66, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x61, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xa9, 0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c,
	0x61, 0x6b, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x10, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x5c, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a,
	0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49,
	0x64, 0x1a, 0xb8, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x82, 0x01, 0x0a,
	0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x8f, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6d, 0x65, 0x12,
	0x52, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x1a, 0x5e, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x1a, 0x97, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x7b, 0x0a,
	0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0x44, 0x0a, 0x13, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x1a, 0xa7, 0x01, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xed, 0x0d, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x60, 0x0a, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x69, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a,
	0x6d, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x1a, 0x57,
	0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x78, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x1a, 0x57, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x40, 0x0a, 0x18, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x7f, 0x0a, 0x16,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x1a, 0x59, 0x0a,
	0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x60, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x49, 0x43,
	0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x49, 0x46,
	0x56, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x06, 0x22, 0xc3, 0x03, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x49, 0x50, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x43, 0x49, 0x50,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x43, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x49, 0x4e, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x47, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x09, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55,
	0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x31, 0x10, 0x0a, 0x12, 0x2a, 0x0a,
	0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x47, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x32, 0x10, 0x0b, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x45,
	0x52, 0x5f, 0x33, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x0d, 0x12, 0x20, 0x0a,
	0x1c, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x44, 0x49, 0x53, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0f, 0x12,
	0x1f, 0x0a, 0x1b, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x10,
	0x22, 0xb1, 0x0e, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x59, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x18, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x65, 0x62, 0x1a, 0xe1, 0x0a, 0x0a, 0x14, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x78, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a,
	0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x69, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x6c, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x55, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x1a, 0x48, 0x0a, 0x1e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0x5f,
	0x0a, 0x19, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x1a,
	0x69, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x9c, 0x01, 0x0a, 0x1a, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x63, 0x0a, 0x1b, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x14,
	0x0a, 0x12, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x22, 0x9d, 0x02, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x31, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x52, 0x10, 0x01, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42,
	0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x0d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x50, 0x45, 0x47, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49,
	0x46, 0x10, 0x03, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x64, 0x0a, 0x20, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x62, 0x6f, 0x74, 0x2f, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f,
	0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_discord_v1_model_proto_rawDescOnce sync.Once
	file_discord_v1_model_proto_rawDescData = file_discord_v1_model_proto_rawDesc
)

func file_discord_v1_model_proto_rawDescGZIP() []byte {
	file_discord_v1_model_proto_rawDescOnce.Do(func() {
		file_discord_v1_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_discord_v1_model_proto_rawDescData)
	})
	return file_discord_v1_model_proto_rawDescData
}

var file_discord_v1_model_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_discord_v1_model_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_discord_v1_model_proto_goTypes = []interface{}{
	(ChannelData_ChannelType)(0), // 0: pylon.discord.v1.model.ChannelData.ChannelType
	(ChannelData_ChannelPermissionOverwriteData_ChannelPermissionOverwriteType)(0), // 1: pylon.discord.v1.model.ChannelData.ChannelPermissionOverwriteData.ChannelPermissionOverwriteType
	(MessageData_MessageType)(0),                                             // 2: pylon.discord.v1.model.MessageData.MessageType
	(MessageData_MessageEmbedData_MessageEmbedType)(0),                       // 3: pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedType
	(WebhookData_WebhookType)(0),                                             // 4: pylon.discord.v1.model.WebhookData.WebhookType
	(ImageData_ImageDataType)(0),                                             // 5: pylon.discord.v1.model.ImageData.ImageDataType
	(*SnowflakeValue)(nil),                                                   // 6: pylon.discord.v1.model.SnowflakeValue
	(*SnowflakeListValue)(nil),                                               // 7: pylon.discord.v1.model.SnowflakeListValue
	(*PermissionsValue)(nil),                                                 // 8: pylon.discord.v1.model.PermissionsValue
	(*GuildData)(nil),                                                        // 9: pylon.discord.v1.model.GuildData
	(*ChannelData)(nil),                                                      // 10: pylon.discord.v1.model.ChannelData
	(*UserData)(nil),                                                         // 11: pylon.discord.v1.model.UserData
	(*MemberData)(nil),                                                       // 12: pylon.discord.v1.model.MemberData
	(*RoleData)(nil),                                                         // 13: pylon.discord.v1.model.RoleData
	(*EmojiData)(nil),                                                        // 14: pylon.discord.v1.model.EmojiData
	(*VoiceStateData)(nil),                                                   // 15: pylon.discord.v1.model.VoiceStateData
	(*MessageData)(nil),                                                      // 16: pylon.discord.v1.model.MessageData
	(*PresenceData)(nil),                                                     // 17: pylon.discord.v1.model.PresenceData
	(*WebhookData)(nil),                                                      // 18: pylon.discord.v1.model.WebhookData
	(*InviteData)(nil),                                                       // 19: pylon.discord.v1.model.InviteData
	(*GuildBanData)(nil),                                                     // 20: pylon.discord.v1.model.GuildBanData
	(*ImageData)(nil),                                                        // 21: pylon.discord.v1.model.ImageData
	(*ChannelData_ChannelPermissionOverwriteData)(nil),                       // 22: pylon.discord.v1.model.ChannelData.ChannelPermissionOverwriteData
	(*MessageData_MessageAttachmentData)(nil),                                // 23: pylon.discord.v1.model.MessageData.MessageAttachmentData
	(*MessageData_MessageMentionData)(nil),                                   // 24: pylon.discord.v1.model.MessageData.MessageMentionData
	(*MessageData_MessageReactionData)(nil),                                  // 25: pylon.discord.v1.model.MessageData.MessageReactionData
	(*MessageData_MessageReactionEmojiData)(nil),                             // 26: pylon.discord.v1.model.MessageData.MessageReactionEmojiData
	(*MessageData_MessageApplicationData)(nil),                               // 27: pylon.discord.v1.model.MessageData.MessageApplicationData
	(*MessageData_MessageReferenceData)(nil),                                 // 28: pylon.discord.v1.model.MessageData.MessageReferenceData
	(*MessageData_MessageActivityData)(nil),                                  // 29: pylon.discord.v1.model.MessageData.MessageActivityData
	(*MessageData_MessageMentionChannelData)(nil),                            // 30: pylon.discord.v1.model.MessageData.MessageMentionChannelData
	(*MessageData_MessageEmbedData)(nil),                                     // 31: pylon.discord.v1.model.MessageData.MessageEmbedData
	(*MessageData_MessageEmbedData_MessageEmbedFooterData)(nil),              // 32: pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedFooterData
	(*MessageData_MessageEmbedData_MessageEmbedImageData)(nil),               // 33: pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedImageData
	(*MessageData_MessageEmbedData_MessageEmbedThumbnailData)(nil),           // 34: pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedThumbnailData
	(*MessageData_MessageEmbedData_MessageEmbedVideoData)(nil),               // 35: pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedVideoData
	(*MessageData_MessageEmbedData_MessageEmbedProviderData)(nil),            // 36: pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedProviderData
	(*MessageData_MessageEmbedData_MessageEmbedAuthorData)(nil),              // 37: pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedAuthorData
	(*MessageData_MessageEmbedData_MessageEmbedFieldData)(nil),               // 38: pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedFieldData
	(*PresenceData_PresenceClientStatusData)(nil),                            // 39: pylon.discord.v1.model.PresenceData.PresenceClientStatusData
	(*PresenceData_PresenceActivityData)(nil),                                // 40: pylon.discord.v1.model.PresenceData.PresenceActivityData
	(*PresenceData_PresenceActivityData_PresenceActivityTimestampsData)(nil), // 41: pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivityTimestampsData
	(*PresenceData_PresenceActivityData_PresenceActivityEmojiData)(nil),      // 42: pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivityEmojiData
	(*PresenceData_PresenceActivityData_PresenceActivityPartyData)(nil),      // 43: pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivityPartyData
	(*PresenceData_PresenceActivityData_PresenceActivityAssetsData)(nil),     // 44: pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivityAssetsData
	(*PresenceData_PresenceActivityData_PresenceActivitySecretsData)(nil),    // 45: pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivitySecretsData
	(*wrappers.StringValue)(nil),                                             // 46: google.protobuf.StringValue
	(*timestamp.Timestamp)(nil),                                              // 47: google.protobuf.Timestamp
}
var file_discord_v1_model_proto_depIdxs = []int32{
	46, // 0: pylon.discord.v1.model.GuildData.icon:type_name -> google.protobuf.StringValue
	6,  // 1: pylon.discord.v1.model.GuildData.afk_channel_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	47, // 2: pylon.discord.v1.model.GuildData.joined_at:type_name -> google.protobuf.Timestamp
	46, // 3: pylon.discord.v1.model.GuildData.splash:type_name -> google.protobuf.StringValue
	46, // 4: pylon.discord.v1.model.GuildData.discovery_splash:type_name -> google.protobuf.StringValue
	6,  // 5: pylon.discord.v1.model.GuildData.widget_channel_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	6,  // 6: pylon.discord.v1.model.GuildData.system_channel_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	46, // 7: pylon.discord.v1.model.GuildData.vanity_url_code:type_name -> google.protobuf.StringValue
	46, // 8: pylon.discord.v1.model.GuildData.description:type_name -> google.protobuf.StringValue
	46, // 9: pylon.discord.v1.model.GuildData.banner:type_name -> google.protobuf.StringValue
	6,  // 10: pylon.discord.v1.model.ChannelData.guild_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	46, // 11: pylon.discord.v1.model.ChannelData.topic:type_name -> google.protobuf.StringValue
	0,  // 12: pylon.discord.v1.model.ChannelData.type:type_name -> pylon.discord.v1.model.ChannelData.ChannelType
	6,  // 13: pylon.discord.v1.model.ChannelData.parent_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	22, // 14: pylon.discord.v1.model.ChannelData.permission_overwrites:type_name -> pylon.discord.v1.model.ChannelData.ChannelPermissionOverwriteData
	46, // 15: pylon.discord.v1.model.UserData.avatar:type_name -> google.protobuf.StringValue
	11, // 16: pylon.discord.v1.model.MemberData.user:type_name -> pylon.discord.v1.model.UserData
	46, // 17: pylon.discord.v1.model.MemberData.nick:type_name -> google.protobuf.StringValue
	47, // 18: pylon.discord.v1.model.MemberData.joined_at:type_name -> google.protobuf.Timestamp
	47, // 19: pylon.discord.v1.model.MemberData.premium_since:type_name -> google.protobuf.Timestamp
	12, // 20: pylon.discord.v1.model.VoiceStateData.member:type_name -> pylon.discord.v1.model.MemberData
	6,  // 21: pylon.discord.v1.model.VoiceStateData.channel_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	46, // 22: pylon.discord.v1.model.VoiceStateData.session_id:type_name -> google.protobuf.StringValue
	6,  // 23: pylon.discord.v1.model.MessageData.guild_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	47, // 24: pylon.discord.v1.model.MessageData.timestamp:type_name -> google.protobuf.Timestamp
	47, // 25: pylon.discord.v1.model.MessageData.edited_timestamp:type_name -> google.protobuf.Timestamp
	7,  // 26: pylon.discord.v1.model.MessageData.mention_roles:type_name -> pylon.discord.v1.model.SnowflakeListValue
	23, // 27: pylon.discord.v1.model.MessageData.attachments:type_name -> pylon.discord.v1.model.MessageData.MessageAttachmentData
	31, // 28: pylon.discord.v1.model.MessageData.embeds:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData
	24, // 29: pylon.discord.v1.model.MessageData.mentions:type_name -> pylon.discord.v1.model.MessageData.MessageMentionData
	25, // 30: pylon.discord.v1.model.MessageData.reactions:type_name -> pylon.discord.v1.model.MessageData.MessageReactionData
	2,  // 31: pylon.discord.v1.model.MessageData.type:type_name -> pylon.discord.v1.model.MessageData.MessageType
	30, // 32: pylon.discord.v1.model.MessageData.mention_channels:type_name -> pylon.discord.v1.model.MessageData.MessageMentionChannelData
	29, // 33: pylon.discord.v1.model.MessageData.activity:type_name -> pylon.discord.v1.model.MessageData.MessageActivityData
	27, // 34: pylon.discord.v1.model.MessageData.application:type_name -> pylon.discord.v1.model.MessageData.MessageApplicationData
	28, // 35: pylon.discord.v1.model.MessageData.message_reference:type_name -> pylon.discord.v1.model.MessageData.MessageReferenceData
	11, // 36: pylon.discord.v1.model.MessageData.author:type_name -> pylon.discord.v1.model.UserData
	12, // 37: pylon.discord.v1.model.MessageData.member:type_name -> pylon.discord.v1.model.MemberData
	6,  // 38: pylon.discord.v1.model.MessageData.webhook_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	11, // 39: pylon.discord.v1.model.PresenceData.user:type_name -> pylon.discord.v1.model.UserData
	39, // 40: pylon.discord.v1.model.PresenceData.client_status:type_name -> pylon.discord.v1.model.PresenceData.PresenceClientStatusData
	40, // 41: pylon.discord.v1.model.PresenceData.activities:type_name -> pylon.discord.v1.model.PresenceData.PresenceActivityData
	4,  // 42: pylon.discord.v1.model.WebhookData.type:type_name -> pylon.discord.v1.model.WebhookData.WebhookType
	47, // 43: pylon.discord.v1.model.InviteData.created_at:type_name -> google.protobuf.Timestamp
	11, // 44: pylon.discord.v1.model.InviteData.inviter:type_name -> pylon.discord.v1.model.UserData
	11, // 45: pylon.discord.v1.model.GuildBanData.user:type_name -> pylon.discord.v1.model.UserData
	5,  // 46: pylon.discord.v1.model.ImageData.type:type_name -> pylon.discord.v1.model.ImageData.ImageDataType
	1,  // 47: pylon.discord.v1.model.ChannelData.ChannelPermissionOverwriteData.type:type_name -> pylon.discord.v1.model.ChannelData.ChannelPermissionOverwriteData.ChannelPermissionOverwriteType
	26, // 48: pylon.discord.v1.model.MessageData.MessageReactionData.emoji:type_name -> pylon.discord.v1.model.MessageData.MessageReactionEmojiData
	0,  // 49: pylon.discord.v1.model.MessageData.MessageMentionChannelData.type:type_name -> pylon.discord.v1.model.ChannelData.ChannelType
	3,  // 50: pylon.discord.v1.model.MessageData.MessageEmbedData.type:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedType
	47, // 51: pylon.discord.v1.model.MessageData.MessageEmbedData.timestamp:type_name -> google.protobuf.Timestamp
	32, // 52: pylon.discord.v1.model.MessageData.MessageEmbedData.footer:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedFooterData
	33, // 53: pylon.discord.v1.model.MessageData.MessageEmbedData.image:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedImageData
	34, // 54: pylon.discord.v1.model.MessageData.MessageEmbedData.thumbnail:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedThumbnailData
	35, // 55: pylon.discord.v1.model.MessageData.MessageEmbedData.video:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedVideoData
	36, // 56: pylon.discord.v1.model.MessageData.MessageEmbedData.provider:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedProviderData
	37, // 57: pylon.discord.v1.model.MessageData.MessageEmbedData.author:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedAuthorData
	38, // 58: pylon.discord.v1.model.MessageData.MessageEmbedData.fields:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData.MessageEmbedFieldData
	47, // 59: pylon.discord.v1.model.PresenceData.PresenceActivityData.created_at:type_name -> google.protobuf.Timestamp
	41, // 60: pylon.discord.v1.model.PresenceData.PresenceActivityData.timestamps:type_name -> pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivityTimestampsData
	42, // 61: pylon.discord.v1.model.PresenceData.PresenceActivityData.emoji:type_name -> pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivityEmojiData
	43, // 62: pylon.discord.v1.model.PresenceData.PresenceActivityData.party:type_name -> pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivityPartyData
	44, // 63: pylon.discord.v1.model.PresenceData.PresenceActivityData.assets:type_name -> pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivityAssetsData
	45, // 64: pylon.discord.v1.model.PresenceData.PresenceActivityData.secrets:type_name -> pylon.discord.v1.model.PresenceData.PresenceActivityData.PresenceActivitySecretsData
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_discord_v1_model_proto_init() }
func file_discord_v1_model_proto_init() {
	if File_discord_v1_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_discord_v1_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnowflakeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnowflakeListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionsValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmojiData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBanData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelData_ChannelPermissionOverwriteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageAttachmentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageMentionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageReactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageReactionEmojiData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageApplicationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageReferenceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageMentionChannelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageEmbedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageEmbedData_MessageEmbedFooterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageEmbedData_MessageEmbedImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageEmbedData_MessageEmbedThumbnailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageEmbedData_MessageEmbedVideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageEmbedData_MessageEmbedProviderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageEmbedData_MessageEmbedAuthorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData_MessageEmbedData_MessageEmbedFieldData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceData_PresenceClientStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceData_PresenceActivityData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceData_PresenceActivityData_PresenceActivityTimestampsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceData_PresenceActivityData_PresenceActivityEmojiData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceData_PresenceActivityData_PresenceActivityPartyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceData_PresenceActivityData_PresenceActivityAssetsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_model_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceData_PresenceActivityData_PresenceActivitySecretsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_discord_v1_model_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*PresenceData_User)(nil),
		(*PresenceData_UserId)(nil),
	}
	file_discord_v1_model_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ImageData_Base64)(nil),
		(*ImageData_Bytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_discord_v1_model_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_discord_v1_model_proto_goTypes,
		DependencyIndexes: file_discord_v1_model_proto_depIdxs,
		EnumInfos:         file_discord_v1_model_proto_enumTypes,
		MessageInfos:      file_discord_v1_model_proto_msgTypes,
	}.Build()
	File_discord_v1_model_proto = out.File
	file_discord_v1_model_proto_rawDesc = nil
	file_discord_v1_model_proto_goTypes = nil
	file_discord_v1_model_proto_depIdxs = nil
}
