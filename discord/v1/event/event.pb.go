// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: discord/v1/event.proto

package event

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	model "github.com/pylonbot/pylon-gateway-protobuf-go/discord/v1/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *EventEnvelope_HeaderData `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are assignable to EventData:
	//	*EventEnvelope_GuildCreateEvent
	//	*EventEnvelope_GuildUpdateEvent
	//	*EventEnvelope_GuildDeleteEvent
	//	*EventEnvelope_PresenceUpdateEvent
	//	*EventEnvelope_GuildMemberAddEvent
	//	*EventEnvelope_GuildMemberUpdateEvent
	//	*EventEnvelope_GuildMemberRemoveEvent
	//	*EventEnvelope_ChannelCreateEvent
	//	*EventEnvelope_ChannelUpdateEvent
	//	*EventEnvelope_ChannelDeleteEvent
	//	*EventEnvelope_ChannelPinsUpdateEvent
	//	*EventEnvelope_GuildRoleCreateEvent
	//	*EventEnvelope_GuildRoleUpdateEvent
	//	*EventEnvelope_GuildRoleDeleteEvent
	//	*EventEnvelope_MessageCreateEvent
	//	*EventEnvelope_MessageUpdateEvent
	//	*EventEnvelope_MessageDeleteEvent
	//	*EventEnvelope_MessageDeleteBulkEvent
	//	*EventEnvelope_MessageReactionAddEvent
	//	*EventEnvelope_MessageReactionRemoveEvent
	//	*EventEnvelope_MessageReactionRemoveAllEvent
	//	*EventEnvelope_MessageReactionRemoveEmojiEvent
	//	*EventEnvelope_TypingStartEvent
	//	*EventEnvelope_VoiceStateUpdateEvent
	//	*EventEnvelope_VoiceServerUpdateEvent
	//	*EventEnvelope_InviteCreateEvent
	//	*EventEnvelope_InviteDeleteEvent
	//	*EventEnvelope_GuildBanAddEvent
	//	*EventEnvelope_GuildBanRemoveEvent
	//	*EventEnvelope_GuildEmojisUpdateEvent
	//	*EventEnvelope_GuildIntegrationsUpdateEvent
	//	*EventEnvelope_WebhooksUpdateEvent
	//	*EventEnvelope_IntegrationCreateEvent
	//	*EventEnvelope_IntegrationUpdateEvent
	//	*EventEnvelope_IntegrationDeleteEvent
	//	*EventEnvelope_InteractionCreateEvent
	EventData isEventEnvelope_EventData `protobuf_oneof:"event_data"`
}

func (x *EventEnvelope) Reset() {
	*x = EventEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEnvelope) ProtoMessage() {}

func (x *EventEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEnvelope.ProtoReflect.Descriptor instead.
func (*EventEnvelope) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventEnvelope) GetHeader() *EventEnvelope_HeaderData {
	if x != nil {
		return x.Header
	}
	return nil
}

func (m *EventEnvelope) GetEventData() isEventEnvelope_EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

func (x *EventEnvelope) GetGuildCreateEvent() *GuildCreateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildCreateEvent); ok {
		return x.GuildCreateEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildUpdateEvent() *GuildUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildUpdateEvent); ok {
		return x.GuildUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildDeleteEvent() *GuildDeleteEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildDeleteEvent); ok {
		return x.GuildDeleteEvent
	}
	return nil
}

func (x *EventEnvelope) GetPresenceUpdateEvent() *PresenceUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_PresenceUpdateEvent); ok {
		return x.PresenceUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildMemberAddEvent() *GuildMemberAddEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildMemberAddEvent); ok {
		return x.GuildMemberAddEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildMemberUpdateEvent() *GuildMemberUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildMemberUpdateEvent); ok {
		return x.GuildMemberUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildMemberRemoveEvent() *GuildMemberRemoveEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildMemberRemoveEvent); ok {
		return x.GuildMemberRemoveEvent
	}
	return nil
}

func (x *EventEnvelope) GetChannelCreateEvent() *ChannelCreateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_ChannelCreateEvent); ok {
		return x.ChannelCreateEvent
	}
	return nil
}

func (x *EventEnvelope) GetChannelUpdateEvent() *ChannelUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_ChannelUpdateEvent); ok {
		return x.ChannelUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetChannelDeleteEvent() *ChannelDeleteEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_ChannelDeleteEvent); ok {
		return x.ChannelDeleteEvent
	}
	return nil
}

func (x *EventEnvelope) GetChannelPinsUpdateEvent() *ChannelPinsUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_ChannelPinsUpdateEvent); ok {
		return x.ChannelPinsUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildRoleCreateEvent() *GuildRoleCreateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildRoleCreateEvent); ok {
		return x.GuildRoleCreateEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildRoleUpdateEvent() *GuildRoleUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildRoleUpdateEvent); ok {
		return x.GuildRoleUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildRoleDeleteEvent() *GuildRoleDeleteEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildRoleDeleteEvent); ok {
		return x.GuildRoleDeleteEvent
	}
	return nil
}

func (x *EventEnvelope) GetMessageCreateEvent() *MessageCreateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_MessageCreateEvent); ok {
		return x.MessageCreateEvent
	}
	return nil
}

func (x *EventEnvelope) GetMessageUpdateEvent() *MessageUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_MessageUpdateEvent); ok {
		return x.MessageUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetMessageDeleteEvent() *MessageDeleteEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_MessageDeleteEvent); ok {
		return x.MessageDeleteEvent
	}
	return nil
}

func (x *EventEnvelope) GetMessageDeleteBulkEvent() *MessageDeleteBulkEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_MessageDeleteBulkEvent); ok {
		return x.MessageDeleteBulkEvent
	}
	return nil
}

func (x *EventEnvelope) GetMessageReactionAddEvent() *MessageReactionAddEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_MessageReactionAddEvent); ok {
		return x.MessageReactionAddEvent
	}
	return nil
}

func (x *EventEnvelope) GetMessageReactionRemoveEvent() *MessageReactionRemoveEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_MessageReactionRemoveEvent); ok {
		return x.MessageReactionRemoveEvent
	}
	return nil
}

func (x *EventEnvelope) GetMessageReactionRemoveAllEvent() *MessageReactionRemoveAllEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_MessageReactionRemoveAllEvent); ok {
		return x.MessageReactionRemoveAllEvent
	}
	return nil
}

func (x *EventEnvelope) GetMessageReactionRemoveEmojiEvent() *MessageReactionRemoveEmojiEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_MessageReactionRemoveEmojiEvent); ok {
		return x.MessageReactionRemoveEmojiEvent
	}
	return nil
}

func (x *EventEnvelope) GetTypingStartEvent() *TypingStartEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_TypingStartEvent); ok {
		return x.TypingStartEvent
	}
	return nil
}

func (x *EventEnvelope) GetVoiceStateUpdateEvent() *VoiceStateUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_VoiceStateUpdateEvent); ok {
		return x.VoiceStateUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetVoiceServerUpdateEvent() *VoiceServerUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_VoiceServerUpdateEvent); ok {
		return x.VoiceServerUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetInviteCreateEvent() *InviteCreateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_InviteCreateEvent); ok {
		return x.InviteCreateEvent
	}
	return nil
}

func (x *EventEnvelope) GetInviteDeleteEvent() *InviteDeleteEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_InviteDeleteEvent); ok {
		return x.InviteDeleteEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildBanAddEvent() *GuildBanAddEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildBanAddEvent); ok {
		return x.GuildBanAddEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildBanRemoveEvent() *GuildBanRemoveEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildBanRemoveEvent); ok {
		return x.GuildBanRemoveEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildEmojisUpdateEvent() *GuildEmojisUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildEmojisUpdateEvent); ok {
		return x.GuildEmojisUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetGuildIntegrationsUpdateEvent() *GuildIntegrationsUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_GuildIntegrationsUpdateEvent); ok {
		return x.GuildIntegrationsUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetWebhooksUpdateEvent() *WebhooksUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_WebhooksUpdateEvent); ok {
		return x.WebhooksUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetIntegrationCreateEvent() *IntegrationCreateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_IntegrationCreateEvent); ok {
		return x.IntegrationCreateEvent
	}
	return nil
}

func (x *EventEnvelope) GetIntegrationUpdateEvent() *IntegrationUpdateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_IntegrationUpdateEvent); ok {
		return x.IntegrationUpdateEvent
	}
	return nil
}

func (x *EventEnvelope) GetIntegrationDeleteEvent() *IntegrationDeleteEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_IntegrationDeleteEvent); ok {
		return x.IntegrationDeleteEvent
	}
	return nil
}

func (x *EventEnvelope) GetInteractionCreateEvent() *InteractionCreateEvent {
	if x, ok := x.GetEventData().(*EventEnvelope_InteractionCreateEvent); ok {
		return x.InteractionCreateEvent
	}
	return nil
}

type isEventEnvelope_EventData interface {
	isEventEnvelope_EventData()
}

type EventEnvelope_GuildCreateEvent struct {
	GuildCreateEvent *GuildCreateEvent `protobuf:"bytes,2,opt,name=guild_create_event,json=guildCreateEvent,proto3,oneof"`
}

type EventEnvelope_GuildUpdateEvent struct {
	GuildUpdateEvent *GuildUpdateEvent `protobuf:"bytes,3,opt,name=guild_update_event,json=guildUpdateEvent,proto3,oneof"`
}

type EventEnvelope_GuildDeleteEvent struct {
	GuildDeleteEvent *GuildDeleteEvent `protobuf:"bytes,4,opt,name=guild_delete_event,json=guildDeleteEvent,proto3,oneof"`
}

type EventEnvelope_PresenceUpdateEvent struct {
	PresenceUpdateEvent *PresenceUpdateEvent `protobuf:"bytes,5,opt,name=presence_update_event,json=presenceUpdateEvent,proto3,oneof"`
}

type EventEnvelope_GuildMemberAddEvent struct {
	GuildMemberAddEvent *GuildMemberAddEvent `protobuf:"bytes,6,opt,name=guild_member_add_event,json=guildMemberAddEvent,proto3,oneof"`
}

type EventEnvelope_GuildMemberUpdateEvent struct {
	GuildMemberUpdateEvent *GuildMemberUpdateEvent `protobuf:"bytes,7,opt,name=guild_member_update_event,json=guildMemberUpdateEvent,proto3,oneof"`
}

type EventEnvelope_GuildMemberRemoveEvent struct {
	GuildMemberRemoveEvent *GuildMemberRemoveEvent `protobuf:"bytes,8,opt,name=guild_member_remove_event,json=guildMemberRemoveEvent,proto3,oneof"`
}

type EventEnvelope_ChannelCreateEvent struct {
	ChannelCreateEvent *ChannelCreateEvent `protobuf:"bytes,9,opt,name=channel_create_event,json=channelCreateEvent,proto3,oneof"`
}

type EventEnvelope_ChannelUpdateEvent struct {
	ChannelUpdateEvent *ChannelUpdateEvent `protobuf:"bytes,10,opt,name=channel_update_event,json=channelUpdateEvent,proto3,oneof"`
}

type EventEnvelope_ChannelDeleteEvent struct {
	ChannelDeleteEvent *ChannelDeleteEvent `protobuf:"bytes,11,opt,name=channel_delete_event,json=channelDeleteEvent,proto3,oneof"`
}

type EventEnvelope_ChannelPinsUpdateEvent struct {
	ChannelPinsUpdateEvent *ChannelPinsUpdateEvent `protobuf:"bytes,12,opt,name=channel_pins_update_event,json=channelPinsUpdateEvent,proto3,oneof"`
}

type EventEnvelope_GuildRoleCreateEvent struct {
	GuildRoleCreateEvent *GuildRoleCreateEvent `protobuf:"bytes,13,opt,name=guild_role_create_event,json=guildRoleCreateEvent,proto3,oneof"`
}

type EventEnvelope_GuildRoleUpdateEvent struct {
	GuildRoleUpdateEvent *GuildRoleUpdateEvent `protobuf:"bytes,14,opt,name=guild_role_update_event,json=guildRoleUpdateEvent,proto3,oneof"`
}

type EventEnvelope_GuildRoleDeleteEvent struct {
	GuildRoleDeleteEvent *GuildRoleDeleteEvent `protobuf:"bytes,15,opt,name=guild_role_delete_event,json=guildRoleDeleteEvent,proto3,oneof"`
}

type EventEnvelope_MessageCreateEvent struct {
	MessageCreateEvent *MessageCreateEvent `protobuf:"bytes,16,opt,name=message_create_event,json=messageCreateEvent,proto3,oneof"`
}

type EventEnvelope_MessageUpdateEvent struct {
	MessageUpdateEvent *MessageUpdateEvent `protobuf:"bytes,17,opt,name=message_update_event,json=messageUpdateEvent,proto3,oneof"`
}

type EventEnvelope_MessageDeleteEvent struct {
	MessageDeleteEvent *MessageDeleteEvent `protobuf:"bytes,18,opt,name=message_delete_event,json=messageDeleteEvent,proto3,oneof"`
}

type EventEnvelope_MessageDeleteBulkEvent struct {
	MessageDeleteBulkEvent *MessageDeleteBulkEvent `protobuf:"bytes,19,opt,name=message_delete_bulk_event,json=messageDeleteBulkEvent,proto3,oneof"`
}

type EventEnvelope_MessageReactionAddEvent struct {
	MessageReactionAddEvent *MessageReactionAddEvent `protobuf:"bytes,20,opt,name=message_reaction_add_event,json=messageReactionAddEvent,proto3,oneof"`
}

type EventEnvelope_MessageReactionRemoveEvent struct {
	MessageReactionRemoveEvent *MessageReactionRemoveEvent `protobuf:"bytes,21,opt,name=message_reaction_remove_event,json=messageReactionRemoveEvent,proto3,oneof"`
}

type EventEnvelope_MessageReactionRemoveAllEvent struct {
	MessageReactionRemoveAllEvent *MessageReactionRemoveAllEvent `protobuf:"bytes,22,opt,name=message_reaction_remove_all_event,json=messageReactionRemoveAllEvent,proto3,oneof"`
}

type EventEnvelope_MessageReactionRemoveEmojiEvent struct {
	MessageReactionRemoveEmojiEvent *MessageReactionRemoveEmojiEvent `protobuf:"bytes,23,opt,name=message_reaction_remove_emoji_event,json=messageReactionRemoveEmojiEvent,proto3,oneof"`
}

type EventEnvelope_TypingStartEvent struct {
	TypingStartEvent *TypingStartEvent `protobuf:"bytes,24,opt,name=typing_start_event,json=typingStartEvent,proto3,oneof"`
}

type EventEnvelope_VoiceStateUpdateEvent struct {
	VoiceStateUpdateEvent *VoiceStateUpdateEvent `protobuf:"bytes,25,opt,name=voice_state_update_event,json=voiceStateUpdateEvent,proto3,oneof"`
}

type EventEnvelope_VoiceServerUpdateEvent struct {
	VoiceServerUpdateEvent *VoiceServerUpdateEvent `protobuf:"bytes,26,opt,name=voice_server_update_event,json=voiceServerUpdateEvent,proto3,oneof"`
}

type EventEnvelope_InviteCreateEvent struct {
	InviteCreateEvent *InviteCreateEvent `protobuf:"bytes,27,opt,name=invite_create_event,json=inviteCreateEvent,proto3,oneof"`
}

type EventEnvelope_InviteDeleteEvent struct {
	InviteDeleteEvent *InviteDeleteEvent `protobuf:"bytes,28,opt,name=invite_delete_event,json=inviteDeleteEvent,proto3,oneof"`
}

type EventEnvelope_GuildBanAddEvent struct {
	GuildBanAddEvent *GuildBanAddEvent `protobuf:"bytes,29,opt,name=guild_ban_add_event,json=guildBanAddEvent,proto3,oneof"`
}

type EventEnvelope_GuildBanRemoveEvent struct {
	GuildBanRemoveEvent *GuildBanRemoveEvent `protobuf:"bytes,30,opt,name=guild_ban_remove_event,json=guildBanRemoveEvent,proto3,oneof"`
}

type EventEnvelope_GuildEmojisUpdateEvent struct {
	GuildEmojisUpdateEvent *GuildEmojisUpdateEvent `protobuf:"bytes,31,opt,name=guild_emojis_update_event,json=guildEmojisUpdateEvent,proto3,oneof"`
}

type EventEnvelope_GuildIntegrationsUpdateEvent struct {
	GuildIntegrationsUpdateEvent *GuildIntegrationsUpdateEvent `protobuf:"bytes,32,opt,name=guild_integrations_update_event,json=guildIntegrationsUpdateEvent,proto3,oneof"`
}

type EventEnvelope_WebhooksUpdateEvent struct {
	WebhooksUpdateEvent *WebhooksUpdateEvent `protobuf:"bytes,33,opt,name=webhooks_update_event,json=webhooksUpdateEvent,proto3,oneof"`
}

type EventEnvelope_IntegrationCreateEvent struct {
	IntegrationCreateEvent *IntegrationCreateEvent `protobuf:"bytes,34,opt,name=integration_create_event,json=integrationCreateEvent,proto3,oneof"`
}

type EventEnvelope_IntegrationUpdateEvent struct {
	IntegrationUpdateEvent *IntegrationUpdateEvent `protobuf:"bytes,35,opt,name=integration_update_event,json=integrationUpdateEvent,proto3,oneof"`
}

type EventEnvelope_IntegrationDeleteEvent struct {
	IntegrationDeleteEvent *IntegrationDeleteEvent `protobuf:"bytes,36,opt,name=integration_delete_event,json=integrationDeleteEvent,proto3,oneof"`
}

type EventEnvelope_InteractionCreateEvent struct {
	InteractionCreateEvent *InteractionCreateEvent `protobuf:"bytes,37,opt,name=interaction_create_event,json=interactionCreateEvent,proto3,oneof"`
}

func (*EventEnvelope_GuildCreateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildDeleteEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_PresenceUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildMemberAddEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildMemberUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildMemberRemoveEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_ChannelCreateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_ChannelUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_ChannelDeleteEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_ChannelPinsUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildRoleCreateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildRoleUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildRoleDeleteEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_MessageCreateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_MessageUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_MessageDeleteEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_MessageDeleteBulkEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_MessageReactionAddEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_MessageReactionRemoveEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_MessageReactionRemoveAllEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_MessageReactionRemoveEmojiEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_TypingStartEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_VoiceStateUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_VoiceServerUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_InviteCreateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_InviteDeleteEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildBanAddEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildBanRemoveEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildEmojisUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_GuildIntegrationsUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_WebhooksUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_IntegrationCreateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_IntegrationUpdateEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_IntegrationDeleteEvent) isEventEnvelope_EventData() {}

func (*EventEnvelope_InteractionCreateEvent) isEventEnvelope_EventData() {}

type EventEnvelopeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *EventEnvelopeAck) Reset() {
	*x = EventEnvelopeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventEnvelopeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEnvelopeAck) ProtoMessage() {}

func (x *EventEnvelopeAck) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEnvelopeAck.ProtoReflect.Descriptor instead.
func (*EventEnvelopeAck) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventEnvelopeAck) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type EventScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BotId   uint64 `protobuf:"fixed64,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	GuildId uint64 `protobuf:"fixed64,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *EventScope) Reset() {
	*x = EventScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventScope) ProtoMessage() {}

func (x *EventScope) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventScope.ProtoReflect.Descriptor instead.
func (*EventScope) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *EventScope) GetBotId() uint64 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *EventScope) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type GuildCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope      `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *model.GuildData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildCreateEvent) Reset() {
	*x = GuildCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCreateEvent) ProtoMessage() {}

func (x *GuildCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCreateEvent.ProtoReflect.Descriptor instead.
func (*GuildCreateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{3}
}

func (x *GuildCreateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildCreateEvent) GetPayload() *model.GuildData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GuildUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            *EventScope      `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload          *model.GuildData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PreviouslyCached *model.GuildData `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *GuildUpdateEvent) Reset() {
	*x = GuildUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildUpdateEvent) ProtoMessage() {}

func (x *GuildUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildUpdateEvent.ProtoReflect.Descriptor instead.
func (*GuildUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{4}
}

func (x *GuildUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildUpdateEvent) GetPayload() *model.GuildData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GuildUpdateEvent) GetPreviouslyCached() *model.GuildData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type GuildDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope      `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *model.GuildData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildDeleteEvent) Reset() {
	*x = GuildDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildDeleteEvent) ProtoMessage() {}

func (x *GuildDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildDeleteEvent.ProtoReflect.Descriptor instead.
func (*GuildDeleteEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{5}
}

func (x *GuildDeleteEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildDeleteEvent) GetPayload() *model.GuildData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type PresenceUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            *EventScope         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload          *model.PresenceData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PreviouslyCached *model.PresenceData `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *PresenceUpdateEvent) Reset() {
	*x = PresenceUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceUpdateEvent) ProtoMessage() {}

func (x *PresenceUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceUpdateEvent.ProtoReflect.Descriptor instead.
func (*PresenceUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{6}
}

func (x *PresenceUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *PresenceUpdateEvent) GetPayload() *model.PresenceData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PresenceUpdateEvent) GetPreviouslyCached() *model.PresenceData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type GuildMemberAddEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope       `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *model.MemberData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildMemberAddEvent) Reset() {
	*x = GuildMemberAddEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberAddEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberAddEvent) ProtoMessage() {}

func (x *GuildMemberAddEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberAddEvent.ProtoReflect.Descriptor instead.
func (*GuildMemberAddEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{7}
}

func (x *GuildMemberAddEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildMemberAddEvent) GetPayload() *model.MemberData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GuildMemberUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            *EventScope       `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload          *model.MemberData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PreviouslyCached *model.MemberData `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *GuildMemberUpdateEvent) Reset() {
	*x = GuildMemberUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberUpdateEvent) ProtoMessage() {}

func (x *GuildMemberUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberUpdateEvent.ProtoReflect.Descriptor instead.
func (*GuildMemberUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{8}
}

func (x *GuildMemberUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildMemberUpdateEvent) GetPayload() *model.MemberData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GuildMemberUpdateEvent) GetPreviouslyCached() *model.MemberData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type GuildMemberRemoveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope       `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *model.MemberData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildMemberRemoveEvent) Reset() {
	*x = GuildMemberRemoveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberRemoveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberRemoveEvent) ProtoMessage() {}

func (x *GuildMemberRemoveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberRemoveEvent.ProtoReflect.Descriptor instead.
func (*GuildMemberRemoveEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{9}
}

func (x *GuildMemberRemoveEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildMemberRemoveEvent) GetPayload() *model.MemberData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ChannelCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope        `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *model.ChannelData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ChannelCreateEvent) Reset() {
	*x = ChannelCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCreateEvent) ProtoMessage() {}

func (x *ChannelCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCreateEvent.ProtoReflect.Descriptor instead.
func (*ChannelCreateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{10}
}

func (x *ChannelCreateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ChannelCreateEvent) GetPayload() *model.ChannelData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ChannelUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            *EventScope        `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload          *model.ChannelData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PreviouslyCached *model.ChannelData `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *ChannelUpdateEvent) Reset() {
	*x = ChannelUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateEvent) ProtoMessage() {}

func (x *ChannelUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateEvent.ProtoReflect.Descriptor instead.
func (*ChannelUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ChannelUpdateEvent) GetPayload() *model.ChannelData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ChannelUpdateEvent) GetPreviouslyCached() *model.ChannelData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type ChannelDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope        `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *model.ChannelData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ChannelDeleteEvent) Reset() {
	*x = ChannelDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDeleteEvent) ProtoMessage() {}

func (x *ChannelDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDeleteEvent.ProtoReflect.Descriptor instead.
func (*ChannelDeleteEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelDeleteEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ChannelDeleteEvent) GetPayload() *model.ChannelData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ChannelPinsUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *ChannelPinsUpdateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ChannelPinsUpdateEvent) Reset() {
	*x = ChannelPinsUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPinsUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPinsUpdateEvent) ProtoMessage() {}

func (x *ChannelPinsUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPinsUpdateEvent.ProtoReflect.Descriptor instead.
func (*ChannelPinsUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelPinsUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *ChannelPinsUpdateEvent) GetPayload() *ChannelPinsUpdateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GuildRoleCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope     `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *model.RoleData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildRoleCreateEvent) Reset() {
	*x = GuildRoleCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRoleCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRoleCreateEvent) ProtoMessage() {}

func (x *GuildRoleCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRoleCreateEvent.ProtoReflect.Descriptor instead.
func (*GuildRoleCreateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{14}
}

func (x *GuildRoleCreateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildRoleCreateEvent) GetPayload() *model.RoleData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GuildRoleUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            *EventScope     `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload          *model.RoleData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PreviouslyCached *model.RoleData `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *GuildRoleUpdateEvent) Reset() {
	*x = GuildRoleUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRoleUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRoleUpdateEvent) ProtoMessage() {}

func (x *GuildRoleUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRoleUpdateEvent.ProtoReflect.Descriptor instead.
func (*GuildRoleUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{15}
}

func (x *GuildRoleUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildRoleUpdateEvent) GetPayload() *model.RoleData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GuildRoleUpdateEvent) GetPreviouslyCached() *model.RoleData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type GuildRoleDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope     `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *model.RoleData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildRoleDeleteEvent) Reset() {
	*x = GuildRoleDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRoleDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRoleDeleteEvent) ProtoMessage() {}

func (x *GuildRoleDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRoleDeleteEvent.ProtoReflect.Descriptor instead.
func (*GuildRoleDeleteEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{16}
}

func (x *GuildRoleDeleteEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildRoleDeleteEvent) GetPayload() *model.RoleData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessageCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope       *EventScope        `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	MessageData *model.MessageData `protobuf:"bytes,2,opt,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
}

func (x *MessageCreateEvent) Reset() {
	*x = MessageCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCreateEvent) ProtoMessage() {}

func (x *MessageCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCreateEvent.ProtoReflect.Descriptor instead.
func (*MessageCreateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{17}
}

func (x *MessageCreateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MessageCreateEvent) GetMessageData() *model.MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

type MessageUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope *EventScope `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	// Types that are assignable to Payload:
	//	*MessageUpdateEvent_Cached
	//	*MessageUpdateEvent_Raw
	Payload          isMessageUpdateEvent_Payload `protobuf_oneof:"payload"`
	PreviouslyCached *model.MessageData           `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *MessageUpdateEvent) Reset() {
	*x = MessageUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent) ProtoMessage() {}

func (x *MessageUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18}
}

func (x *MessageUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (m *MessageUpdateEvent) GetPayload() isMessageUpdateEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *MessageUpdateEvent) GetCached() *model.MessageData {
	if x, ok := x.GetPayload().(*MessageUpdateEvent_Cached); ok {
		return x.Cached
	}
	return nil
}

func (x *MessageUpdateEvent) GetRaw() *MessageUpdateEvent_PayloadData {
	if x, ok := x.GetPayload().(*MessageUpdateEvent_Raw); ok {
		return x.Raw
	}
	return nil
}

func (x *MessageUpdateEvent) GetPreviouslyCached() *model.MessageData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type isMessageUpdateEvent_Payload interface {
	isMessageUpdateEvent_Payload()
}

type MessageUpdateEvent_Cached struct {
	Cached *model.MessageData `protobuf:"bytes,2,opt,name=cached,proto3,oneof"`
}

type MessageUpdateEvent_Raw struct {
	Raw *MessageUpdateEvent_PayloadData `protobuf:"bytes,4,opt,name=raw,proto3,oneof"`
}

func (*MessageUpdateEvent_Cached) isMessageUpdateEvent_Payload() {}

func (*MessageUpdateEvent_Raw) isMessageUpdateEvent_Payload() {}

type MessageDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            *EventScope                     `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload          *MessageDeleteEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PreviouslyCached *model.MessageData              `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *MessageDeleteEvent) Reset() {
	*x = MessageDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteEvent) ProtoMessage() {}

func (x *MessageDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteEvent.ProtoReflect.Descriptor instead.
func (*MessageDeleteEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{19}
}

func (x *MessageDeleteEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MessageDeleteEvent) GetPayload() *MessageDeleteEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MessageDeleteEvent) GetPreviouslyCached() *model.MessageData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type MessageDeleteBulkEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *MessageDeleteBulkEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MessageDeleteBulkEvent) Reset() {
	*x = MessageDeleteBulkEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteBulkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteBulkEvent) ProtoMessage() {}

func (x *MessageDeleteBulkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteBulkEvent.ProtoReflect.Descriptor instead.
func (*MessageDeleteBulkEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{20}
}

func (x *MessageDeleteBulkEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MessageDeleteBulkEvent) GetPayload() *MessageDeleteBulkEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessageReactionAddEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                          `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *MessageReactionAddEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MessageReactionAddEvent) Reset() {
	*x = MessageReactionAddEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionAddEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionAddEvent) ProtoMessage() {}

func (x *MessageReactionAddEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionAddEvent.ProtoReflect.Descriptor instead.
func (*MessageReactionAddEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{21}
}

func (x *MessageReactionAddEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MessageReactionAddEvent) GetPayload() *MessageReactionAddEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessageReactionRemoveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                             `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *MessageReactionRemoveEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MessageReactionRemoveEvent) Reset() {
	*x = MessageReactionRemoveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemoveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemoveEvent) ProtoMessage() {}

func (x *MessageReactionRemoveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemoveEvent.ProtoReflect.Descriptor instead.
func (*MessageReactionRemoveEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{22}
}

func (x *MessageReactionRemoveEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MessageReactionRemoveEvent) GetPayload() *MessageReactionRemoveEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessageReactionRemoveAllEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                                `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *MessageReactionRemoveAllEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MessageReactionRemoveAllEvent) Reset() {
	*x = MessageReactionRemoveAllEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemoveAllEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemoveAllEvent) ProtoMessage() {}

func (x *MessageReactionRemoveAllEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemoveAllEvent.ProtoReflect.Descriptor instead.
func (*MessageReactionRemoveAllEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{23}
}

func (x *MessageReactionRemoveAllEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MessageReactionRemoveAllEvent) GetPayload() *MessageReactionRemoveAllEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessageReactionRemoveEmojiEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                                  `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *MessageReactionRemoveEmojiEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MessageReactionRemoveEmojiEvent) Reset() {
	*x = MessageReactionRemoveEmojiEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemoveEmojiEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemoveEmojiEvent) ProtoMessage() {}

func (x *MessageReactionRemoveEmojiEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemoveEmojiEvent.ProtoReflect.Descriptor instead.
func (*MessageReactionRemoveEmojiEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{24}
}

func (x *MessageReactionRemoveEmojiEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *MessageReactionRemoveEmojiEvent) GetPayload() *MessageReactionRemoveEmojiEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TypingStartEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *TypingStartEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *TypingStartEvent) Reset() {
	*x = TypingStartEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypingStartEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypingStartEvent) ProtoMessage() {}

func (x *TypingStartEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypingStartEvent.ProtoReflect.Descriptor instead.
func (*TypingStartEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{25}
}

func (x *TypingStartEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *TypingStartEvent) GetPayload() *TypingStartEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type VoiceStateUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            *EventScope           `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload          *model.VoiceStateData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PreviouslyCached *model.VoiceStateData `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *VoiceStateUpdateEvent) Reset() {
	*x = VoiceStateUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceStateUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceStateUpdateEvent) ProtoMessage() {}

func (x *VoiceStateUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceStateUpdateEvent.ProtoReflect.Descriptor instead.
func (*VoiceStateUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{26}
}

func (x *VoiceStateUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *VoiceStateUpdateEvent) GetPayload() *model.VoiceStateData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *VoiceStateUpdateEvent) GetPreviouslyCached() *model.VoiceStateData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type VoiceServerUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *VoiceServerUpdateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *VoiceServerUpdateEvent) Reset() {
	*x = VoiceServerUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceServerUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceServerUpdateEvent) ProtoMessage() {}

func (x *VoiceServerUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceServerUpdateEvent.ProtoReflect.Descriptor instead.
func (*VoiceServerUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{27}
}

func (x *VoiceServerUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *VoiceServerUpdateEvent) GetPayload() *VoiceServerUpdateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type InviteCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                    `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *InviteCreateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *InviteCreateEvent) Reset() {
	*x = InviteCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteCreateEvent) ProtoMessage() {}

func (x *InviteCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteCreateEvent.ProtoReflect.Descriptor instead.
func (*InviteCreateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{28}
}

func (x *InviteCreateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *InviteCreateEvent) GetPayload() *InviteCreateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type InviteDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                    `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *InviteDeleteEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *InviteDeleteEvent) Reset() {
	*x = InviteDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteDeleteEvent) ProtoMessage() {}

func (x *InviteDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteDeleteEvent.ProtoReflect.Descriptor instead.
func (*InviteDeleteEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{29}
}

func (x *InviteDeleteEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *InviteDeleteEvent) GetPayload() *InviteDeleteEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GuildBanAddEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *GuildBanAddEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildBanAddEvent) Reset() {
	*x = GuildBanAddEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBanAddEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBanAddEvent) ProtoMessage() {}

func (x *GuildBanAddEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBanAddEvent.ProtoReflect.Descriptor instead.
func (*GuildBanAddEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{30}
}

func (x *GuildBanAddEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildBanAddEvent) GetPayload() *GuildBanAddEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GuildBanRemoveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                      `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *GuildBanRemoveEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildBanRemoveEvent) Reset() {
	*x = GuildBanRemoveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBanRemoveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBanRemoveEvent) ProtoMessage() {}

func (x *GuildBanRemoveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBanRemoveEvent.ProtoReflect.Descriptor instead.
func (*GuildBanRemoveEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{31}
}

func (x *GuildBanRemoveEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildBanRemoveEvent) GetPayload() *GuildBanRemoveEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GuildEmojisUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope            *EventScope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload          *GuildEmojisUpdateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	PreviouslyCached *GuildEmojisUpdateEvent_PayloadData `protobuf:"bytes,3,opt,name=previously_cached,json=previouslyCached,proto3" json:"previously_cached,omitempty"`
}

func (x *GuildEmojisUpdateEvent) Reset() {
	*x = GuildEmojisUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildEmojisUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildEmojisUpdateEvent) ProtoMessage() {}

func (x *GuildEmojisUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildEmojisUpdateEvent.ProtoReflect.Descriptor instead.
func (*GuildEmojisUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{32}
}

func (x *GuildEmojisUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildEmojisUpdateEvent) GetPayload() *GuildEmojisUpdateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *GuildEmojisUpdateEvent) GetPreviouslyCached() *GuildEmojisUpdateEvent_PayloadData {
	if x != nil {
		return x.PreviouslyCached
	}
	return nil
}

type GuildIntegrationsUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                               `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *GuildIntegrationsUpdateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *GuildIntegrationsUpdateEvent) Reset() {
	*x = GuildIntegrationsUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildIntegrationsUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildIntegrationsUpdateEvent) ProtoMessage() {}

func (x *GuildIntegrationsUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildIntegrationsUpdateEvent.ProtoReflect.Descriptor instead.
func (*GuildIntegrationsUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{33}
}

func (x *GuildIntegrationsUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GuildIntegrationsUpdateEvent) GetPayload() *GuildIntegrationsUpdateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type WebhooksUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                      `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *WebhooksUpdateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *WebhooksUpdateEvent) Reset() {
	*x = WebhooksUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhooksUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhooksUpdateEvent) ProtoMessage() {}

func (x *WebhooksUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhooksUpdateEvent.ProtoReflect.Descriptor instead.
func (*WebhooksUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{34}
}

func (x *WebhooksUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *WebhooksUpdateEvent) GetPayload() *WebhooksUpdateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type IntegrationCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *IntegrationCreateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *IntegrationCreateEvent) Reset() {
	*x = IntegrationCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationCreateEvent) ProtoMessage() {}

func (x *IntegrationCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationCreateEvent.ProtoReflect.Descriptor instead.
func (*IntegrationCreateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{35}
}

func (x *IntegrationCreateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *IntegrationCreateEvent) GetPayload() *IntegrationCreateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type IntegrationUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *IntegrationUpdateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *IntegrationUpdateEvent) Reset() {
	*x = IntegrationUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationUpdateEvent) ProtoMessage() {}

func (x *IntegrationUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationUpdateEvent.ProtoReflect.Descriptor instead.
func (*IntegrationUpdateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{36}
}

func (x *IntegrationUpdateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *IntegrationUpdateEvent) GetPayload() *IntegrationUpdateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type IntegrationDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *IntegrationDeleteEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *IntegrationDeleteEvent) Reset() {
	*x = IntegrationDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationDeleteEvent) ProtoMessage() {}

func (x *IntegrationDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationDeleteEvent.ProtoReflect.Descriptor instead.
func (*IntegrationDeleteEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{37}
}

func (x *IntegrationDeleteEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *IntegrationDeleteEvent) GetPayload() *IntegrationDeleteEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type InteractionCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *EventScope                         `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Payload *InteractionCreateEvent_PayloadData `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *InteractionCreateEvent) Reset() {
	*x = InteractionCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateEvent) ProtoMessage() {}

func (x *InteractionCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateEvent.ProtoReflect.Descriptor instead.
func (*InteractionCreateEvent) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{38}
}

func (x *InteractionCreateEvent) GetScope() *EventScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *InteractionCreateEvent) GetPayload() *InteractionCreateEvent_PayloadData {
	if x != nil {
		return x.Payload
	}
	return nil
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{39}
}

type InteractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InteractionResponse) Reset() {
	*x = InteractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionResponse) ProtoMessage() {}

func (x *InteractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionResponse.ProtoReflect.Descriptor instead.
func (*InteractionResponse) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{40}
}

type EventEnvelope_HeaderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *EventEnvelope_HeaderData) Reset() {
	*x = EventEnvelope_HeaderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventEnvelope_HeaderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEnvelope_HeaderData) ProtoMessage() {}

func (x *EventEnvelope_HeaderData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEnvelope_HeaderData.ProtoReflect.Descriptor instead.
func (*EventEnvelope_HeaderData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EventEnvelope_HeaderData) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

type ChannelPinsUpdateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId        uint64               `protobuf:"fixed64,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId          uint64               `protobuf:"fixed64,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	LastPinTimestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_pin_timestamp,json=lastPinTimestamp,proto3" json:"last_pin_timestamp,omitempty"`
}

func (x *ChannelPinsUpdateEvent_PayloadData) Reset() {
	*x = ChannelPinsUpdateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPinsUpdateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPinsUpdateEvent_PayloadData) ProtoMessage() {}

func (x *ChannelPinsUpdateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPinsUpdateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*ChannelPinsUpdateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ChannelPinsUpdateEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelPinsUpdateEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *ChannelPinsUpdateEvent_PayloadData) GetLastPinTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.LastPinTimestamp
	}
	return nil
}

type MessageUpdateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint64                                                         `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId        uint64                                                         `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId          *model.SnowflakeValue                                          `protobuf:"bytes,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Content          *wrappers.StringValue                                          `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	EditedTimestamp  *timestamp.Timestamp                                           `protobuf:"bytes,5,opt,name=edited_timestamp,json=editedTimestamp,proto3" json:"edited_timestamp,omitempty"`
	MentionRoles     *model.SnowflakeListValue                                      `protobuf:"bytes,6,opt,name=mention_roles,json=mentionRoles,proto3" json:"mention_roles,omitempty"`
	Tts              *wrappers.BoolValue                                            `protobuf:"bytes,7,opt,name=tts,proto3" json:"tts,omitempty"`
	MentionEveryone  *wrappers.BoolValue                                            `protobuf:"bytes,8,opt,name=mention_everyone,json=mentionEveryone,proto3" json:"mention_everyone,omitempty"`
	Attachments      *MessageUpdateEvent_PayloadData_MessageAttachmentListValue     `protobuf:"bytes,9,opt,name=attachments,proto3" json:"attachments,omitempty"`
	Embeds           *MessageUpdateEvent_PayloadData_MessageEmbedListValue          `protobuf:"bytes,10,opt,name=embeds,proto3" json:"embeds,omitempty"`
	Mentions         *MessageUpdateEvent_PayloadData_MessageMentionListValue        `protobuf:"bytes,11,opt,name=mentions,proto3" json:"mentions,omitempty"`
	Reactions        *MessageUpdateEvent_PayloadData_MessageReactionListValue       `protobuf:"bytes,12,opt,name=reactions,proto3" json:"reactions,omitempty"`
	Pinned           *wrappers.BoolValue                                            `protobuf:"bytes,13,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Type             *MessageUpdateEvent_PayloadData_MessageTypeValue               `protobuf:"bytes,14,opt,name=type,proto3" json:"type,omitempty"`
	MentionChannels  *MessageUpdateEvent_PayloadData_MessageMentionChannelListValue `protobuf:"bytes,15,opt,name=mention_channels,json=mentionChannels,proto3" json:"mention_channels,omitempty"`
	Flags            *wrappers.UInt32Value                                          `protobuf:"bytes,16,opt,name=flags,proto3" json:"flags,omitempty"`
	Activity         *MessageUpdateEvent_PayloadData_MessageActivityValue           `protobuf:"bytes,17,opt,name=activity,proto3" json:"activity,omitempty"`
	Application      *MessageUpdateEvent_PayloadData_MessageApplicationValue        `protobuf:"bytes,18,opt,name=application,proto3" json:"application,omitempty"`
	MessageReference *MessageUpdateEvent_PayloadData_MessageReferenceValue          `protobuf:"bytes,19,opt,name=message_reference,json=messageReference,proto3" json:"message_reference,omitempty"`
	Author           *MessageUpdateEvent_PayloadData_MessageAuthorValue             `protobuf:"bytes,20,opt,name=author,proto3" json:"author,omitempty"`
	Member           *MessageUpdateEvent_PayloadData_MessageMemberValue             `protobuf:"bytes,21,opt,name=member,proto3" json:"member,omitempty"`
	WebhookId        *model.SnowflakeValue                                          `protobuf:"bytes,22,opt,name=webhook_id,json=webhookId,proto3" json:"webhook_id,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData) Reset() {
	*x = MessageUpdateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0}
}

func (x *MessageUpdateEvent_PayloadData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageUpdateEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageUpdateEvent_PayloadData) GetGuildId() *model.SnowflakeValue {
	if x != nil {
		return x.GuildId
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetContent() *wrappers.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetEditedTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EditedTimestamp
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetMentionRoles() *model.SnowflakeListValue {
	if x != nil {
		return x.MentionRoles
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetTts() *wrappers.BoolValue {
	if x != nil {
		return x.Tts
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetMentionEveryone() *wrappers.BoolValue {
	if x != nil {
		return x.MentionEveryone
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetAttachments() *MessageUpdateEvent_PayloadData_MessageAttachmentListValue {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetEmbeds() *MessageUpdateEvent_PayloadData_MessageEmbedListValue {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetMentions() *MessageUpdateEvent_PayloadData_MessageMentionListValue {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetReactions() *MessageUpdateEvent_PayloadData_MessageReactionListValue {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetPinned() *wrappers.BoolValue {
	if x != nil {
		return x.Pinned
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetType() *MessageUpdateEvent_PayloadData_MessageTypeValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetMentionChannels() *MessageUpdateEvent_PayloadData_MessageMentionChannelListValue {
	if x != nil {
		return x.MentionChannels
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetFlags() *wrappers.UInt32Value {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetActivity() *MessageUpdateEvent_PayloadData_MessageActivityValue {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetApplication() *MessageUpdateEvent_PayloadData_MessageApplicationValue {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetMessageReference() *MessageUpdateEvent_PayloadData_MessageReferenceValue {
	if x != nil {
		return x.MessageReference
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetAuthor() *MessageUpdateEvent_PayloadData_MessageAuthorValue {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetMember() *MessageUpdateEvent_PayloadData_MessageMemberValue {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MessageUpdateEvent_PayloadData) GetWebhookId() *model.SnowflakeValue {
	if x != nil {
		return x.WebhookId
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageAttachmentListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*model.MessageData_MessageAttachmentData `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageAttachmentListValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageAttachmentListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageAttachmentListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageAttachmentListValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageAttachmentListValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageAttachmentListValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageAttachmentListValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 0}
}

func (x *MessageUpdateEvent_PayloadData_MessageAttachmentListValue) GetValues() []*model.MessageData_MessageAttachmentData {
	if x != nil {
		return x.Values
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageEmbedListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*model.MessageData_MessageEmbedData `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageEmbedListValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageEmbedListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageEmbedListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageEmbedListValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageEmbedListValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageEmbedListValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageEmbedListValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 1}
}

func (x *MessageUpdateEvent_PayloadData_MessageEmbedListValue) GetValues() []*model.MessageData_MessageEmbedData {
	if x != nil {
		return x.Values
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageMentionListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*model.MessageData_MessageMentionData `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageMentionListValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageMentionListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageMentionListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageMentionListValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageMentionListValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageMentionListValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageMentionListValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 2}
}

func (x *MessageUpdateEvent_PayloadData_MessageMentionListValue) GetValues() []*model.MessageData_MessageMentionData {
	if x != nil {
		return x.Values
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageReactionListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*model.MessageData_MessageReactionData `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageReactionListValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageReactionListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageReactionListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageReactionListValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageReactionListValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageReactionListValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageReactionListValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 3}
}

func (x *MessageUpdateEvent_PayloadData_MessageReactionListValue) GetValues() []*model.MessageData_MessageReactionData {
	if x != nil {
		return x.Values
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageTypeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value model.MessageData_MessageType `protobuf:"varint,1,opt,name=value,proto3,enum=pylon.discord.v1.model.MessageData_MessageType" json:"value,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageTypeValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageTypeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageTypeValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageTypeValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageTypeValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 4}
}

func (x *MessageUpdateEvent_PayloadData_MessageTypeValue) GetValue() model.MessageData_MessageType {
	if x != nil {
		return x.Value
	}
	return model.MessageData_UNKNOWN
}

type MessageUpdateEvent_PayloadData_MessageMentionChannelListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*model.MessageData_MessageMentionChannelData `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageMentionChannelListValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageMentionChannelListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageMentionChannelListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageMentionChannelListValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageMentionChannelListValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageMentionChannelListValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageMentionChannelListValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 5}
}

func (x *MessageUpdateEvent_PayloadData_MessageMentionChannelListValue) GetValues() []*model.MessageData_MessageMentionChannelData {
	if x != nil {
		return x.Values
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageActivityValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *model.MessageData_MessageActivityData `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageActivityValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageActivityValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageActivityValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageActivityValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageActivityValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageActivityValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageActivityValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 6}
}

func (x *MessageUpdateEvent_PayloadData_MessageActivityValue) GetValue() *model.MessageData_MessageActivityData {
	if x != nil {
		return x.Value
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageApplicationValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *model.MessageData_MessageApplicationData `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageApplicationValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageApplicationValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageApplicationValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageApplicationValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageApplicationValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageApplicationValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageApplicationValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 7}
}

func (x *MessageUpdateEvent_PayloadData_MessageApplicationValue) GetValue() *model.MessageData_MessageApplicationData {
	if x != nil {
		return x.Value
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageReferenceValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *model.MessageData_MessageReferenceData `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageReferenceValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageReferenceValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageReferenceValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageReferenceValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageReferenceValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageReferenceValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageReferenceValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 8}
}

func (x *MessageUpdateEvent_PayloadData_MessageReferenceValue) GetValue() *model.MessageData_MessageReferenceData {
	if x != nil {
		return x.Value
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageAuthorValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *model.UserData `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageAuthorValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageAuthorValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageAuthorValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageAuthorValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageAuthorValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageAuthorValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageAuthorValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 9}
}

func (x *MessageUpdateEvent_PayloadData_MessageAuthorValue) GetValue() *model.UserData {
	if x != nil {
		return x.Value
	}
	return nil
}

type MessageUpdateEvent_PayloadData_MessageMemberValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *model.MemberData `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MessageUpdateEvent_PayloadData_MessageMemberValue) Reset() {
	*x = MessageUpdateEvent_PayloadData_MessageMemberValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateEvent_PayloadData_MessageMemberValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateEvent_PayloadData_MessageMemberValue) ProtoMessage() {}

func (x *MessageUpdateEvent_PayloadData_MessageMemberValue) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateEvent_PayloadData_MessageMemberValue.ProtoReflect.Descriptor instead.
func (*MessageUpdateEvent_PayloadData_MessageMemberValue) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{18, 0, 10}
}

func (x *MessageUpdateEvent_PayloadData_MessageMemberValue) GetValue() *model.MemberData {
	if x != nil {
		return x.Value
	}
	return nil
}

type MessageDeleteEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId uint64 `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId   uint64 `protobuf:"fixed64,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *MessageDeleteEvent_PayloadData) Reset() {
	*x = MessageDeleteEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteEvent_PayloadData) ProtoMessage() {}

func (x *MessageDeleteEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*MessageDeleteEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{19, 0}
}

func (x *MessageDeleteEvent_PayloadData) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageDeleteEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageDeleteEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type MessageDeleteBulkEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []uint64 `protobuf:"fixed64,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ChannelId uint64   `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	GuildId   uint64   `protobuf:"fixed64,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *MessageDeleteBulkEvent_PayloadData) Reset() {
	*x = MessageDeleteBulkEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteBulkEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteBulkEvent_PayloadData) ProtoMessage() {}

func (x *MessageDeleteBulkEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteBulkEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*MessageDeleteBulkEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{20, 0}
}

func (x *MessageDeleteBulkEvent_PayloadData) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MessageDeleteBulkEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageDeleteBulkEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type MessageReactionAddEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64                                      `protobuf:"fixed64,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId uint64                                      `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId uint64                                      `protobuf:"fixed64,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GuildId   uint64                                      `protobuf:"fixed64,4,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Emoji     *model.MessageData_MessageReactionEmojiData `protobuf:"bytes,6,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *MessageReactionAddEvent_PayloadData) Reset() {
	*x = MessageReactionAddEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionAddEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionAddEvent_PayloadData) ProtoMessage() {}

func (x *MessageReactionAddEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionAddEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*MessageReactionAddEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{21, 0}
}

func (x *MessageReactionAddEvent_PayloadData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageReactionAddEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageReactionAddEvent_PayloadData) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MessageReactionAddEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *MessageReactionAddEvent_PayloadData) GetEmoji() *model.MessageData_MessageReactionEmojiData {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type MessageReactionRemoveEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64                                      `protobuf:"fixed64,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId uint64                                      `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId uint64                                      `protobuf:"fixed64,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GuildId   uint64                                      `protobuf:"fixed64,4,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Emoji     *model.MessageData_MessageReactionEmojiData `protobuf:"bytes,5,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *MessageReactionRemoveEvent_PayloadData) Reset() {
	*x = MessageReactionRemoveEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemoveEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemoveEvent_PayloadData) ProtoMessage() {}

func (x *MessageReactionRemoveEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemoveEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*MessageReactionRemoveEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{22, 0}
}

func (x *MessageReactionRemoveEvent_PayloadData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MessageReactionRemoveEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageReactionRemoveEvent_PayloadData) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MessageReactionRemoveEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *MessageReactionRemoveEvent_PayloadData) GetEmoji() *model.MessageData_MessageReactionEmojiData {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type MessageReactionRemoveAllEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64 `protobuf:"fixed64,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId uint64 `protobuf:"fixed64,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GuildId   uint64 `protobuf:"fixed64,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *MessageReactionRemoveAllEvent_PayloadData) Reset() {
	*x = MessageReactionRemoveAllEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemoveAllEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemoveAllEvent_PayloadData) ProtoMessage() {}

func (x *MessageReactionRemoveAllEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemoveAllEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*MessageReactionRemoveAllEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{23, 0}
}

func (x *MessageReactionRemoveAllEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageReactionRemoveAllEvent_PayloadData) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MessageReactionRemoveAllEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type MessageReactionRemoveEmojiEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64                                      `protobuf:"fixed64,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId uint64                                      `protobuf:"fixed64,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GuildId   uint64                                      `protobuf:"fixed64,3,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Emoji     *model.MessageData_MessageReactionEmojiData `protobuf:"bytes,4,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *MessageReactionRemoveEmojiEvent_PayloadData) Reset() {
	*x = MessageReactionRemoveEmojiEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemoveEmojiEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemoveEmojiEvent_PayloadData) ProtoMessage() {}

func (x *MessageReactionRemoveEmojiEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemoveEmojiEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*MessageReactionRemoveEmojiEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{24, 0}
}

func (x *MessageReactionRemoveEmojiEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *MessageReactionRemoveEmojiEvent_PayloadData) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MessageReactionRemoveEmojiEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *MessageReactionRemoveEmojiEvent_PayloadData) GetEmoji() *model.MessageData_MessageReactionEmojiData {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type TypingStartEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId uint64               `protobuf:"fixed64,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId    uint64               `protobuf:"fixed64,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Member    *model.MemberData    `protobuf:"bytes,4,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *TypingStartEvent_PayloadData) Reset() {
	*x = TypingStartEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypingStartEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypingStartEvent_PayloadData) ProtoMessage() {}

func (x *TypingStartEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypingStartEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*TypingStartEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{25, 0}
}

func (x *TypingStartEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *TypingStartEvent_PayloadData) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TypingStartEvent_PayloadData) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TypingStartEvent_PayloadData) GetMember() *model.MemberData {
	if x != nil {
		return x.Member
	}
	return nil
}

type VoiceServerUpdateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId  uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *VoiceServerUpdateEvent_PayloadData) Reset() {
	*x = VoiceServerUpdateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceServerUpdateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceServerUpdateEvent_PayloadData) ProtoMessage() {}

func (x *VoiceServerUpdateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceServerUpdateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*VoiceServerUpdateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{27, 0}
}

func (x *VoiceServerUpdateEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *VoiceServerUpdateEvent_PayloadData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VoiceServerUpdateEvent_PayloadData) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type InviteCreateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId      uint64                                `protobuf:"fixed64,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Code           string                                `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt      *timestamp.Timestamp                  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	GuildId        *model.SnowflakeValue                 `protobuf:"bytes,4,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Inviter        *model.UserData                       `protobuf:"bytes,5,opt,name=inviter,proto3" json:"inviter,omitempty"`
	MaxAge         uint64                                `protobuf:"varint,6,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	MaxUses        uint64                                `protobuf:"varint,7,opt,name=max_uses,json=maxUses,proto3" json:"max_uses,omitempty"`
	TargetUser     *model.UserData                       `protobuf:"bytes,8,opt,name=target_user,json=targetUser,proto3" json:"target_user,omitempty"`
	TargetUserType model.InviteData_InviteTargetUserType `protobuf:"varint,9,opt,name=target_user_type,json=targetUserType,proto3,enum=pylon.discord.v1.model.InviteData_InviteTargetUserType" json:"target_user_type,omitempty"`
	Temporary      bool                                  `protobuf:"varint,10,opt,name=temporary,proto3" json:"temporary,omitempty"`
	Uses           uint64                                `protobuf:"varint,11,opt,name=uses,proto3" json:"uses,omitempty"`
}

func (x *InviteCreateEvent_PayloadData) Reset() {
	*x = InviteCreateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteCreateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteCreateEvent_PayloadData) ProtoMessage() {}

func (x *InviteCreateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteCreateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*InviteCreateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{28, 0}
}

func (x *InviteCreateEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InviteCreateEvent_PayloadData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InviteCreateEvent_PayloadData) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *InviteCreateEvent_PayloadData) GetGuildId() *model.SnowflakeValue {
	if x != nil {
		return x.GuildId
	}
	return nil
}

func (x *InviteCreateEvent_PayloadData) GetInviter() *model.UserData {
	if x != nil {
		return x.Inviter
	}
	return nil
}

func (x *InviteCreateEvent_PayloadData) GetMaxAge() uint64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *InviteCreateEvent_PayloadData) GetMaxUses() uint64 {
	if x != nil {
		return x.MaxUses
	}
	return 0
}

func (x *InviteCreateEvent_PayloadData) GetTargetUser() *model.UserData {
	if x != nil {
		return x.TargetUser
	}
	return nil
}

func (x *InviteCreateEvent_PayloadData) GetTargetUserType() model.InviteData_InviteTargetUserType {
	if x != nil {
		return x.TargetUserType
	}
	return model.InviteData_UNKNOWN
}

func (x *InviteCreateEvent_PayloadData) GetTemporary() bool {
	if x != nil {
		return x.Temporary
	}
	return false
}

func (x *InviteCreateEvent_PayloadData) GetUses() uint64 {
	if x != nil {
		return x.Uses
	}
	return 0
}

type InviteDeleteEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId   uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ChannelId uint64 `protobuf:"fixed64,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *InviteDeleteEvent_PayloadData) Reset() {
	*x = InviteDeleteEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteDeleteEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteDeleteEvent_PayloadData) ProtoMessage() {}

func (x *InviteDeleteEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteDeleteEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*InviteDeleteEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{29, 0}
}

func (x *InviteDeleteEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *InviteDeleteEvent_PayloadData) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InviteDeleteEvent_PayloadData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GuildBanAddEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64          `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	User    *model.UserData `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GuildBanAddEvent_PayloadData) Reset() {
	*x = GuildBanAddEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBanAddEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBanAddEvent_PayloadData) ProtoMessage() {}

func (x *GuildBanAddEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBanAddEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*GuildBanAddEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{30, 0}
}

func (x *GuildBanAddEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *GuildBanAddEvent_PayloadData) GetUser() *model.UserData {
	if x != nil {
		return x.User
	}
	return nil
}

type GuildBanRemoveEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64          `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	User    *model.UserData `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GuildBanRemoveEvent_PayloadData) Reset() {
	*x = GuildBanRemoveEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBanRemoveEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBanRemoveEvent_PayloadData) ProtoMessage() {}

func (x *GuildBanRemoveEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBanRemoveEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*GuildBanRemoveEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{31, 0}
}

func (x *GuildBanRemoveEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *GuildBanRemoveEvent_PayloadData) GetUser() *model.UserData {
	if x != nil {
		return x.User
	}
	return nil
}

type GuildEmojisUpdateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64             `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Emojis  []*model.EmojiData `protobuf:"bytes,2,rep,name=emojis,proto3" json:"emojis,omitempty"`
}

func (x *GuildEmojisUpdateEvent_PayloadData) Reset() {
	*x = GuildEmojisUpdateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildEmojisUpdateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildEmojisUpdateEvent_PayloadData) ProtoMessage() {}

func (x *GuildEmojisUpdateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildEmojisUpdateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*GuildEmojisUpdateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{32, 0}
}

func (x *GuildEmojisUpdateEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *GuildEmojisUpdateEvent_PayloadData) GetEmojis() []*model.EmojiData {
	if x != nil {
		return x.Emojis
	}
	return nil
}

type GuildIntegrationsUpdateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *GuildIntegrationsUpdateEvent_PayloadData) Reset() {
	*x = GuildIntegrationsUpdateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildIntegrationsUpdateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildIntegrationsUpdateEvent_PayloadData) ProtoMessage() {}

func (x *GuildIntegrationsUpdateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildIntegrationsUpdateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*GuildIntegrationsUpdateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{33, 0}
}

func (x *GuildIntegrationsUpdateEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type WebhooksUpdateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *WebhooksUpdateEvent_PayloadData) Reset() {
	*x = WebhooksUpdateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhooksUpdateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhooksUpdateEvent_PayloadData) ProtoMessage() {}

func (x *WebhooksUpdateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhooksUpdateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*WebhooksUpdateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{34, 0}
}

func (x *WebhooksUpdateEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type IntegrationCreateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *IntegrationCreateEvent_PayloadData) Reset() {
	*x = IntegrationCreateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationCreateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationCreateEvent_PayloadData) ProtoMessage() {}

func (x *IntegrationCreateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationCreateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*IntegrationCreateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{35, 0}
}

func (x *IntegrationCreateEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type IntegrationUpdateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *IntegrationUpdateEvent_PayloadData) Reset() {
	*x = IntegrationUpdateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationUpdateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationUpdateEvent_PayloadData) ProtoMessage() {}

func (x *IntegrationUpdateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationUpdateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*IntegrationUpdateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{36, 0}
}

func (x *IntegrationUpdateEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type IntegrationDeleteEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *IntegrationDeleteEvent_PayloadData) Reset() {
	*x = IntegrationDeleteEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationDeleteEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationDeleteEvent_PayloadData) ProtoMessage() {}

func (x *IntegrationDeleteEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationDeleteEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*IntegrationDeleteEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{37, 0}
}

func (x *IntegrationDeleteEvent_PayloadData) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

type InteractionCreateEvent_PayloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId int64 `protobuf:"fixed64,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *InteractionCreateEvent_PayloadData) Reset() {
	*x = InteractionCreateEvent_PayloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_v1_event_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateEvent_PayloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateEvent_PayloadData) ProtoMessage() {}

func (x *InteractionCreateEvent_PayloadData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_v1_event_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateEvent_PayloadData.ProtoReflect.Descriptor instead.
func (*InteractionCreateEvent_PayloadData) Descriptor() ([]byte, []int) {
	return file_discord_v1_event_proto_rawDescGZIP(), []int{38, 0}
}

func (x *InteractionCreateEvent_PayloadData) GetGuildId() int64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

var File_discord_v1_event_proto protoreflect.FileDescriptor

var file_discord_v1_event_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x1a, 0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x1e, 0x0a, 0x0d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x58, 0x0a, 0x12, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x16, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x16, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x70, 0x69, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x69, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x65, 0x0a, 0x17, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x17, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x65, 0x0a, 0x17, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x6c, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a,
	0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x87, 0x01, 0x0a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x74, 0x79,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x18, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6b,
	0x0a, 0x19, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x13, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62,
	0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x42, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x62, 0x0a, 0x16, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42,
	0x61, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x7d, 0x0a, 0x1f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x1c, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x61, 0x0a, 0x15, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x6a, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x18, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x1a, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x73, 0x65, 0x71, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x24, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x22, 0x46, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22,
	0x89, 0x01, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x10,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c,
	0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x6c, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x16, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x90, 0x01, 0x0a,
	0x16, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x8d, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xdf, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x50, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xc4, 0x02, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x99, 0x01, 0x0a,
	0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x14, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4d, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc5, 0x19,
	0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x03, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x6c, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x8c, 0x17, 0x0a, 0x0b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e,
	0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x10, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x4f, 0x0a, 0x0d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x74, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x12, 0x73, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x64, 0x0a, 0x06, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x73, 0x12, 0x6a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x6d, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x70, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x61,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x61, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x1a, 0x6f, 0x0a, 0x1a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x15,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x6b,
	0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x59, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x45, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x77, 0x0a, 0x1e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x65, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6b, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x67, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4c, 0x0a, 0x12,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4e, 0x0a, 0x12, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x6c, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x63, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22,
	0x87, 0x02, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x6c, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x5d, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x90, 0x03, 0x0a, 0x17, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x55, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xe3, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0x96, 0x03, 0x0a,
	0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0xe3, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x52, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0xaa, 0x02, 0x0a, 0x1d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x5b, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x72,
	0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x5d, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0xc6, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0xe2, 0x02, 0x0a, 0x10, 0x54, 0x79, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xc3, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3a, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe8, 0x01,
	0x0a, 0x15, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c,
	0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x6c, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x54, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x5e, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0xab, 0x05, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x8a, 0x04, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79, 0x6c,
	0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x73, 0x22, 0x83, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x4f, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x63, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x42, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x62, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x86, 0x02, 0x0a, 0x13, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x62, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0xfa, 0x02, 0x0a, 0x16, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x67,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c,
	0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x67, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45,
	0x6d, 0x6f, 0x6a, 0x69, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73,
	0x22, 0xe2, 0x01, 0x0a, 0x1c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x2c, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x2c, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x54, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x2c, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79,
	0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x2c, 0x0a, 0x0b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x54, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x2c, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x2c,
	0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a,
	0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x64, 0x0a, 0x20, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x79, 0x6c, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x62, 0x6f, 0x74, 0x2f,
	0x70, 0x79, 0x6c, 0x6f, 0x6e, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x67, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_discord_v1_event_proto_rawDescOnce sync.Once
	file_discord_v1_event_proto_rawDescData = file_discord_v1_event_proto_rawDesc
)

func file_discord_v1_event_proto_rawDescGZIP() []byte {
	file_discord_v1_event_proto_rawDescOnce.Do(func() {
		file_discord_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_discord_v1_event_proto_rawDescData)
	})
	return file_discord_v1_event_proto_rawDescData
}

var file_discord_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_discord_v1_event_proto_goTypes = []interface{}{
	(*EventEnvelope)(nil),                                                 // 0: pylon.discord.v1.event.EventEnvelope
	(*EventEnvelopeAck)(nil),                                              // 1: pylon.discord.v1.event.EventEnvelopeAck
	(*EventScope)(nil),                                                    // 2: pylon.discord.v1.event.EventScope
	(*GuildCreateEvent)(nil),                                              // 3: pylon.discord.v1.event.GuildCreateEvent
	(*GuildUpdateEvent)(nil),                                              // 4: pylon.discord.v1.event.GuildUpdateEvent
	(*GuildDeleteEvent)(nil),                                              // 5: pylon.discord.v1.event.GuildDeleteEvent
	(*PresenceUpdateEvent)(nil),                                           // 6: pylon.discord.v1.event.PresenceUpdateEvent
	(*GuildMemberAddEvent)(nil),                                           // 7: pylon.discord.v1.event.GuildMemberAddEvent
	(*GuildMemberUpdateEvent)(nil),                                        // 8: pylon.discord.v1.event.GuildMemberUpdateEvent
	(*GuildMemberRemoveEvent)(nil),                                        // 9: pylon.discord.v1.event.GuildMemberRemoveEvent
	(*ChannelCreateEvent)(nil),                                            // 10: pylon.discord.v1.event.ChannelCreateEvent
	(*ChannelUpdateEvent)(nil),                                            // 11: pylon.discord.v1.event.ChannelUpdateEvent
	(*ChannelDeleteEvent)(nil),                                            // 12: pylon.discord.v1.event.ChannelDeleteEvent
	(*ChannelPinsUpdateEvent)(nil),                                        // 13: pylon.discord.v1.event.ChannelPinsUpdateEvent
	(*GuildRoleCreateEvent)(nil),                                          // 14: pylon.discord.v1.event.GuildRoleCreateEvent
	(*GuildRoleUpdateEvent)(nil),                                          // 15: pylon.discord.v1.event.GuildRoleUpdateEvent
	(*GuildRoleDeleteEvent)(nil),                                          // 16: pylon.discord.v1.event.GuildRoleDeleteEvent
	(*MessageCreateEvent)(nil),                                            // 17: pylon.discord.v1.event.MessageCreateEvent
	(*MessageUpdateEvent)(nil),                                            // 18: pylon.discord.v1.event.MessageUpdateEvent
	(*MessageDeleteEvent)(nil),                                            // 19: pylon.discord.v1.event.MessageDeleteEvent
	(*MessageDeleteBulkEvent)(nil),                                        // 20: pylon.discord.v1.event.MessageDeleteBulkEvent
	(*MessageReactionAddEvent)(nil),                                       // 21: pylon.discord.v1.event.MessageReactionAddEvent
	(*MessageReactionRemoveEvent)(nil),                                    // 22: pylon.discord.v1.event.MessageReactionRemoveEvent
	(*MessageReactionRemoveAllEvent)(nil),                                 // 23: pylon.discord.v1.event.MessageReactionRemoveAllEvent
	(*MessageReactionRemoveEmojiEvent)(nil),                               // 24: pylon.discord.v1.event.MessageReactionRemoveEmojiEvent
	(*TypingStartEvent)(nil),                                              // 25: pylon.discord.v1.event.TypingStartEvent
	(*VoiceStateUpdateEvent)(nil),                                         // 26: pylon.discord.v1.event.VoiceStateUpdateEvent
	(*VoiceServerUpdateEvent)(nil),                                        // 27: pylon.discord.v1.event.VoiceServerUpdateEvent
	(*InviteCreateEvent)(nil),                                             // 28: pylon.discord.v1.event.InviteCreateEvent
	(*InviteDeleteEvent)(nil),                                             // 29: pylon.discord.v1.event.InviteDeleteEvent
	(*GuildBanAddEvent)(nil),                                              // 30: pylon.discord.v1.event.GuildBanAddEvent
	(*GuildBanRemoveEvent)(nil),                                           // 31: pylon.discord.v1.event.GuildBanRemoveEvent
	(*GuildEmojisUpdateEvent)(nil),                                        // 32: pylon.discord.v1.event.GuildEmojisUpdateEvent
	(*GuildIntegrationsUpdateEvent)(nil),                                  // 33: pylon.discord.v1.event.GuildIntegrationsUpdateEvent
	(*WebhooksUpdateEvent)(nil),                                           // 34: pylon.discord.v1.event.WebhooksUpdateEvent
	(*IntegrationCreateEvent)(nil),                                        // 35: pylon.discord.v1.event.IntegrationCreateEvent
	(*IntegrationUpdateEvent)(nil),                                        // 36: pylon.discord.v1.event.IntegrationUpdateEvent
	(*IntegrationDeleteEvent)(nil),                                        // 37: pylon.discord.v1.event.IntegrationDeleteEvent
	(*InteractionCreateEvent)(nil),                                        // 38: pylon.discord.v1.event.InteractionCreateEvent
	(*EventResponse)(nil),                                                 // 39: pylon.discord.v1.event.EventResponse
	(*InteractionResponse)(nil),                                           // 40: pylon.discord.v1.event.InteractionResponse
	(*EventEnvelope_HeaderData)(nil),                                      // 41: pylon.discord.v1.event.EventEnvelope.HeaderData
	(*ChannelPinsUpdateEvent_PayloadData)(nil),                            // 42: pylon.discord.v1.event.ChannelPinsUpdateEvent.PayloadData
	(*MessageUpdateEvent_PayloadData)(nil),                                // 43: pylon.discord.v1.event.MessageUpdateEvent.PayloadData
	(*MessageUpdateEvent_PayloadData_MessageAttachmentListValue)(nil),     // 44: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageAttachmentListValue
	(*MessageUpdateEvent_PayloadData_MessageEmbedListValue)(nil),          // 45: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageEmbedListValue
	(*MessageUpdateEvent_PayloadData_MessageMentionListValue)(nil),        // 46: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMentionListValue
	(*MessageUpdateEvent_PayloadData_MessageReactionListValue)(nil),       // 47: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageReactionListValue
	(*MessageUpdateEvent_PayloadData_MessageTypeValue)(nil),               // 48: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageTypeValue
	(*MessageUpdateEvent_PayloadData_MessageMentionChannelListValue)(nil), // 49: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMentionChannelListValue
	(*MessageUpdateEvent_PayloadData_MessageActivityValue)(nil),           // 50: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageActivityValue
	(*MessageUpdateEvent_PayloadData_MessageApplicationValue)(nil),        // 51: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageApplicationValue
	(*MessageUpdateEvent_PayloadData_MessageReferenceValue)(nil),          // 52: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageReferenceValue
	(*MessageUpdateEvent_PayloadData_MessageAuthorValue)(nil),             // 53: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageAuthorValue
	(*MessageUpdateEvent_PayloadData_MessageMemberValue)(nil),             // 54: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMemberValue
	(*MessageDeleteEvent_PayloadData)(nil),                                // 55: pylon.discord.v1.event.MessageDeleteEvent.PayloadData
	(*MessageDeleteBulkEvent_PayloadData)(nil),                            // 56: pylon.discord.v1.event.MessageDeleteBulkEvent.PayloadData
	(*MessageReactionAddEvent_PayloadData)(nil),                           // 57: pylon.discord.v1.event.MessageReactionAddEvent.PayloadData
	(*MessageReactionRemoveEvent_PayloadData)(nil),                        // 58: pylon.discord.v1.event.MessageReactionRemoveEvent.PayloadData
	(*MessageReactionRemoveAllEvent_PayloadData)(nil),                     // 59: pylon.discord.v1.event.MessageReactionRemoveAllEvent.PayloadData
	(*MessageReactionRemoveEmojiEvent_PayloadData)(nil),                   // 60: pylon.discord.v1.event.MessageReactionRemoveEmojiEvent.PayloadData
	(*TypingStartEvent_PayloadData)(nil),                                  // 61: pylon.discord.v1.event.TypingStartEvent.PayloadData
	(*VoiceServerUpdateEvent_PayloadData)(nil),                            // 62: pylon.discord.v1.event.VoiceServerUpdateEvent.PayloadData
	(*InviteCreateEvent_PayloadData)(nil),                                 // 63: pylon.discord.v1.event.InviteCreateEvent.PayloadData
	(*InviteDeleteEvent_PayloadData)(nil),                                 // 64: pylon.discord.v1.event.InviteDeleteEvent.PayloadData
	(*GuildBanAddEvent_PayloadData)(nil),                                  // 65: pylon.discord.v1.event.GuildBanAddEvent.PayloadData
	(*GuildBanRemoveEvent_PayloadData)(nil),                               // 66: pylon.discord.v1.event.GuildBanRemoveEvent.PayloadData
	(*GuildEmojisUpdateEvent_PayloadData)(nil),                            // 67: pylon.discord.v1.event.GuildEmojisUpdateEvent.PayloadData
	(*GuildIntegrationsUpdateEvent_PayloadData)(nil),                      // 68: pylon.discord.v1.event.GuildIntegrationsUpdateEvent.PayloadData
	(*WebhooksUpdateEvent_PayloadData)(nil),                               // 69: pylon.discord.v1.event.WebhooksUpdateEvent.PayloadData
	(*IntegrationCreateEvent_PayloadData)(nil),                            // 70: pylon.discord.v1.event.IntegrationCreateEvent.PayloadData
	(*IntegrationUpdateEvent_PayloadData)(nil),                            // 71: pylon.discord.v1.event.IntegrationUpdateEvent.PayloadData
	(*IntegrationDeleteEvent_PayloadData)(nil),                            // 72: pylon.discord.v1.event.IntegrationDeleteEvent.PayloadData
	(*InteractionCreateEvent_PayloadData)(nil),                            // 73: pylon.discord.v1.event.InteractionCreateEvent.PayloadData
	(*model.GuildData)(nil),                                               // 74: pylon.discord.v1.model.GuildData
	(*model.PresenceData)(nil),                                            // 75: pylon.discord.v1.model.PresenceData
	(*model.MemberData)(nil),                                              // 76: pylon.discord.v1.model.MemberData
	(*model.ChannelData)(nil),                                             // 77: pylon.discord.v1.model.ChannelData
	(*model.RoleData)(nil),                                                // 78: pylon.discord.v1.model.RoleData
	(*model.MessageData)(nil),                                             // 79: pylon.discord.v1.model.MessageData
	(*model.VoiceStateData)(nil),                                          // 80: pylon.discord.v1.model.VoiceStateData
	(*timestamp.Timestamp)(nil),                                           // 81: google.protobuf.Timestamp
	(*model.SnowflakeValue)(nil),                                          // 82: pylon.discord.v1.model.SnowflakeValue
	(*wrappers.StringValue)(nil),                                          // 83: google.protobuf.StringValue
	(*model.SnowflakeListValue)(nil),                                      // 84: pylon.discord.v1.model.SnowflakeListValue
	(*wrappers.BoolValue)(nil),                                            // 85: google.protobuf.BoolValue
	(*wrappers.UInt32Value)(nil),                                          // 86: google.protobuf.UInt32Value
	(*model.MessageData_MessageAttachmentData)(nil),                       // 87: pylon.discord.v1.model.MessageData.MessageAttachmentData
	(*model.MessageData_MessageEmbedData)(nil),                            // 88: pylon.discord.v1.model.MessageData.MessageEmbedData
	(*model.MessageData_MessageMentionData)(nil),                          // 89: pylon.discord.v1.model.MessageData.MessageMentionData
	(*model.MessageData_MessageReactionData)(nil),                         // 90: pylon.discord.v1.model.MessageData.MessageReactionData
	(model.MessageData_MessageType)(0),                                    // 91: pylon.discord.v1.model.MessageData.MessageType
	(*model.MessageData_MessageMentionChannelData)(nil),                   // 92: pylon.discord.v1.model.MessageData.MessageMentionChannelData
	(*model.MessageData_MessageActivityData)(nil),                         // 93: pylon.discord.v1.model.MessageData.MessageActivityData
	(*model.MessageData_MessageApplicationData)(nil),                      // 94: pylon.discord.v1.model.MessageData.MessageApplicationData
	(*model.MessageData_MessageReferenceData)(nil),                        // 95: pylon.discord.v1.model.MessageData.MessageReferenceData
	(*model.UserData)(nil),                                                // 96: pylon.discord.v1.model.UserData
	(*model.MessageData_MessageReactionEmojiData)(nil),                    // 97: pylon.discord.v1.model.MessageData.MessageReactionEmojiData
	(model.InviteData_InviteTargetUserType)(0),                            // 98: pylon.discord.v1.model.InviteData.InviteTargetUserType
	(*model.EmojiData)(nil),                                               // 99: pylon.discord.v1.model.EmojiData
}
var file_discord_v1_event_proto_depIdxs = []int32{
	41,  // 0: pylon.discord.v1.event.EventEnvelope.header:type_name -> pylon.discord.v1.event.EventEnvelope.HeaderData
	3,   // 1: pylon.discord.v1.event.EventEnvelope.guild_create_event:type_name -> pylon.discord.v1.event.GuildCreateEvent
	4,   // 2: pylon.discord.v1.event.EventEnvelope.guild_update_event:type_name -> pylon.discord.v1.event.GuildUpdateEvent
	5,   // 3: pylon.discord.v1.event.EventEnvelope.guild_delete_event:type_name -> pylon.discord.v1.event.GuildDeleteEvent
	6,   // 4: pylon.discord.v1.event.EventEnvelope.presence_update_event:type_name -> pylon.discord.v1.event.PresenceUpdateEvent
	7,   // 5: pylon.discord.v1.event.EventEnvelope.guild_member_add_event:type_name -> pylon.discord.v1.event.GuildMemberAddEvent
	8,   // 6: pylon.discord.v1.event.EventEnvelope.guild_member_update_event:type_name -> pylon.discord.v1.event.GuildMemberUpdateEvent
	9,   // 7: pylon.discord.v1.event.EventEnvelope.guild_member_remove_event:type_name -> pylon.discord.v1.event.GuildMemberRemoveEvent
	10,  // 8: pylon.discord.v1.event.EventEnvelope.channel_create_event:type_name -> pylon.discord.v1.event.ChannelCreateEvent
	11,  // 9: pylon.discord.v1.event.EventEnvelope.channel_update_event:type_name -> pylon.discord.v1.event.ChannelUpdateEvent
	12,  // 10: pylon.discord.v1.event.EventEnvelope.channel_delete_event:type_name -> pylon.discord.v1.event.ChannelDeleteEvent
	13,  // 11: pylon.discord.v1.event.EventEnvelope.channel_pins_update_event:type_name -> pylon.discord.v1.event.ChannelPinsUpdateEvent
	14,  // 12: pylon.discord.v1.event.EventEnvelope.guild_role_create_event:type_name -> pylon.discord.v1.event.GuildRoleCreateEvent
	15,  // 13: pylon.discord.v1.event.EventEnvelope.guild_role_update_event:type_name -> pylon.discord.v1.event.GuildRoleUpdateEvent
	16,  // 14: pylon.discord.v1.event.EventEnvelope.guild_role_delete_event:type_name -> pylon.discord.v1.event.GuildRoleDeleteEvent
	17,  // 15: pylon.discord.v1.event.EventEnvelope.message_create_event:type_name -> pylon.discord.v1.event.MessageCreateEvent
	18,  // 16: pylon.discord.v1.event.EventEnvelope.message_update_event:type_name -> pylon.discord.v1.event.MessageUpdateEvent
	19,  // 17: pylon.discord.v1.event.EventEnvelope.message_delete_event:type_name -> pylon.discord.v1.event.MessageDeleteEvent
	20,  // 18: pylon.discord.v1.event.EventEnvelope.message_delete_bulk_event:type_name -> pylon.discord.v1.event.MessageDeleteBulkEvent
	21,  // 19: pylon.discord.v1.event.EventEnvelope.message_reaction_add_event:type_name -> pylon.discord.v1.event.MessageReactionAddEvent
	22,  // 20: pylon.discord.v1.event.EventEnvelope.message_reaction_remove_event:type_name -> pylon.discord.v1.event.MessageReactionRemoveEvent
	23,  // 21: pylon.discord.v1.event.EventEnvelope.message_reaction_remove_all_event:type_name -> pylon.discord.v1.event.MessageReactionRemoveAllEvent
	24,  // 22: pylon.discord.v1.event.EventEnvelope.message_reaction_remove_emoji_event:type_name -> pylon.discord.v1.event.MessageReactionRemoveEmojiEvent
	25,  // 23: pylon.discord.v1.event.EventEnvelope.typing_start_event:type_name -> pylon.discord.v1.event.TypingStartEvent
	26,  // 24: pylon.discord.v1.event.EventEnvelope.voice_state_update_event:type_name -> pylon.discord.v1.event.VoiceStateUpdateEvent
	27,  // 25: pylon.discord.v1.event.EventEnvelope.voice_server_update_event:type_name -> pylon.discord.v1.event.VoiceServerUpdateEvent
	28,  // 26: pylon.discord.v1.event.EventEnvelope.invite_create_event:type_name -> pylon.discord.v1.event.InviteCreateEvent
	29,  // 27: pylon.discord.v1.event.EventEnvelope.invite_delete_event:type_name -> pylon.discord.v1.event.InviteDeleteEvent
	30,  // 28: pylon.discord.v1.event.EventEnvelope.guild_ban_add_event:type_name -> pylon.discord.v1.event.GuildBanAddEvent
	31,  // 29: pylon.discord.v1.event.EventEnvelope.guild_ban_remove_event:type_name -> pylon.discord.v1.event.GuildBanRemoveEvent
	32,  // 30: pylon.discord.v1.event.EventEnvelope.guild_emojis_update_event:type_name -> pylon.discord.v1.event.GuildEmojisUpdateEvent
	33,  // 31: pylon.discord.v1.event.EventEnvelope.guild_integrations_update_event:type_name -> pylon.discord.v1.event.GuildIntegrationsUpdateEvent
	34,  // 32: pylon.discord.v1.event.EventEnvelope.webhooks_update_event:type_name -> pylon.discord.v1.event.WebhooksUpdateEvent
	35,  // 33: pylon.discord.v1.event.EventEnvelope.integration_create_event:type_name -> pylon.discord.v1.event.IntegrationCreateEvent
	36,  // 34: pylon.discord.v1.event.EventEnvelope.integration_update_event:type_name -> pylon.discord.v1.event.IntegrationUpdateEvent
	37,  // 35: pylon.discord.v1.event.EventEnvelope.integration_delete_event:type_name -> pylon.discord.v1.event.IntegrationDeleteEvent
	38,  // 36: pylon.discord.v1.event.EventEnvelope.interaction_create_event:type_name -> pylon.discord.v1.event.InteractionCreateEvent
	2,   // 37: pylon.discord.v1.event.GuildCreateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	74,  // 38: pylon.discord.v1.event.GuildCreateEvent.payload:type_name -> pylon.discord.v1.model.GuildData
	2,   // 39: pylon.discord.v1.event.GuildUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	74,  // 40: pylon.discord.v1.event.GuildUpdateEvent.payload:type_name -> pylon.discord.v1.model.GuildData
	74,  // 41: pylon.discord.v1.event.GuildUpdateEvent.previously_cached:type_name -> pylon.discord.v1.model.GuildData
	2,   // 42: pylon.discord.v1.event.GuildDeleteEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	74,  // 43: pylon.discord.v1.event.GuildDeleteEvent.payload:type_name -> pylon.discord.v1.model.GuildData
	2,   // 44: pylon.discord.v1.event.PresenceUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	75,  // 45: pylon.discord.v1.event.PresenceUpdateEvent.payload:type_name -> pylon.discord.v1.model.PresenceData
	75,  // 46: pylon.discord.v1.event.PresenceUpdateEvent.previously_cached:type_name -> pylon.discord.v1.model.PresenceData
	2,   // 47: pylon.discord.v1.event.GuildMemberAddEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	76,  // 48: pylon.discord.v1.event.GuildMemberAddEvent.payload:type_name -> pylon.discord.v1.model.MemberData
	2,   // 49: pylon.discord.v1.event.GuildMemberUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	76,  // 50: pylon.discord.v1.event.GuildMemberUpdateEvent.payload:type_name -> pylon.discord.v1.model.MemberData
	76,  // 51: pylon.discord.v1.event.GuildMemberUpdateEvent.previously_cached:type_name -> pylon.discord.v1.model.MemberData
	2,   // 52: pylon.discord.v1.event.GuildMemberRemoveEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	76,  // 53: pylon.discord.v1.event.GuildMemberRemoveEvent.payload:type_name -> pylon.discord.v1.model.MemberData
	2,   // 54: pylon.discord.v1.event.ChannelCreateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	77,  // 55: pylon.discord.v1.event.ChannelCreateEvent.payload:type_name -> pylon.discord.v1.model.ChannelData
	2,   // 56: pylon.discord.v1.event.ChannelUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	77,  // 57: pylon.discord.v1.event.ChannelUpdateEvent.payload:type_name -> pylon.discord.v1.model.ChannelData
	77,  // 58: pylon.discord.v1.event.ChannelUpdateEvent.previously_cached:type_name -> pylon.discord.v1.model.ChannelData
	2,   // 59: pylon.discord.v1.event.ChannelDeleteEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	77,  // 60: pylon.discord.v1.event.ChannelDeleteEvent.payload:type_name -> pylon.discord.v1.model.ChannelData
	2,   // 61: pylon.discord.v1.event.ChannelPinsUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	42,  // 62: pylon.discord.v1.event.ChannelPinsUpdateEvent.payload:type_name -> pylon.discord.v1.event.ChannelPinsUpdateEvent.PayloadData
	2,   // 63: pylon.discord.v1.event.GuildRoleCreateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	78,  // 64: pylon.discord.v1.event.GuildRoleCreateEvent.payload:type_name -> pylon.discord.v1.model.RoleData
	2,   // 65: pylon.discord.v1.event.GuildRoleUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	78,  // 66: pylon.discord.v1.event.GuildRoleUpdateEvent.payload:type_name -> pylon.discord.v1.model.RoleData
	78,  // 67: pylon.discord.v1.event.GuildRoleUpdateEvent.previously_cached:type_name -> pylon.discord.v1.model.RoleData
	2,   // 68: pylon.discord.v1.event.GuildRoleDeleteEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	78,  // 69: pylon.discord.v1.event.GuildRoleDeleteEvent.payload:type_name -> pylon.discord.v1.model.RoleData
	2,   // 70: pylon.discord.v1.event.MessageCreateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	79,  // 71: pylon.discord.v1.event.MessageCreateEvent.message_data:type_name -> pylon.discord.v1.model.MessageData
	2,   // 72: pylon.discord.v1.event.MessageUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	79,  // 73: pylon.discord.v1.event.MessageUpdateEvent.cached:type_name -> pylon.discord.v1.model.MessageData
	43,  // 74: pylon.discord.v1.event.MessageUpdateEvent.raw:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData
	79,  // 75: pylon.discord.v1.event.MessageUpdateEvent.previously_cached:type_name -> pylon.discord.v1.model.MessageData
	2,   // 76: pylon.discord.v1.event.MessageDeleteEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	55,  // 77: pylon.discord.v1.event.MessageDeleteEvent.payload:type_name -> pylon.discord.v1.event.MessageDeleteEvent.PayloadData
	79,  // 78: pylon.discord.v1.event.MessageDeleteEvent.previously_cached:type_name -> pylon.discord.v1.model.MessageData
	2,   // 79: pylon.discord.v1.event.MessageDeleteBulkEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	56,  // 80: pylon.discord.v1.event.MessageDeleteBulkEvent.payload:type_name -> pylon.discord.v1.event.MessageDeleteBulkEvent.PayloadData
	2,   // 81: pylon.discord.v1.event.MessageReactionAddEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	57,  // 82: pylon.discord.v1.event.MessageReactionAddEvent.payload:type_name -> pylon.discord.v1.event.MessageReactionAddEvent.PayloadData
	2,   // 83: pylon.discord.v1.event.MessageReactionRemoveEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	58,  // 84: pylon.discord.v1.event.MessageReactionRemoveEvent.payload:type_name -> pylon.discord.v1.event.MessageReactionRemoveEvent.PayloadData
	2,   // 85: pylon.discord.v1.event.MessageReactionRemoveAllEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	59,  // 86: pylon.discord.v1.event.MessageReactionRemoveAllEvent.payload:type_name -> pylon.discord.v1.event.MessageReactionRemoveAllEvent.PayloadData
	2,   // 87: pylon.discord.v1.event.MessageReactionRemoveEmojiEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	60,  // 88: pylon.discord.v1.event.MessageReactionRemoveEmojiEvent.payload:type_name -> pylon.discord.v1.event.MessageReactionRemoveEmojiEvent.PayloadData
	2,   // 89: pylon.discord.v1.event.TypingStartEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	61,  // 90: pylon.discord.v1.event.TypingStartEvent.payload:type_name -> pylon.discord.v1.event.TypingStartEvent.PayloadData
	2,   // 91: pylon.discord.v1.event.VoiceStateUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	80,  // 92: pylon.discord.v1.event.VoiceStateUpdateEvent.payload:type_name -> pylon.discord.v1.model.VoiceStateData
	80,  // 93: pylon.discord.v1.event.VoiceStateUpdateEvent.previously_cached:type_name -> pylon.discord.v1.model.VoiceStateData
	2,   // 94: pylon.discord.v1.event.VoiceServerUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	62,  // 95: pylon.discord.v1.event.VoiceServerUpdateEvent.payload:type_name -> pylon.discord.v1.event.VoiceServerUpdateEvent.PayloadData
	2,   // 96: pylon.discord.v1.event.InviteCreateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	63,  // 97: pylon.discord.v1.event.InviteCreateEvent.payload:type_name -> pylon.discord.v1.event.InviteCreateEvent.PayloadData
	2,   // 98: pylon.discord.v1.event.InviteDeleteEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	64,  // 99: pylon.discord.v1.event.InviteDeleteEvent.payload:type_name -> pylon.discord.v1.event.InviteDeleteEvent.PayloadData
	2,   // 100: pylon.discord.v1.event.GuildBanAddEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	65,  // 101: pylon.discord.v1.event.GuildBanAddEvent.payload:type_name -> pylon.discord.v1.event.GuildBanAddEvent.PayloadData
	2,   // 102: pylon.discord.v1.event.GuildBanRemoveEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	66,  // 103: pylon.discord.v1.event.GuildBanRemoveEvent.payload:type_name -> pylon.discord.v1.event.GuildBanRemoveEvent.PayloadData
	2,   // 104: pylon.discord.v1.event.GuildEmojisUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	67,  // 105: pylon.discord.v1.event.GuildEmojisUpdateEvent.payload:type_name -> pylon.discord.v1.event.GuildEmojisUpdateEvent.PayloadData
	67,  // 106: pylon.discord.v1.event.GuildEmojisUpdateEvent.previously_cached:type_name -> pylon.discord.v1.event.GuildEmojisUpdateEvent.PayloadData
	2,   // 107: pylon.discord.v1.event.GuildIntegrationsUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	68,  // 108: pylon.discord.v1.event.GuildIntegrationsUpdateEvent.payload:type_name -> pylon.discord.v1.event.GuildIntegrationsUpdateEvent.PayloadData
	2,   // 109: pylon.discord.v1.event.WebhooksUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	69,  // 110: pylon.discord.v1.event.WebhooksUpdateEvent.payload:type_name -> pylon.discord.v1.event.WebhooksUpdateEvent.PayloadData
	2,   // 111: pylon.discord.v1.event.IntegrationCreateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	70,  // 112: pylon.discord.v1.event.IntegrationCreateEvent.payload:type_name -> pylon.discord.v1.event.IntegrationCreateEvent.PayloadData
	2,   // 113: pylon.discord.v1.event.IntegrationUpdateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	71,  // 114: pylon.discord.v1.event.IntegrationUpdateEvent.payload:type_name -> pylon.discord.v1.event.IntegrationUpdateEvent.PayloadData
	2,   // 115: pylon.discord.v1.event.IntegrationDeleteEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	72,  // 116: pylon.discord.v1.event.IntegrationDeleteEvent.payload:type_name -> pylon.discord.v1.event.IntegrationDeleteEvent.PayloadData
	2,   // 117: pylon.discord.v1.event.InteractionCreateEvent.scope:type_name -> pylon.discord.v1.event.EventScope
	73,  // 118: pylon.discord.v1.event.InteractionCreateEvent.payload:type_name -> pylon.discord.v1.event.InteractionCreateEvent.PayloadData
	81,  // 119: pylon.discord.v1.event.ChannelPinsUpdateEvent.PayloadData.last_pin_timestamp:type_name -> google.protobuf.Timestamp
	82,  // 120: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.guild_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	83,  // 121: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.content:type_name -> google.protobuf.StringValue
	81,  // 122: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.edited_timestamp:type_name -> google.protobuf.Timestamp
	84,  // 123: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.mention_roles:type_name -> pylon.discord.v1.model.SnowflakeListValue
	85,  // 124: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.tts:type_name -> google.protobuf.BoolValue
	85,  // 125: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.mention_everyone:type_name -> google.protobuf.BoolValue
	44,  // 126: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.attachments:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageAttachmentListValue
	45,  // 127: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.embeds:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageEmbedListValue
	46,  // 128: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.mentions:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMentionListValue
	47,  // 129: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.reactions:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageReactionListValue
	85,  // 130: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.pinned:type_name -> google.protobuf.BoolValue
	48,  // 131: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.type:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageTypeValue
	49,  // 132: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.mention_channels:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMentionChannelListValue
	86,  // 133: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.flags:type_name -> google.protobuf.UInt32Value
	50,  // 134: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.activity:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageActivityValue
	51,  // 135: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.application:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageApplicationValue
	52,  // 136: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.message_reference:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageReferenceValue
	53,  // 137: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.author:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageAuthorValue
	54,  // 138: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.member:type_name -> pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMemberValue
	82,  // 139: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.webhook_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	87,  // 140: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageAttachmentListValue.values:type_name -> pylon.discord.v1.model.MessageData.MessageAttachmentData
	88,  // 141: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageEmbedListValue.values:type_name -> pylon.discord.v1.model.MessageData.MessageEmbedData
	89,  // 142: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMentionListValue.values:type_name -> pylon.discord.v1.model.MessageData.MessageMentionData
	90,  // 143: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageReactionListValue.values:type_name -> pylon.discord.v1.model.MessageData.MessageReactionData
	91,  // 144: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageTypeValue.value:type_name -> pylon.discord.v1.model.MessageData.MessageType
	92,  // 145: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMentionChannelListValue.values:type_name -> pylon.discord.v1.model.MessageData.MessageMentionChannelData
	93,  // 146: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageActivityValue.value:type_name -> pylon.discord.v1.model.MessageData.MessageActivityData
	94,  // 147: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageApplicationValue.value:type_name -> pylon.discord.v1.model.MessageData.MessageApplicationData
	95,  // 148: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageReferenceValue.value:type_name -> pylon.discord.v1.model.MessageData.MessageReferenceData
	96,  // 149: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageAuthorValue.value:type_name -> pylon.discord.v1.model.UserData
	76,  // 150: pylon.discord.v1.event.MessageUpdateEvent.PayloadData.MessageMemberValue.value:type_name -> pylon.discord.v1.model.MemberData
	97,  // 151: pylon.discord.v1.event.MessageReactionAddEvent.PayloadData.emoji:type_name -> pylon.discord.v1.model.MessageData.MessageReactionEmojiData
	97,  // 152: pylon.discord.v1.event.MessageReactionRemoveEvent.PayloadData.emoji:type_name -> pylon.discord.v1.model.MessageData.MessageReactionEmojiData
	97,  // 153: pylon.discord.v1.event.MessageReactionRemoveEmojiEvent.PayloadData.emoji:type_name -> pylon.discord.v1.model.MessageData.MessageReactionEmojiData
	81,  // 154: pylon.discord.v1.event.TypingStartEvent.PayloadData.timestamp:type_name -> google.protobuf.Timestamp
	76,  // 155: pylon.discord.v1.event.TypingStartEvent.PayloadData.member:type_name -> pylon.discord.v1.model.MemberData
	81,  // 156: pylon.discord.v1.event.InviteCreateEvent.PayloadData.created_at:type_name -> google.protobuf.Timestamp
	82,  // 157: pylon.discord.v1.event.InviteCreateEvent.PayloadData.guild_id:type_name -> pylon.discord.v1.model.SnowflakeValue
	96,  // 158: pylon.discord.v1.event.InviteCreateEvent.PayloadData.inviter:type_name -> pylon.discord.v1.model.UserData
	96,  // 159: pylon.discord.v1.event.InviteCreateEvent.PayloadData.target_user:type_name -> pylon.discord.v1.model.UserData
	98,  // 160: pylon.discord.v1.event.InviteCreateEvent.PayloadData.target_user_type:type_name -> pylon.discord.v1.model.InviteData.InviteTargetUserType
	96,  // 161: pylon.discord.v1.event.GuildBanAddEvent.PayloadData.user:type_name -> pylon.discord.v1.model.UserData
	96,  // 162: pylon.discord.v1.event.GuildBanRemoveEvent.PayloadData.user:type_name -> pylon.discord.v1.model.UserData
	99,  // 163: pylon.discord.v1.event.GuildEmojisUpdateEvent.PayloadData.emojis:type_name -> pylon.discord.v1.model.EmojiData
	164, // [164:164] is the sub-list for method output_type
	164, // [164:164] is the sub-list for method input_type
	164, // [164:164] is the sub-list for extension type_name
	164, // [164:164] is the sub-list for extension extendee
	0,   // [0:164] is the sub-list for field type_name
}

func init() { file_discord_v1_event_proto_init() }
func file_discord_v1_event_proto_init() {
	if File_discord_v1_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_discord_v1_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventEnvelopeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberAddEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberRemoveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPinsUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRoleCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRoleUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRoleDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeleteBulkEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionAddEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemoveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemoveAllEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemoveEmojiEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypingStartEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceStateUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceServerUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBanAddEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBanRemoveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildEmojisUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildIntegrationsUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhooksUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventEnvelope_HeaderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPinsUpdateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageAttachmentListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageEmbedListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageMentionListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageReactionListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageTypeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageMentionChannelListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageActivityValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageApplicationValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageReferenceValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageAuthorValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageUpdateEvent_PayloadData_MessageMemberValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeleteEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeleteBulkEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionAddEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemoveEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemoveAllEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemoveEmojiEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypingStartEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceServerUpdateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteCreateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteDeleteEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBanAddEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBanRemoveEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildEmojisUpdateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildIntegrationsUpdateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhooksUpdateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationCreateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationUpdateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationDeleteEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_v1_event_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateEvent_PayloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_discord_v1_event_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EventEnvelope_GuildCreateEvent)(nil),
		(*EventEnvelope_GuildUpdateEvent)(nil),
		(*EventEnvelope_GuildDeleteEvent)(nil),
		(*EventEnvelope_PresenceUpdateEvent)(nil),
		(*EventEnvelope_GuildMemberAddEvent)(nil),
		(*EventEnvelope_GuildMemberUpdateEvent)(nil),
		(*EventEnvelope_GuildMemberRemoveEvent)(nil),
		(*EventEnvelope_ChannelCreateEvent)(nil),
		(*EventEnvelope_ChannelUpdateEvent)(nil),
		(*EventEnvelope_ChannelDeleteEvent)(nil),
		(*EventEnvelope_ChannelPinsUpdateEvent)(nil),
		(*EventEnvelope_GuildRoleCreateEvent)(nil),
		(*EventEnvelope_GuildRoleUpdateEvent)(nil),
		(*EventEnvelope_GuildRoleDeleteEvent)(nil),
		(*EventEnvelope_MessageCreateEvent)(nil),
		(*EventEnvelope_MessageUpdateEvent)(nil),
		(*EventEnvelope_MessageDeleteEvent)(nil),
		(*EventEnvelope_MessageDeleteBulkEvent)(nil),
		(*EventEnvelope_MessageReactionAddEvent)(nil),
		(*EventEnvelope_MessageReactionRemoveEvent)(nil),
		(*EventEnvelope_MessageReactionRemoveAllEvent)(nil),
		(*EventEnvelope_MessageReactionRemoveEmojiEvent)(nil),
		(*EventEnvelope_TypingStartEvent)(nil),
		(*EventEnvelope_VoiceStateUpdateEvent)(nil),
		(*EventEnvelope_VoiceServerUpdateEvent)(nil),
		(*EventEnvelope_InviteCreateEvent)(nil),
		(*EventEnvelope_InviteDeleteEvent)(nil),
		(*EventEnvelope_GuildBanAddEvent)(nil),
		(*EventEnvelope_GuildBanRemoveEvent)(nil),
		(*EventEnvelope_GuildEmojisUpdateEvent)(nil),
		(*EventEnvelope_GuildIntegrationsUpdateEvent)(nil),
		(*EventEnvelope_WebhooksUpdateEvent)(nil),
		(*EventEnvelope_IntegrationCreateEvent)(nil),
		(*EventEnvelope_IntegrationUpdateEvent)(nil),
		(*EventEnvelope_IntegrationDeleteEvent)(nil),
		(*EventEnvelope_InteractionCreateEvent)(nil),
	}
	file_discord_v1_event_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*MessageUpdateEvent_Cached)(nil),
		(*MessageUpdateEvent_Raw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_discord_v1_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_discord_v1_event_proto_goTypes,
		DependencyIndexes: file_discord_v1_event_proto_depIdxs,
		MessageInfos:      file_discord_v1_event_proto_msgTypes,
	}.Build()
	File_discord_v1_event_proto = out.File
	file_discord_v1_event_proto_rawDesc = nil
	file_discord_v1_event_proto_goTypes = nil
	file_discord_v1_event_proto_depIdxs = nil
}
